
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006858  08006858  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006860  08006860  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08006868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200002e8  08006b50  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08006b50  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e88  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  000311e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a61  00000000  00000000  00034180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253ea  00000000  00000000  00034be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011532  00000000  00000000  00059fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec2ba  00000000  00000000  0006b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036d8  00000000  00000000  001577b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080067bc 	.word	0x080067bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002ec 	.word	0x200002ec
 8000214:	080067bc 	.word	0x080067bc

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 ff23 	bl	8001372 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 fa2a 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fb90 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fb4c 	bl	8000bd0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 fab0 	bl	8000a9c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 fa6e 	bl	8000a1c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 faf8 	bl	8000b34 <MX_USART1_UART_Init>

    /* USER CODE BEGIN 3 */
	  // STM32 Part //

//	  TxSend();
	  Dummy();
 8000544:	f000 fc4c 	bl	8000de0 <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 8000548:	2202      	movs	r2, #2
 800054a:	4993      	ldr	r1, [pc, #588]	; (8000798 <main+0x274>)
 800054c:	4893      	ldr	r0, [pc, #588]	; (800079c <main+0x278>)
 800054e:	f004 fd0b 	bl	8004f68 <HAL_UART_Receive_DMA>
	if(A==8){
 8000552:	4b93      	ldr	r3, [pc, #588]	; (80007a0 <main+0x27c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b08      	cmp	r3, #8
 8000558:	d112      	bne.n	8000580 <main+0x5c>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 800055a:	4892      	ldr	r0, [pc, #584]	; (80007a4 <main+0x280>)
 800055c:	f7ff fe5c 	bl	8000218 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	2304      	movs	r3, #4
 8000566:	498f      	ldr	r1, [pc, #572]	; (80007a4 <main+0x280>)
 8000568:	488c      	ldr	r0, [pc, #560]	; (800079c <main+0x278>)
 800056a:	f004 fc6f 	bl	8004e4c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 800056e:	2308      	movs	r3, #8
 8000570:	221b      	movs	r2, #27
 8000572:	498d      	ldr	r1, [pc, #564]	; (80007a8 <main+0x284>)
 8000574:	4889      	ldr	r0, [pc, #548]	; (800079c <main+0x278>)
 8000576:	f004 fc69 	bl	8004e4c <HAL_UART_Transmit>
	  A=1;
 800057a:	4b89      	ldr	r3, [pc, #548]	; (80007a0 <main+0x27c>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000580:	4b87      	ldr	r3, [pc, #540]	; (80007a0 <main+0x27c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d115      	bne.n	80005b4 <main+0x90>
			HAL_Delay(1000);
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f000 ff62 	bl	8001454 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 8000590:	230a      	movs	r3, #10
 8000592:	2264      	movs	r2, #100	; 0x64
 8000594:	4985      	ldr	r1, [pc, #532]	; (80007ac <main+0x288>)
 8000596:	4881      	ldr	r0, [pc, #516]	; (800079c <main+0x278>)
 8000598:	f004 fc58 	bl	8004e4c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800059c:	230a      	movs	r3, #10
 800059e:	2228      	movs	r2, #40	; 0x28
 80005a0:	4983      	ldr	r1, [pc, #524]	; (80007b0 <main+0x28c>)
 80005a2:	487e      	ldr	r0, [pc, #504]	; (800079c <main+0x278>)
 80005a4:	f004 fc52 	bl	8004e4c <HAL_UART_Transmit>
			A = 0;
 80005a8:	4b7d      	ldr	r3, [pc, #500]	; (80007a0 <main+0x27c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <main+0x290>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005b4:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <main+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d145      	bne.n	8000648 <main+0x124>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005bc:	4b76      	ldr	r3, [pc, #472]	; (8000798 <main+0x274>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b79      	cmp	r3, #121	; 0x79
 80005c2:	d120      	bne.n	8000606 <main+0xe2>
 80005c4:	4b74      	ldr	r3, [pc, #464]	; (8000798 <main+0x274>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	2b0d      	cmp	r3, #13
 80005ca:	d11c      	bne.n	8000606 <main+0xe2>
 80005cc:	4b79      	ldr	r3, [pc, #484]	; (80007b4 <main+0x290>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d118      	bne.n	8000606 <main+0xe2>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005d4:	230a      	movs	r3, #10
 80005d6:	221e      	movs	r2, #30
 80005d8:	4977      	ldr	r1, [pc, #476]	; (80007b8 <main+0x294>)
 80005da:	4870      	ldr	r0, [pc, #448]	; (800079c <main+0x278>)
 80005dc:	f004 fc36 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005e0:	2308      	movs	r3, #8
 80005e2:	220c      	movs	r2, #12
 80005e4:	4975      	ldr	r1, [pc, #468]	; (80007bc <main+0x298>)
 80005e6:	486d      	ldr	r0, [pc, #436]	; (800079c <main+0x278>)
 80005e8:	f004 fc30 	bl	8004e4c <HAL_UART_Transmit>
				s1 =+ 1;
 80005ec:	4b74      	ldr	r3, [pc, #464]	; (80007c0 <main+0x29c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
				A = 2;
 80005f2:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <main+0x27c>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80005f8:	4b67      	ldr	r3, [pc, #412]	; (8000798 <main+0x274>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80005fe:	4b66      	ldr	r3, [pc, #408]	; (8000798 <main+0x274>)
 8000600:	2200      	movs	r2, #0
 8000602:	705a      	strb	r2, [r3, #1]
 8000604:	e020      	b.n	8000648 <main+0x124>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 8000606:	4b64      	ldr	r3, [pc, #400]	; (8000798 <main+0x274>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b6e      	cmp	r3, #110	; 0x6e
 800060c:	d11c      	bne.n	8000648 <main+0x124>
 800060e:	4b62      	ldr	r3, [pc, #392]	; (8000798 <main+0x274>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	2b0d      	cmp	r3, #13
 8000614:	d118      	bne.n	8000648 <main+0x124>
 8000616:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <main+0x290>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d114      	bne.n	8000648 <main+0x124>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 800061e:	230a      	movs	r3, #10
 8000620:	221e      	movs	r2, #30
 8000622:	4968      	ldr	r1, [pc, #416]	; (80007c4 <main+0x2a0>)
 8000624:	485d      	ldr	r0, [pc, #372]	; (800079c <main+0x278>)
 8000626:	f004 fc11 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 800062a:	2308      	movs	r3, #8
 800062c:	220c      	movs	r2, #12
 800062e:	4963      	ldr	r1, [pc, #396]	; (80007bc <main+0x298>)
 8000630:	485a      	ldr	r0, [pc, #360]	; (800079c <main+0x278>)
 8000632:	f004 fc0b 	bl	8004e4c <HAL_UART_Transmit>
				A = 2;
 8000636:	4b5a      	ldr	r3, [pc, #360]	; (80007a0 <main+0x27c>)
 8000638:	2202      	movs	r2, #2
 800063a:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800063c:	4b56      	ldr	r3, [pc, #344]	; (8000798 <main+0x274>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000642:	4b55      	ldr	r3, [pc, #340]	; (8000798 <main+0x274>)
 8000644:	2200      	movs	r2, #0
 8000646:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 8000648:	4b55      	ldr	r3, [pc, #340]	; (80007a0 <main+0x27c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d115      	bne.n	800067c <main+0x158>
			HAL_Delay(500);
 8000650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000654:	f000 fefe 	bl	8001454 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 8000658:	230a      	movs	r3, #10
 800065a:	2264      	movs	r2, #100	; 0x64
 800065c:	495a      	ldr	r1, [pc, #360]	; (80007c8 <main+0x2a4>)
 800065e:	484f      	ldr	r0, [pc, #316]	; (800079c <main+0x278>)
 8000660:	f004 fbf4 	bl	8004e4c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000664:	230a      	movs	r3, #10
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	4951      	ldr	r1, [pc, #324]	; (80007b0 <main+0x28c>)
 800066a:	484c      	ldr	r0, [pc, #304]	; (800079c <main+0x278>)
 800066c:	f004 fbee 	bl	8004e4c <HAL_UART_Transmit>
			A = 0;
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <main+0x27c>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
			mode = 2;
 8000676:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <main+0x290>)
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <main+0x290>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d145      	bne.n	8000710 <main+0x1ec>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 8000684:	4b44      	ldr	r3, [pc, #272]	; (8000798 <main+0x274>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b79      	cmp	r3, #121	; 0x79
 800068a:	d11d      	bne.n	80006c8 <main+0x1a4>
 800068c:	4b42      	ldr	r3, [pc, #264]	; (8000798 <main+0x274>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	2b0d      	cmp	r3, #13
 8000692:	d119      	bne.n	80006c8 <main+0x1a4>
 8000694:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <main+0x290>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d115      	bne.n	80006c8 <main+0x1a4>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800069c:	230a      	movs	r3, #10
 800069e:	221e      	movs	r2, #30
 80006a0:	4945      	ldr	r1, [pc, #276]	; (80007b8 <main+0x294>)
 80006a2:	483e      	ldr	r0, [pc, #248]	; (800079c <main+0x278>)
 80006a4:	f004 fbd2 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006a8:	2308      	movs	r3, #8
 80006aa:	220c      	movs	r2, #12
 80006ac:	4943      	ldr	r1, [pc, #268]	; (80007bc <main+0x298>)
 80006ae:	483b      	ldr	r0, [pc, #236]	; (800079c <main+0x278>)
 80006b0:	f004 fbcc 	bl	8004e4c <HAL_UART_Transmit>
				A = 3;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <main+0x27c>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <main+0x274>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006c0:	4b35      	ldr	r3, [pc, #212]	; (8000798 <main+0x274>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
 80006c6:	e023      	b.n	8000710 <main+0x1ec>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <main+0x274>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b6e      	cmp	r3, #110	; 0x6e
 80006ce:	d11f      	bne.n	8000710 <main+0x1ec>
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <main+0x274>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2b0d      	cmp	r3, #13
 80006d6:	d11b      	bne.n	8000710 <main+0x1ec>
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x290>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d117      	bne.n	8000710 <main+0x1ec>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006e0:	230a      	movs	r3, #10
 80006e2:	221e      	movs	r2, #30
 80006e4:	4937      	ldr	r1, [pc, #220]	; (80007c4 <main+0x2a0>)
 80006e6:	482d      	ldr	r0, [pc, #180]	; (800079c <main+0x278>)
 80006e8:	f004 fbb0 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006ec:	2308      	movs	r3, #8
 80006ee:	220c      	movs	r2, #12
 80006f0:	4932      	ldr	r1, [pc, #200]	; (80007bc <main+0x298>)
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <main+0x278>)
 80006f4:	f004 fbaa 	bl	8004e4c <HAL_UART_Transmit>
				s2 =+ 1;
 80006f8:	4b34      	ldr	r3, [pc, #208]	; (80007cc <main+0x2a8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
				A = 3;
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <main+0x27c>)
 8000700:	2203      	movs	r2, #3
 8000702:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <main+0x274>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0x274>)
 800070c:	2200      	movs	r2, #0
 800070e:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <main+0x27c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d115      	bne.n	8000744 <main+0x220>
			HAL_Delay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f000 fe9a 	bl	8001454 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000720:	230a      	movs	r3, #10
 8000722:	2264      	movs	r2, #100	; 0x64
 8000724:	492a      	ldr	r1, [pc, #168]	; (80007d0 <main+0x2ac>)
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x278>)
 8000728:	f004 fb90 	bl	8004e4c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800072c:	230a      	movs	r3, #10
 800072e:	2228      	movs	r2, #40	; 0x28
 8000730:	491f      	ldr	r1, [pc, #124]	; (80007b0 <main+0x28c>)
 8000732:	481a      	ldr	r0, [pc, #104]	; (800079c <main+0x278>)
 8000734:	f004 fb8a 	bl	8004e4c <HAL_UART_Transmit>
			A = 0;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <main+0x27c>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
			mode = 3;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0x290>)
 8000740:	2203      	movs	r2, #3
 8000742:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <main+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d166      	bne.n	800081a <main+0x2f6>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <main+0x274>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b79      	cmp	r3, #121	; 0x79
 8000752:	d141      	bne.n	80007d8 <main+0x2b4>
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <main+0x274>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	2b0d      	cmp	r3, #13
 800075a:	d13d      	bne.n	80007d8 <main+0x2b4>
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <main+0x290>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d139      	bne.n	80007d8 <main+0x2b4>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 8000764:	230a      	movs	r3, #10
 8000766:	221e      	movs	r2, #30
 8000768:	4913      	ldr	r1, [pc, #76]	; (80007b8 <main+0x294>)
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <main+0x278>)
 800076c:	f004 fb6e 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000770:	2308      	movs	r3, #8
 8000772:	220c      	movs	r2, #12
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <main+0x298>)
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <main+0x278>)
 8000778:	f004 fb68 	bl	8004e4c <HAL_UART_Transmit>
				s3 =+ 1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0x2b0>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
				A = 4;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <main+0x27c>)
 8000784:	2204      	movs	r2, #4
 8000786:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <main+0x274>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 800078e:	4b02      	ldr	r3, [pc, #8]	; (8000798 <main+0x274>)
 8000790:	2200      	movs	r2, #0
 8000792:	705a      	strb	r2, [r3, #1]
 8000794:	e041      	b.n	800081a <main+0x2f6>
 8000796:	bf00      	nop
 8000798:	20000600 	.word	0x20000600
 800079c:	20000358 	.word	0x20000358
 80007a0:	200002d8 	.word	0x200002d8
 80007a4:	20000000 	.word	0x20000000
 80007a8:	080067d4 	.word	0x080067d4
 80007ac:	20000020 	.word	0x20000020
 80007b0:	2000014c 	.word	0x2000014c
 80007b4:	20000608 	.word	0x20000608
 80007b8:	20000174 	.word	0x20000174
 80007bc:	080067f0 	.word	0x080067f0
 80007c0:	20000602 	.word	0x20000602
 80007c4:	20000194 	.word	0x20000194
 80007c8:	20000084 	.word	0x20000084
 80007cc:	20000603 	.word	0x20000603
 80007d0:	200000e8 	.word	0x200000e8
 80007d4:	20000604 	.word	0x20000604
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007d8:	4b55      	ldr	r3, [pc, #340]	; (8000930 <main+0x40c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b6e      	cmp	r3, #110	; 0x6e
 80007de:	d11c      	bne.n	800081a <main+0x2f6>
 80007e0:	4b53      	ldr	r3, [pc, #332]	; (8000930 <main+0x40c>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	2b0d      	cmp	r3, #13
 80007e6:	d118      	bne.n	800081a <main+0x2f6>
 80007e8:	4b52      	ldr	r3, [pc, #328]	; (8000934 <main+0x410>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d114      	bne.n	800081a <main+0x2f6>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80007f0:	230a      	movs	r3, #10
 80007f2:	221e      	movs	r2, #30
 80007f4:	4950      	ldr	r1, [pc, #320]	; (8000938 <main+0x414>)
 80007f6:	4851      	ldr	r0, [pc, #324]	; (800093c <main+0x418>)
 80007f8:	f004 fb28 	bl	8004e4c <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80007fc:	2308      	movs	r3, #8
 80007fe:	220c      	movs	r2, #12
 8000800:	494f      	ldr	r1, [pc, #316]	; (8000940 <main+0x41c>)
 8000802:	484e      	ldr	r0, [pc, #312]	; (800093c <main+0x418>)
 8000804:	f004 fb22 	bl	8004e4c <HAL_UART_Transmit>
				A = 4;
 8000808:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <main+0x420>)
 800080a:	2204      	movs	r2, #4
 800080c:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <main+0x40c>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <main+0x40c>)
 8000816:	2200      	movs	r2, #0
 8000818:	705a      	strb	r2, [r3, #1]
			}
		}
//ScoreBoard //
		if(A == 4){
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <main+0x420>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d11e      	bne.n	8000860 <main+0x33c>
			HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f000 fe15 	bl	8001454 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800082a:	230a      	movs	r3, #10
 800082c:	221e      	movs	r2, #30
 800082e:	4946      	ldr	r1, [pc, #280]	; (8000948 <main+0x424>)
 8000830:	4842      	ldr	r0, [pc, #264]	; (800093c <main+0x418>)
 8000832:	f004 fb0b 	bl	8004e4c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, ToT2, 50, 10);
 8000836:	230a      	movs	r3, #10
 8000838:	2232      	movs	r2, #50	; 0x32
 800083a:	4944      	ldr	r1, [pc, #272]	; (800094c <main+0x428>)
 800083c:	483f      	ldr	r0, [pc, #252]	; (800093c <main+0x418>)
 800083e:	f004 fb05 	bl	8004e4c <HAL_UART_Transmit>
			TotalScore = s1+s2+s3;
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <main+0x42c>)
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	4b43      	ldr	r3, [pc, #268]	; (8000954 <main+0x430>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <main+0x434>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <main+0x438>)
 8000858:	701a      	strb	r2, [r3, #0]
			A=5;
 800085a:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <main+0x420>)
 800085c:	2205      	movs	r2, #5
 800085e:	601a      	str	r2, [r3, #0]
		}
// I2C part //
		if(A == 5){
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <main+0x420>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d109      	bne.n	800087c <main+0x358>
			HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f000 fdf2 	bl	8001454 <HAL_Delay>
			WriteFlag = 1;
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <main+0x43c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
			A=6;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <main+0x420>)
 8000878:	2206      	movs	r2, #6
 800087a:	601a      	str	r2, [r3, #0]
		}
		if(A == 6){
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <main+0x420>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b06      	cmp	r3, #6
 8000882:	d109      	bne.n	8000898 <main+0x374>
			HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fde4 	bl	8001454 <HAL_Delay>
			ReadFlag = 1;
 800088c:	4b35      	ldr	r3, [pc, #212]	; (8000964 <main+0x440>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
			A = 7;
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <main+0x420>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
		}
		if(A == 7){
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <main+0x420>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b07      	cmp	r3, #7
 800089e:	d13f      	bne.n	8000920 <main+0x3fc>
			if (eepromDataReadBack[0] == 0){
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <main+0x444>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d109      	bne.n	80008bc <main+0x398>
				B = 4;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <main+0x448>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S, 50, 10);
 80008ae:	230a      	movs	r3, #10
 80008b0:	2232      	movs	r2, #50	; 0x32
 80008b2:	492f      	ldr	r1, [pc, #188]	; (8000970 <main+0x44c>)
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <main+0x418>)
 80008b6:	f004 fac9 	bl	8004e4c <HAL_UART_Transmit>
 80008ba:	e028      	b.n	800090e <main+0x3ea>
			}
			else if(eepromDataReadBack[0] == 1){
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <main+0x444>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d109      	bne.n	80008d8 <main+0x3b4>
				B = 1;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <main+0x448>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S1, 50, 10);
 80008ca:	230a      	movs	r3, #10
 80008cc:	2232      	movs	r2, #50	; 0x32
 80008ce:	4929      	ldr	r1, [pc, #164]	; (8000974 <main+0x450>)
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <main+0x418>)
 80008d2:	f004 fabb 	bl	8004e4c <HAL_UART_Transmit>
 80008d6:	e01a      	b.n	800090e <main+0x3ea>
			}
			else if(eepromDataReadBack[0] == 2){
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0x444>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d109      	bne.n	80008f4 <main+0x3d0>
				B = 2;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <main+0x448>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S2, 50, 10);
 80008e6:	230a      	movs	r3, #10
 80008e8:	2232      	movs	r2, #50	; 0x32
 80008ea:	4923      	ldr	r1, [pc, #140]	; (8000978 <main+0x454>)
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <main+0x418>)
 80008ee:	f004 faad 	bl	8004e4c <HAL_UART_Transmit>
 80008f2:	e00c      	b.n	800090e <main+0x3ea>
			}
			else if(eepromDataReadBack[0] == 3){
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <main+0x444>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d108      	bne.n	800090e <main+0x3ea>
				B = 3;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0x448>)
 80008fe:	2203      	movs	r2, #3
 8000900:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S3, 50, 10);
 8000902:	230a      	movs	r3, #10
 8000904:	2232      	movs	r2, #50	; 0x32
 8000906:	491d      	ldr	r1, [pc, #116]	; (800097c <main+0x458>)
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <main+0x418>)
 800090a:	f004 fa9f 	bl	8004e4c <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&hlpuart1,"YOU ARE NOOB,LOSER UwU.\n\r", 50, 10);
 800090e:	230a      	movs	r3, #10
 8000910:	2232      	movs	r2, #50	; 0x32
 8000912:	491b      	ldr	r1, [pc, #108]	; (8000980 <main+0x45c>)
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <main+0x418>)
 8000916:	f004 fa99 	bl	8004e4c <HAL_UART_Transmit>
			A=0;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <main+0x420>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
		}
  EEPROMWriteExample();
 8000920:	f000 fa06 	bl	8000d30 <EEPROMWriteExample>
  EEPROMReadExample(eepromDataReadBack, 1);
 8000924:	2101      	movs	r1, #1
 8000926:	4810      	ldr	r0, [pc, #64]	; (8000968 <main+0x444>)
 8000928:	f000 fa34 	bl	8000d94 <EEPROMReadExample>
	  Dummy();
 800092c:	e60a      	b.n	8000544 <main+0x20>
 800092e:	bf00      	nop
 8000930:	20000600 	.word	0x20000600
 8000934:	20000608 	.word	0x20000608
 8000938:	20000194 	.word	0x20000194
 800093c:	20000358 	.word	0x20000358
 8000940:	080067f0 	.word	0x080067f0
 8000944:	200002d8 	.word	0x200002d8
 8000948:	200001b4 	.word	0x200001b4
 800094c:	200001d4 	.word	0x200001d4
 8000950:	20000602 	.word	0x20000602
 8000954:	20000603 	.word	0x20000603
 8000958:	20000604 	.word	0x20000604
 800095c:	2000060c 	.word	0x2000060c
 8000960:	2000060d 	.word	0x2000060d
 8000964:	2000060e 	.word	0x2000060e
 8000968:	20000610 	.word	0x20000610
 800096c:	20000614 	.word	0x20000614
 8000970:	20000208 	.word	0x20000208
 8000974:	2000023c 	.word	0x2000023c
 8000978:	20000270 	.word	0x20000270
 800097c:	200002a4 	.word	0x200002a4
 8000980:	080067fc 	.word	0x080067fc

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2238      	movs	r2, #56	; 0x38
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f005 fee6 	bl	8006764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f003 f9d0 	bl	8003d4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009c6:	2355      	movs	r3, #85	; 0x55
 80009c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fa6a 	bl	8003eb4 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009e6:	f000 fa13 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fd68 	bl	80044d8 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a0e:	f000 f9ff 	bl	8000e10 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	; 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_I2C1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x7c>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a58:	f001 fb45 	bl	80020e6 <HAL_I2C_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a62:	f000 f9d5 	bl	8000e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a6a:	f003 f8d7 	bl	8003c1c <HAL_I2CEx_ConfigAnalogFilter>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f9cc 	bl	8000e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a7c:	f003 f919 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f9c3 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000304 	.word	0x20000304
 8000a94:	40005400 	.word	0x40005400
 8000a98:	30a0a7fb 	.word	0x30a0a7fb

08000a9c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_LPUART1_UART_Init+0x94>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000ae4:	f004 f962 	bl	8004dac <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 f98f 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000af6:	f005 fd6b 	bl	80065d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b00:	f000 f986 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000b08:	f005 fda0 	bl	800664c <HAL_UARTEx_SetRxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b12:	f000 f97d 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000b18:	f005 fd21 	bl	800655e <HAL_UARTEx_DisableFifoMode>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b22:	f000 f975 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000358 	.word	0x20000358
 8000b30:	40008000 	.word	0x40008000

08000b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <MX_USART1_UART_Init+0x98>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b82:	f004 f913 	bl	8004dac <HAL_UART_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f940 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b94:	f005 fd1c 	bl	80065d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f937 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000ba6:	f005 fd51 	bl	800664c <HAL_UARTEx_SetRxFifoThreshold>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000bb0:	f000 f92e 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000bb6:	f005 fcd2 	bl	800655e <HAL_UARTEx_DisableFifoMode>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f000 f926 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200003ec 	.word	0x200003ec
 8000bcc:	40013800 	.word	0x40013800

08000bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_DMA_Init+0x80>)
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <MX_DMA_Init+0x80>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6493      	str	r3, [r2, #72]	; 0x48
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_DMA_Init+0x80>)
 8000be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_DMA_Init+0x80>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_DMA_Init+0x80>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_DMA_Init+0x80>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	200b      	movs	r0, #11
 8000c0c:	f000 fd1f 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c10:	200b      	movs	r0, #11
 8000c12:	f000 fd36 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f000 fd17 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c20:	200c      	movs	r0, #12
 8000c22:	f000 fd2e 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200d      	movs	r0, #13
 8000c2c:	f000 fd0f 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c30:	200d      	movs	r0, #13
 8000c32:	f000 fd26 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200e      	movs	r0, #14
 8000c3c:	f000 fd07 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c40:	200e      	movs	r0, #14
 8000c42:	f000 fd1e 	bl	8001682 <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0320 	and.w	r3, r3, #32
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_GPIO_Init+0xd4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f001 f9b3 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <MX_GPIO_Init+0xd8>)
 8000cee:	f001 f823 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f001 f814 	bl	8001d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2028      	movs	r0, #40	; 0x28
 8000d16:	f000 fc9a 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d1a:	2028      	movs	r0, #40	; 0x28
 8000d1c:	f000 fcb1 	bl	8001682 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000800 	.word	0x48000800

08000d30 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af02      	add	r7, sp, #8
	if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <EEPROMWriteExample+0x54>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d01f      	beq.n	8000d7e <EEPROMWriteExample+0x4e>
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <EEPROMWriteExample+0x58>)
 8000d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b20      	cmp	r3, #32
 8000d48:	d119      	bne.n	8000d7e <EEPROMWriteExample+0x4e>
	static uint8_t data[4];
	 data[0]=TotalScore;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <EEPROMWriteExample+0x5c>)
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <EEPROMWriteExample+0x60>)
 8000d50:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <EEPROMWriteExample+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <EEPROMWriteExample+0x60>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <EEPROMWriteExample+0x60>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 1);
 8000d64:	2301      	movs	r3, #1
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <EEPROMWriteExample+0x60>)
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	222c      	movs	r2, #44	; 0x2c
 8000d70:	21a0      	movs	r1, #160	; 0xa0
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <EEPROMWriteExample+0x58>)
 8000d74:	f001 fa52 	bl	800221c <HAL_I2C_Mem_Write_IT>

		WriteFlag = 0;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <EEPROMWriteExample+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
	}
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000060d 	.word	0x2000060d
 8000d88:	20000304 	.word	0x20000304
 8000d8c:	2000060c 	.word	0x2000060c
 8000d90:	20000618 	.word	0x20000618

08000d94 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
	if (ReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <EEPROMReadExample+0x44>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d012      	beq.n	8000dce <EEPROMReadExample+0x3a>
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <EEPROMReadExample+0x48>)
 8000daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d10c      	bne.n	8000dce <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	222c      	movs	r2, #44	; 0x2c
 8000dc0:	21a0      	movs	r1, #160	; 0xa0
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <EEPROMReadExample+0x48>)
 8000dc4:	f001 fab4 	bl	8002330 <HAL_I2C_Mem_Read_IT>
		ReadFlag = 0;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <EEPROMReadExample+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	}
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000060e 	.word	0x2000060e
 8000ddc:	20000304 	.word	0x20000304

08000de0 <Dummy>:



// For LD2 Test //
void Dummy(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000de4:	f000 fb2a 	bl	800143c <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <Dummy+0x2c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d30a      	bcc.n	8000e08 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000df2:	f000 fb23 	bl	800143c <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	3364      	adds	r3, #100	; 0x64
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <Dummy+0x2c>)
 8000dfc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000dfe:	2120      	movs	r1, #32
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f001 f932 	bl	800206c <HAL_GPIO_TogglePin>
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000061c 	.word	0x2000061c

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e52:	f003 f81f 	bl	8003e94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	; 0x78
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2254      	movs	r2, #84	; 0x54
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fc6d 	bl	8006764 <memset>
  if(hi2c->Instance==I2C1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <HAL_I2C_MspInit+0xc8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d146      	bne.n	8000f22 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fd35 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eac:	f7ff ffb0 	bl	8000e10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ecc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <HAL_I2C_MspInit+0xd0>)
 8000ee6:	f000 ff27 	bl	8001d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_I2C_MspInit+0xcc>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201f      	movs	r0, #31
 8000f08:	f000 fba1 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f0c:	201f      	movs	r0, #31
 8000f0e:	f000 fbb8 	bl	8001682 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2020      	movs	r0, #32
 8000f18:	f000 fb99 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	f000 fbb0 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3778      	adds	r7, #120	; 0x78
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0a0      	sub	sp, #128	; 0x80
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	2254      	movs	r2, #84	; 0x54
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fc03 	bl	8006764 <memset>
  if(huart->Instance==LPUART1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a99      	ldr	r2, [pc, #612]	; (80011c8 <HAL_UART_MspInit+0x290>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f040 8093 	bne.w	8001090 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fcca 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f82:	f7ff ff45 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f86:	4b91      	ldr	r3, [pc, #580]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	4a90      	ldr	r2, [pc, #576]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f92:	4b8e      	ldr	r3, [pc, #568]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a8a      	ldr	r2, [pc, #552]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b88      	ldr	r3, [pc, #544]	; (80011cc <HAL_UART_MspInit+0x294>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 feb0 	bl	8001d38 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8000fd8:	4b7d      	ldr	r3, [pc, #500]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000fda:	4a7e      	ldr	r2, [pc, #504]	; (80011d4 <HAL_UART_MspInit+0x29c>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000fde:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000fe0:	2223      	movs	r2, #35	; 0x23
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe4:	4b7a      	ldr	r3, [pc, #488]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b77      	ldr	r3, [pc, #476]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffc:	4b74      	ldr	r3, [pc, #464]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <HAL_UART_MspInit+0x298>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800100e:	4870      	ldr	r0, [pc, #448]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8001010:	f000 fb52 	bl	80016b8 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800101a:	f7ff fef9 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a6b      	ldr	r2, [pc, #428]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8001022:	67da      	str	r2, [r3, #124]	; 0x7c
 8001024:	4a6a      	ldr	r2, [pc, #424]	; (80011d0 <HAL_UART_MspInit+0x298>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800102a:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 800102c:	4a6b      	ldr	r2, [pc, #428]	; (80011dc <HAL_UART_MspInit+0x2a4>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001030:	4b69      	ldr	r3, [pc, #420]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001032:	2222      	movs	r2, #34	; 0x22
 8001034:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001054:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001056:	2220      	movs	r2, #32
 8001058:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001060:	485d      	ldr	r0, [pc, #372]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001062:	f000 fb29 	bl	80016b8 <HAL_DMA_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800106c:	f7ff fed0 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a59      	ldr	r2, [pc, #356]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001078:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_UART_MspInit+0x2a0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	205b      	movs	r0, #91	; 0x5b
 8001084:	f000 fae3 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001088:	205b      	movs	r0, #91	; 0x5b
 800108a:	f000 fafa 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800108e:	e096      	b.n	80011be <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a52      	ldr	r2, [pc, #328]	; (80011e0 <HAL_UART_MspInit+0x2a8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	f040 8091 	bne.w	80011be <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fc31 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80010b4:	f7ff feac 	bl	8000e10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	4a43      	ldr	r2, [pc, #268]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6613      	str	r3, [r2, #96]	; 0x60
 80010c4:	4b41      	ldr	r3, [pc, #260]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	4a3d      	ldr	r2, [pc, #244]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_UART_MspInit+0x294>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010e8:	2330      	movs	r3, #48	; 0x30
 80010ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f8:	2307      	movs	r3, #7
 80010fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001100:	4619      	mov	r1, r3
 8001102:	4838      	ldr	r0, [pc, #224]	; (80011e4 <HAL_UART_MspInit+0x2ac>)
 8001104:	f000 fe18 	bl	8001d38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001108:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 800110a:	4a38      	ldr	r2, [pc, #224]	; (80011ec <HAL_UART_MspInit+0x2b4>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001110:	2218      	movs	r2, #24
 8001112:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001134:	2220      	movs	r2, #32
 8001136:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800113e:	482a      	ldr	r0, [pc, #168]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001140:	f000 faba 	bl	80016b8 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x216>
      Error_Handler();
 800114a:	f7ff fe61 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <HAL_UART_MspInit+0x2b0>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 800115e:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_UART_MspInit+0x2bc>)
 8001160:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001164:	2219      	movs	r2, #25
 8001166:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 800116a:	2210      	movs	r2, #16
 800116c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 8001194:	f000 fa90 	bl	80016b8 <HAL_DMA_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800119e:	f7ff fe37 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 80011a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0x2b8>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2025      	movs	r0, #37	; 0x25
 80011b4:	f000 fa4b 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b8:	2025      	movs	r0, #37	; 0x25
 80011ba:	f000 fa62 	bl	8001682 <HAL_NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3780      	adds	r7, #128	; 0x80
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40008000 	.word	0x40008000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	20000480 	.word	0x20000480
 80011d4:	40020008 	.word	0x40020008
 80011d8:	200004e0 	.word	0x200004e0
 80011dc:	4002001c 	.word	0x4002001c
 80011e0:	40013800 	.word	0x40013800
 80011e4:	48000800 	.word	0x48000800
 80011e8:	20000540 	.word	0x20000540
 80011ec:	40020030 	.word	0x40020030
 80011f0:	200005a0 	.word	0x200005a0
 80011f4:	40020044 	.word	0x40020044

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8e8 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA1_Channel1_IRQHandler+0x10>)
 8001252:	f000 fc14 	bl	8001a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000480 	.word	0x20000480

08001260 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA1_Channel2_IRQHandler+0x10>)
 8001266:	f000 fc0a 	bl	8001a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200004e0 	.word	0x200004e0

08001274 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA1_Channel3_IRQHandler+0x10>)
 800127a:	f000 fc00 	bl	8001a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000540 	.word	0x20000540

08001288 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA1_Channel4_IRQHandler+0x10>)
 800128e:	f000 fbf6 	bl	8001a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200005a0 	.word	0x200005a0

0800129c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <I2C1_EV_IRQHandler+0x10>)
 80012a2:	f001 f8cb 	bl	800243c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000304 	.word	0x20000304

080012b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <I2C1_ER_IRQHandler+0x10>)
 80012b6:	f001 f8db 	bl	8002470 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000304 	.word	0x20000304

080012c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART1_IRQHandler+0x10>)
 80012ca:	f003 fe99 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200003ec 	.word	0x200003ec

080012d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012e0:	f000 fede 	bl	80020a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <LPUART1_IRQHandler+0x10>)
 80012ee:	f003 fe87 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000358 	.word	0x20000358

080012fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001324:	f7ff ffea 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f005 fa11 	bl	8006774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001352:	f7ff f8e7 	bl	8000524 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8001364:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8001368:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800136c:	20000624 	.word	0x20000624

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>

08001372 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f95b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f80e 	bl	80013a4 <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	e001      	b.n	8001398 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001394:	f7ff fd42 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001398:	79fb      	ldrb	r3, [r7, #7]

}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_InitTick+0x68>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_InitTick+0x6c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_InitTick+0x68>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f966 	bl	800169e <HAL_SYSTICK_Config>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10f      	bne.n	80013f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d809      	bhi.n	80013f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	f04f 30ff 	mov.w	r0, #4294967295
 80013e6:	f000 f932 	bl	800164e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_InitTick+0x70>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e007      	b.n	8001402 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e004      	b.n	8001402 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002e4 	.word	0x200002e4
 8001410:	200002dc 	.word	0x200002dc
 8001414:	200002e0 	.word	0x200002e0

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x1c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x20>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4413      	add	r3, r2
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_IncTick+0x1c>)
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000620 	.word	0x20000620
 8001438:	200002e4 	.word	0x200002e4

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000620 	.word	0x20000620

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d004      	beq.n	8001478 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_Delay+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001478:	bf00      	nop
 800147a:	f7ff ffdf 	bl	800143c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	429a      	cmp	r2, r3
 8001488:	d8f7      	bhi.n	800147a <HAL_Delay+0x26>
  {
  }
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002e4 	.word	0x200002e4

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff40 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff33 	bl	80014fc <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa4 	bl	80015f4 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e08d      	b.n	80017e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_DMA_Init+0x138>)
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d80f      	bhi.n	80016f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_DMA_Init+0x13c>)
 80016de:	4413      	add	r3, r2
 80016e0:	4a45      	ldr	r2, [pc, #276]	; (80017f8 <HAL_DMA_Init+0x140>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	009a      	lsls	r2, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a42      	ldr	r2, [pc, #264]	; (80017fc <HAL_DMA_Init+0x144>)
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
 80016f4:	e00e      	b.n	8001714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_DMA_Init+0x148>)
 80016fe:	4413      	add	r3, r2
 8001700:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_DMA_Init+0x140>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	009a      	lsls	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <HAL_DMA_Init+0x14c>)
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800172a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fa84 	bl	8001c74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001774:	d102      	bne.n	800177c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001790:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_DMA_Init+0x104>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d80c      	bhi.n	80017bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 faa4 	bl	8001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	e008      	b.n	80017ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40020407 	.word	0x40020407
 80017f4:	bffdfff8 	.word	0xbffdfff8
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	40020000 	.word	0x40020000
 8001800:	bffdfbf8 	.word	0xbffdfbf8
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Start_IT+0x20>
 8001824:	2302      	movs	r3, #2
 8001826:	e066      	b.n	80018f6 <HAL_DMA_Start_IT+0xee>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d155      	bne.n	80018e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f9c9 	bl	8001bf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 020e 	orr.w	r2, r2, #14
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00f      	b.n	80018a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 020a 	orr.w	r2, r2, #10
 800189e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e005      	b.n	80018f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d005      	beq.n	8001922 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2204      	movs	r2, #4
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e037      	b.n	8001992 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 020e 	bic.w	r2, r2, #14
 8001930:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f003 021f 	and.w	r2, r3, #31
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800196e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001986:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001990:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00d      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2204      	movs	r2, #4
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e047      	b.n	8001a74 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 020e 	bic.w	r2, r2, #14
 80019f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00c      	beq.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
    }
  }
  return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d026      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x7a>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d021      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0204 	bic.w	r2, r2, #4
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 021f 	and.w	r2, r3, #31
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2104      	movs	r1, #4
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d071      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001af6:	e06c      	b.n	8001bd2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2202      	movs	r2, #2
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02e      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d029      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 020a 	bic.w	r2, r2, #10
 8001b32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2102      	movs	r1, #2
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d038      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b68:	e033      	b.n	8001bd2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2208      	movs	r2, #8
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02a      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d025      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
}
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bea:	b2db      	uxtb	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f202 	lsl.w	r2, r1, r2
 8001c34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d108      	bne.n	8001c58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c56:	e007      	b.n	8001c68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d802      	bhi.n	8001c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e001      	b.n	8001c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3b08      	subs	r3, #8
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	009a      	lsls	r2, r3, #2
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40020407 	.word	0x40020407
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020820 	.word	0x40020820
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	40020880 	.word	0x40020880

08001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	1000823f 	.word	0x1000823f
 8001d34:	40020940 	.word	0x40020940

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d46:	e15a      	b.n	8001ffe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 814c 	beq.w	8001ff8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d005      	beq.n	8001d78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d130      	bne.n	8001dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	2201      	movs	r2, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0201 	and.w	r2, r3, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d017      	beq.n	8001e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d123      	bne.n	8001e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0203 	and.w	r2, r3, #3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80a6 	beq.w	8001ff8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eac:	4b5b      	ldr	r3, [pc, #364]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	4a5a      	ldr	r2, [pc, #360]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eee:	d01f      	beq.n	8001f30 <HAL_GPIO_Init+0x1f8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_GPIO_Init+0x2ec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d019      	beq.n	8001f2c <HAL_GPIO_Init+0x1f4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_GPIO_Init+0x1f0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_GPIO_Init+0x2f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_Init+0x1e4>
 8001f18:	2305      	movs	r3, #5
 8001f1a:	e00a      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	e008      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f30:	2300      	movs	r3, #0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f74:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f ae9d 	bne.w	8001d48 <HAL_GPIO_Init+0x10>
  }
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	48000c00 	.word	0x48000c00
 8002030:	48001000 	.word	0x48001000
 8002034:	48001400 	.word	0x48001400
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002058:	e002      	b.n	8002060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43d9      	mvns	r1, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f806 	bl	80020d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e08d      	b.n	8002214 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe fea9 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002146:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	e006      	b.n	800216e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800216c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d108      	bne.n	8002188 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	e007      	b.n	8002198 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002196:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69d9      	ldr	r1, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	817b      	strh	r3, [r7, #10]
 800222e:	460b      	mov	r3, r1
 8002230:	813b      	strh	r3, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b20      	cmp	r3, #32
 8002240:	d16a      	bne.n	8002318 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_I2C_Mem_Write_IT+0x32>
 8002248:	8bbb      	ldrh	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e05f      	b.n	800231a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d101      	bne.n	800226e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e055      	b.n	800231a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2C_Mem_Write_IT+0x60>
 8002278:	2302      	movs	r3, #2
 800227a:	e04e      	b.n	800231a <HAL_I2C_Mem_Write_IT+0xfe>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2221      	movs	r2, #33	; 0x21
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8bba      	ldrh	r2, [r7, #28]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_I2C_Mem_Write_IT+0x108>)
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_I2C_Mem_Write_IT+0x10c>)
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80022b8:	897a      	ldrh	r2, [r7, #10]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d109      	bne.n	80022d8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022c4:	893b      	ldrh	r3, [r7, #8]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50
 80022d6:	e00b      	b.n	80022f0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022d8:	893b      	ldrh	r3, [r7, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80022e6:	893b      	ldrh	r3, [r7, #8]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_I2C_Mem_Write_IT+0x110>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f001 fb78 	bl	80039f4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800230c:	2101      	movs	r1, #1
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f001 fba2 	bl	8003a58 <I2C_Enable_IRQ>

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	ffff0000 	.word	0xffff0000
 8002328:	080025f9 	.word	0x080025f9
 800232c:	80002000 	.word	0x80002000

08002330 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d166      	bne.n	8002424 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_I2C_Mem_Read_IT+0x32>
 800235c:	8bbb      	ldrh	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e05b      	b.n	8002426 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	e051      	b.n	8002426 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2C_Mem_Read_IT+0x60>
 800238c:	2302      	movs	r3, #2
 800238e:	e04a      	b.n	8002426 <HAL_I2C_Mem_Read_IT+0xf6>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2222      	movs	r2, #34	; 0x22
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8bba      	ldrh	r2, [r7, #28]
 80023b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_I2C_Mem_Read_IT+0x100>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_I2C_Mem_Read_IT+0x104>)
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80023c6:	897a      	ldrh	r2, [r7, #10]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d109      	bne.n	80023e6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d2:	893b      	ldrh	r3, [r7, #8]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f04f 32ff 	mov.w	r2, #4294967295
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
 80023e4:	e00b      	b.n	80023fe <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023e6:	893b      	ldrh	r3, [r7, #8]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80023f4:	893b      	ldrh	r3, [r7, #8]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_I2C_Mem_Read_IT+0x108>)
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f001 faf2 	bl	80039f4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002418:	2101      	movs	r1, #1
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f001 fb1c 	bl	8003a58 <I2C_Enable_IRQ>

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	ffff0000 	.word	0xffff0000
 8002434:	080025f9 	.word	0x080025f9
 8002438:	80002000 	.word	0x80002000

0800243c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
  }
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00f      	beq.n	80024b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f043 0208 	orr.w	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002504:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 030b 	and.w	r3, r3, #11
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 f911 	bl	8003740 <I2C_ITError>
  }
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
 8002582:	4613      	mov	r3, r2
 8002584:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002604:	4b8d      	ldr	r3, [pc, #564]	; (800283c <I2C_Mem_ISR_IT+0x244>)
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <I2C_Mem_ISR_IT+0x22>
 8002616:	2302      	movs	r3, #2
 8002618:	e10c      	b.n	8002834 <I2C_Mem_ISR_IT+0x23c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2210      	movs	r2, #16
 800263c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f001 f98f 	bl	800396e <I2C_Flush_TXDR>
 8002650:	e0dd      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d022      	beq.n	80026a2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01d      	beq.n	80026a2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a0:	e0b5      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02c      	beq.n	8002706 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d027      	beq.n	8002706 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d118      	bne.n	80026f2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80026f0:	e08d      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002702:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002704:	e083      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03c      	beq.n	800278a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002716:	2b00      	cmp	r3, #0
 8002718:	d037      	beq.n	800278a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02c      	beq.n	800277e <I2C_Mem_ISR_IT+0x186>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d128      	bne.n	800277e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d910      	bls.n	8002758 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22ff      	movs	r2, #255	; 0xff
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	b299      	uxth	r1, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f001 f94f 	bl	80039f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002756:	e017      	b.n	8002788 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	b299      	uxth	r1, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f001 f93c 	bl	80039f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800277c:	e004      	b.n	8002788 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 ffdd 	bl	8003740 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002786:	e042      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
 8002788:	e041      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03c      	beq.n	800280e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800279a:	2b00      	cmp	r3, #0
 800279c:	d037      	beq.n	800280e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800279e:	2101      	movs	r1, #1
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f001 f9dd 	bl	8003b60 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027a6:	2102      	movs	r1, #2
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f001 f955 	bl	8003a58 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b22      	cmp	r3, #34	; 0x22
 80027b8:	d101      	bne.n	80027be <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <I2C_Mem_ISR_IT+0x248>)
 80027bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2bff      	cmp	r3, #255	; 0xff
 80027c6:	d910      	bls.n	80027ea <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	b299      	uxth	r1, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f001 f906 	bl	80039f4 <I2C_TransferConfig>
 80027e8:	e011      	b.n	800280e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	b299      	uxth	r1, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f001 f8f3 	bl	80039f4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002822:	6939      	ldr	r1, [r7, #16]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fd0b 	bl	8003240 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	80002000 	.word	0x80002000
 8002840:	80002400 	.word	0x80002400

08002844 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <I2C_Slave_ISR_IT+0x24>
 8002864:	2302      	movs	r3, #2
 8002866:	e0e2      	b.n	8002a2e <I2C_Slave_ISR_IT+0x1ea>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fda2 	bl	80033d0 <I2C_ITSlaveCplt>
 800288c:	e0ca      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d04b      	beq.n	8002930 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d046      	beq.n	8002930 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d128      	bne.n	80028fe <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b28      	cmp	r3, #40	; 0x28
 80028b6:	d108      	bne.n	80028ca <I2C_Slave_ISR_IT+0x86>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028be:	d104      	bne.n	80028ca <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fee8 	bl	8003698 <I2C_ITListenCplt>
 80028c8:	e031      	b.n	800292e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b29      	cmp	r3, #41	; 0x29
 80028d4:	d10e      	bne.n	80028f4 <I2C_Slave_ISR_IT+0xb0>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d00a      	beq.n	80028f4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f001 f841 	bl	800396e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fc4b 	bl	8003188 <I2C_ITSlaveSeqCplt>
 80028f2:	e01c      	b.n	800292e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80028fc:	e08f      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <I2C_Slave_ISR_IT+0xdc>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291e:	d17e      	bne.n	8002a1e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	4619      	mov	r1, r3
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 ff0a 	bl	8003740 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800292c:	e077      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1da>
 800292e:	e076      	b.n	8002a1e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02f      	beq.n	800299a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02a      	beq.n	800299a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14b      	bne.n	8002a22 <I2C_Slave_ISR_IT+0x1de>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002990:	d047      	beq.n	8002a22 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fbf8 	bl	8003188 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002998:	e043      	b.n	8002a22 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fb28 	bl	8003006 <I2C_ITAddrCplt>
 80029b6:	e035      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d030      	beq.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02b      	beq.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d018      	beq.n	8002a08 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a06:	e00d      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0e:	d002      	beq.n	8002a16 <I2C_Slave_ISR_IT+0x1d2>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fbb6 	bl	8003188 <I2C_ITSlaveSeqCplt>
 8002a1c:	e002      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002a22:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af02      	add	r7, sp, #8
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <I2C_Master_ISR_DMA+0x1a>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0d9      	b.n	8002c04 <I2C_Master_ISR_DMA+0x1ce>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d011      	beq.n	8002a90 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2210      	movs	r2, #16
 8002a72:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a80:	2120      	movs	r1, #32
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 ffe8 	bl	8003a58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 ff70 	bl	800396e <I2C_Flush_TXDR>
 8002a8e:	e0b4      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d071      	beq.n	8002b7e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d06c      	beq.n	8002b7e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d04e      	beq.n	8002b5c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aca:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d906      	bls.n	8002ae4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	22ff      	movs	r2, #255	; 0xff
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e010      	b.n	8002b06 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af6:	d003      	beq.n	8002b00 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e002      	b.n	8002b06 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b04:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8a79      	ldrh	r1, [r7, #18]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 ff6d 	bl	80039f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b22      	cmp	r3, #34	; 0x22
 8002b36:	d108      	bne.n	8002b4a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b48:	e057      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b5a:	e04e      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6a:	d003      	beq.n	8002b74 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 face 	bl	800310e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002b72:	e042      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fde2 	bl	8003740 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002b7c:	e03d      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d028      	beq.n	8002bda <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d023      	beq.n	8002bda <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d119      	bne.n	8002bd0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002baa:	d025      	beq.n	8002bf8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002bc6:	e017      	b.n	8002bf8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 faa0 	bl	800310e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002bce:	e013      	b.n	8002bf8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fdb4 	bl	8003740 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bd8:	e00e      	b.n	8002bf8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fb25 	bl	8003240 <I2C_ITMasterCplt>
 8002bf6:	e000      	b.n	8002bfa <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002bf8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002c18:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <I2C_Mem_ISR_DMA+0x244>)
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <I2C_Mem_ISR_DMA+0x1e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e10e      	b.n	8002e48 <I2C_Mem_ISR_DMA+0x23c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d011      	beq.n	8002c6a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fefb 	bl	8003a58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fe83 	bl	800396e <I2C_Flush_TXDR>
 8002c68:	e0e9      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8002c90:	e0d5      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05f      	beq.n	8002d5c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d05a      	beq.n	8002d5c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 ff59 	bl	8003b60 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002cae:	2110      	movs	r1, #16
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fed1 	bl	8003a58 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d048      	beq.n	8002d52 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d910      	bls.n	8002cec <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	b299      	uxth	r1, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fe85 	bl	80039f4 <I2C_TransferConfig>
 8002cea:	e011      	b.n	8002d10 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fe72 	bl	80039f4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b22      	cmp	r3, #34	; 0x22
 8002d2c:	d108      	bne.n	8002d40 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d3e:	e07e      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d50:	e075      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fcf3 	bl	8003740 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002d5a:	e070      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d05d      	beq.n	8002e22 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d058      	beq.n	8002e22 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d70:	2101      	movs	r1, #1
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fef4 	bl	8003b60 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002d78:	2110      	movs	r1, #16
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fe6c 	bl	8003a58 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b22      	cmp	r3, #34	; 0x22
 8002d8a:	d101      	bne.n	8002d90 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <I2C_Mem_ISR_DMA+0x248>)
 8002d8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d910      	bls.n	8002dbc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	b299      	uxth	r1, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fe1d 	bl	80039f4 <I2C_TransferConfig>
 8002dba:	e011      	b.n	8002de0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	b299      	uxth	r1, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fe0a 	bl	80039f4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b22      	cmp	r3, #34	; 0x22
 8002dfc:	d108      	bne.n	8002e10 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e0e:	e016      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e20:	e00d      	b.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fa01 	bl	8003240 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	80002000 	.word	0x80002000
 8002e54:	80002400 	.word	0x80002400

08002e58 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <I2C_Slave_ISR_DMA+0x24>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0c0      	b.n	8002ffe <I2C_Slave_ISR_DMA+0x1a6>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fa98 	bl	80033d0 <I2C_ITSlaveCplt>
 8002ea0:	e0a8      	b.n	8002ff4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8095 	beq.w	8002fd8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 808f 	beq.w	8002fd8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d07d      	beq.n	8002fca <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00c      	beq.n	8002f12 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d128      	bne.n	8002f6a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b28      	cmp	r3, #40	; 0x28
 8002f22:	d108      	bne.n	8002f36 <I2C_Slave_ISR_DMA+0xde>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2a:	d104      	bne.n	8002f36 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fbb2 	bl	8003698 <I2C_ITListenCplt>
 8002f34:	e048      	b.n	8002fc8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b29      	cmp	r3, #41	; 0x29
 8002f40:	d10e      	bne.n	8002f60 <I2C_Slave_ISR_DMA+0x108>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f48:	d00a      	beq.n	8002f60 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fd0b 	bl	800396e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f915 	bl	8003188 <I2C_ITSlaveSeqCplt>
 8002f5e:	e033      	b.n	8002fc8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002f68:	e034      	b.n	8002fd4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2210      	movs	r2, #16
 8002f70:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f84:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <I2C_Slave_ISR_DMA+0x13c>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f92:	d11f      	bne.n	8002fd4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b21      	cmp	r3, #33	; 0x21
 8002f98:	d002      	beq.n	8002fa0 <I2C_Slave_ISR_DMA+0x148>
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b29      	cmp	r3, #41	; 0x29
 8002f9e:	d103      	bne.n	8002fa8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2221      	movs	r2, #33	; 0x21
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	e008      	b.n	8002fba <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b22      	cmp	r3, #34	; 0x22
 8002fac:	d002      	beq.n	8002fb4 <I2C_Slave_ISR_DMA+0x15c>
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb2:	d102      	bne.n	8002fba <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2222      	movs	r2, #34	; 0x22
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fbbd 	bl	8003740 <I2C_ITError>
      if (treatdmanack == 1U)
 8002fc6:	e005      	b.n	8002fd4 <I2C_Slave_ISR_DMA+0x17c>
 8002fc8:	e004      	b.n	8002fd4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fd2:	e00f      	b.n	8002ff4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002fd4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fd6:	e00d      	b.n	8002ff4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f809 	bl	8003006 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800301c:	2b28      	cmp	r3, #40	; 0x28
 800301e:	d16a      	bne.n	80030f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	b29b      	uxth	r3, r3
 800303a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800303e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800305a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d138      	bne.n	80030d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	09db      	lsrs	r3, r3, #7
 8003068:	b29a      	uxth	r2, r3
 800306a:	89bb      	ldrh	r3, [r7, #12]
 800306c:	4053      	eors	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	f003 0306 	and.w	r3, r3, #6
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11c      	bne.n	80030b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b02      	cmp	r3, #2
 800308c:	d13b      	bne.n	8003106 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2208      	movs	r2, #8
 800309a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030a4:	89ba      	ldrh	r2, [r7, #12]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fa63 	bl	8002576 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030b0:	e029      	b.n	8003106 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030b2:	893b      	ldrh	r3, [r7, #8]
 80030b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fd50 	bl	8003b60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030c8:	89ba      	ldrh	r2, [r7, #12]
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	4619      	mov	r1, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fa51 	bl	8002576 <HAL_I2C_AddrCallback>
}
 80030d4:	e017      	b.n	8003106 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fd40 	bl	8003b60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030e8:	89ba      	ldrh	r2, [r7, #12]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fa41 	bl	8002576 <HAL_I2C_AddrCallback>
}
 80030f4:	e007      	b.n	8003106 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2208      	movs	r2, #8
 80030fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b21      	cmp	r3, #33	; 0x21
 8003128:	d115      	bne.n	8003156 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2211      	movs	r2, #17
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800313e:	2101      	movs	r1, #1
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fd0d 	bl	8003b60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff f9e9 	bl	8002526 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003154:	e014      	b.n	8003180 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2212      	movs	r2, #18
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800316a:	2102      	movs	r1, #2
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fcf7 	bl	8003b60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f9dd 	bl	800253a <HAL_I2C_MasterRxCpltCallback>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e00c      	b.n	80031d6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b29      	cmp	r3, #41	; 0x29
 80031e0:	d112      	bne.n	8003208 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2228      	movs	r2, #40	; 0x28
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2221      	movs	r2, #33	; 0x21
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031f0:	2101      	movs	r1, #1
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fcb4 	bl	8003b60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff f9a4 	bl	800254e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003206:	e017      	b.n	8003238 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b2a      	cmp	r3, #42	; 0x2a
 8003212:	d111      	bne.n	8003238 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2228      	movs	r2, #40	; 0x28
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2222      	movs	r2, #34	; 0x22
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003222:	2102      	movs	r1, #2
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fc9b 	bl	8003b60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff f995 	bl	8002562 <HAL_I2C_SlaveRxCpltCallback>
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2220      	movs	r2, #32
 8003254:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b21      	cmp	r3, #33	; 0x21
 8003260:	d107      	bne.n	8003272 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003262:	2101      	movs	r1, #1
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fc7b 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2211      	movs	r2, #17
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
 8003270:	e00c      	b.n	800328c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b22      	cmp	r3, #34	; 0x22
 800327c:	d106      	bne.n	800328c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800327e:	2102      	movs	r1, #2
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fc6d 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2212      	movs	r2, #18
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <I2C_ITMasterCplt+0x188>)
 8003298:	400b      	ands	r3, r1
 800329a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	; (80033cc <I2C_ITMasterCplt+0x18c>)
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2210      	movs	r2, #16
 80032b8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b60      	cmp	r3, #96	; 0x60
 80032d0:	d10a      	bne.n	80032e8 <I2C_ITMasterCplt+0xa8>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80032e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fb40 	bl	800396e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d002      	beq.n	8003306 <I2C_ITMasterCplt+0xc6>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	4619      	mov	r1, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa17 	bl	8003740 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003312:	e054      	b.n	80033be <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b21      	cmp	r3, #33	; 0x21
 800331e:	d124      	bne.n	800336a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b40      	cmp	r3, #64	; 0x40
 8003338:	d10b      	bne.n	8003352 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff f92b 	bl	80025a6 <HAL_I2C_MemTxCpltCallback>
}
 8003350:	e035      	b.n	80033be <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff f8df 	bl	8002526 <HAL_I2C_MasterTxCpltCallback>
}
 8003368:	e029      	b.n	80033be <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b22      	cmp	r3, #34	; 0x22
 8003374:	d123      	bne.n	80033be <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d10b      	bne.n	80033a8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff f90a 	bl	80025ba <HAL_I2C_MemRxCpltCallback>
}
 80033a6:	e00a      	b.n	80033be <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff f8be 	bl	800253a <HAL_I2C_MasterRxCpltCallback>
}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	fe00e800 	.word	0xfe00e800
 80033cc:	ffff0000 	.word	0xffff0000

080033d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2220      	movs	r2, #32
 80033fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	2b21      	cmp	r3, #33	; 0x21
 8003400:	d002      	beq.n	8003408 <I2C_ITSlaveCplt+0x38>
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b29      	cmp	r3, #41	; 0x29
 8003406:	d108      	bne.n	800341a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003408:	f248 0101 	movw	r1, #32769	; 0x8001
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fba7 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	e019      	b.n	800344e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	2b22      	cmp	r3, #34	; 0x22
 800341e:	d002      	beq.n	8003426 <I2C_ITSlaveCplt+0x56>
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	2b2a      	cmp	r3, #42	; 0x2a
 8003424:	d108      	bne.n	8003438 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003426:	f248 0102 	movw	r1, #32770	; 0x8002
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb98 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2222      	movs	r2, #34	; 0x22
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
 8003436:	e00a      	b.n	800344e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003438:	7afb      	ldrb	r3, [r7, #11]
 800343a:	2b28      	cmp	r3, #40	; 0x28
 800343c:	d107      	bne.n	800344e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800343e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb8c 	bl	8003b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b89      	ldr	r3, [pc, #548]	; (8003690 <I2C_ITSlaveCplt+0x2c0>)
 800346a:	400b      	ands	r3, r1
 800346c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa7d 	bl	800396e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d013      	beq.n	80034a6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800348c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01f      	beq.n	80034d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a4:	e017      	b.n	80034d6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d049      	beq.n	80035d6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003548:	2b00      	cmp	r3, #0
 800354a:	d044      	beq.n	80035d6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d128      	bne.n	80035a8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b28      	cmp	r3, #40	; 0x28
 8003560:	d108      	bne.n	8003574 <I2C_ITSlaveCplt+0x1a4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003568:	d104      	bne.n	8003574 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800356a:	6979      	ldr	r1, [r7, #20]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f893 	bl	8003698 <I2C_ITListenCplt>
 8003572:	e030      	b.n	80035d6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b29      	cmp	r3, #41	; 0x29
 800357e:	d10e      	bne.n	800359e <I2C_ITSlaveCplt+0x1ce>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003586:	d00a      	beq.n	800359e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9ec 	bl	800396e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fdf6 	bl	8003188 <I2C_ITSlaveSeqCplt>
 800359c:	e01b      	b.n	80035d6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	61da      	str	r2, [r3, #28]
 80035a6:	e016      	b.n	80035d6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <I2C_ITSlaveCplt+0x1fa>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d105      	bne.n	80035d6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8b5 	bl	8003740 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8a4 	bl	8003740 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b28      	cmp	r3, #40	; 0x28
 8003602:	d141      	bne.n	8003688 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003604:	6979      	ldr	r1, [r7, #20]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f846 	bl	8003698 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800360c:	e03c      	b.n	8003688 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003616:	d014      	beq.n	8003642 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fdb5 	bl	8003188 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <I2C_ITSlaveCplt+0x2c4>)
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe ffa9 	bl	8002592 <HAL_I2C_ListenCpltCallback>
}
 8003640:	e022      	b.n	8003688 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b22      	cmp	r3, #34	; 0x22
 800364c:	d10e      	bne.n	800366c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fe ff7c 	bl	8002562 <HAL_I2C_SlaveRxCpltCallback>
}
 800366a:	e00d      	b.n	8003688 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe ff63 	bl	800254e <HAL_I2C_SlaveTxCpltCallback>
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	fe00e800 	.word	0xfe00e800
 8003694:	ffff0000 	.word	0xffff0000

08003698 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <I2C_ITListenCplt+0xa4>)
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d022      	beq.n	8003714 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003714:	f248 0103 	movw	r1, #32771	; 0x8003
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa21 	bl	8003b60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2210      	movs	r2, #16
 8003724:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe ff2f 	bl	8002592 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffff0000 	.word	0xffff0000

08003740 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a6d      	ldr	r2, [pc, #436]	; (8003914 <I2C_ITError+0x1d4>)
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b28      	cmp	r3, #40	; 0x28
 8003776:	d005      	beq.n	8003784 <I2C_ITError+0x44>
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b29      	cmp	r3, #41	; 0x29
 800377c:	d002      	beq.n	8003784 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d10b      	bne.n	800379c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003784:	2103      	movs	r1, #3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9ea 	bl	8003b60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2228      	movs	r2, #40	; 0x28
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a60      	ldr	r2, [pc, #384]	; (8003918 <I2C_ITError+0x1d8>)
 8003798:	635a      	str	r2, [r3, #52]	; 0x34
 800379a:	e030      	b.n	80037fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800379c:	f248 0103 	movw	r1, #32771	; 0x8003
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f9dd 	bl	8003b60 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8e1 	bl	800396e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b60      	cmp	r3, #96	; 0x60
 80037b6:	d01f      	beq.n	80037f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d114      	bne.n	80037f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d109      	bne.n	80037f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2210      	movs	r2, #16
 80037e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2220      	movs	r2, #32
 80037f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d039      	beq.n	8003880 <I2C_ITError+0x140>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b11      	cmp	r3, #17
 8003810:	d002      	beq.n	8003818 <I2C_ITError+0xd8>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b21      	cmp	r3, #33	; 0x21
 8003816:	d133      	bne.n	8003880 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003826:	d107      	bne.n	8003838 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe f9cd 	bl	8001bdc <HAL_DMA_GetState>
 8003842:	4603      	mov	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	d017      	beq.n	8003878 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	4a33      	ldr	r2, [pc, #204]	; (800391c <I2C_ITError+0x1dc>)
 800384e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe f8a7 	bl	80019b0 <HAL_DMA_Abort_IT>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d04d      	beq.n	8003904 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003872:	4610      	mov	r0, r2
 8003874:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003876:	e045      	b.n	8003904 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f851 	bl	8003920 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800387e:	e041      	b.n	8003904 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d039      	beq.n	80038fc <I2C_ITError+0x1bc>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b12      	cmp	r3, #18
 800388c:	d002      	beq.n	8003894 <I2C_ITError+0x154>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b22      	cmp	r3, #34	; 0x22
 8003892:	d133      	bne.n	80038fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a2:	d107      	bne.n	80038b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe f98f 	bl	8001bdc <HAL_DMA_GetState>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d017      	beq.n	80038f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <I2C_ITError+0x1dc>)
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f869 	bl	80019b0 <HAL_DMA_Abort_IT>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d011      	beq.n	8003908 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038ee:	4610      	mov	r0, r2
 80038f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038f2:	e009      	b.n	8003908 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f813 	bl	8003920 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038fa:	e005      	b.n	8003908 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f80f 	bl	8003920 <I2C_TreatErrorCallback>
  }
}
 8003902:	e002      	b.n	800390a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003908:	bf00      	nop
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	ffff0000 	.word	0xffff0000
 8003918:	08002845 	.word	0x08002845
 800391c:	080039b7 	.word	0x080039b7

08003920 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b60      	cmp	r3, #96	; 0x60
 8003932:	d10e      	bne.n	8003952 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fe49 	bl	80025e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003950:	e009      	b.n	8003966 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fe fe34 	bl	80025ce <HAL_I2C_ErrorCallback>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d103      	bne.n	800398c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d007      	beq.n	80039aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	619a      	str	r2, [r3, #24]
  }
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2200      	movs	r2, #0
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	2200      	movs	r2, #0
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff ff9b 	bl	8003920 <I2C_TreatErrorCallback>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	4613      	mov	r3, r2
 8003a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a0c:	7a7b      	ldrb	r3, [r7, #9]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	0d5b      	lsrs	r3, r3, #21
 8003a2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <I2C_TransferConfig+0x60>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	43db      	mvns	r3, r3
 8003a38:	ea02 0103 	and.w	r1, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	03ff63ff 	.word	0x03ff63ff

08003a58 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <I2C_Enable_IRQ+0xfc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d032      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a76:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <I2C_Enable_IRQ+0x100>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02d      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a80:	4a36      	ldr	r2, [pc, #216]	; (8003b5c <I2C_Enable_IRQ+0x104>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d028      	beq.n	8003ad8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da03      	bge.n	8003a96 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003aa6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003ab8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d103      	bne.n	8003ac8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003ac6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d133      	bne.n	8003b36 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f043 0320 	orr.w	r3, r3, #32
 8003ad4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ad6:	e02e      	b.n	8003b36 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da03      	bge.n	8003ae8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ae6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003af8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003b0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d103      	bne.n	8003b1a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d103      	bne.n	8003b28 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d103      	bne.n	8003b36 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	08002a37 	.word	0x08002a37
 8003b58:	08002e59 	.word	0x08002e59
 8003b5c:	08002c0d 	.word	0x08002c0d

08003b60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00f      	beq.n	8003b9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b8e:	2b28      	cmp	r3, #40	; 0x28
 8003b90:	d003      	beq.n	8003b9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00f      	beq.n	8003bc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003baa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bb8:	2b28      	cmp	r3, #40	; 0x28
 8003bba:	d003      	beq.n	8003bc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da03      	bge.n	8003bd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d103      	bne.n	8003be2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d103      	bne.n	8003bf0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f043 0320 	orr.w	r3, r3, #32
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d103      	bne.n	8003bfe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d138      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e032      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d139      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e033      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	; 0x24
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d141      	bne.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d131      	bne.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d68:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	4a46      	ldr	r2, [pc, #280]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d80:	4a41      	ldr	r2, [pc, #260]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d88:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2232      	movs	r2, #50	; 0x32
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	0c9b      	lsrs	r3, r3, #18
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9e:	e002      	b.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da6:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d102      	bne.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f2      	bne.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d158      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e057      	b.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd2:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ddc:	e04d      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de4:	d141      	bne.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d131      	bne.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfa:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2232      	movs	r2, #50	; 0x32
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	0c9b      	lsrs	r3, r3, #18
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2a:	e002      	b.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d102      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f2      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d112      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e011      	b.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e68:	e007      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	200002dc 	.word	0x200002dc
 8003e90:	431bde83 	.word	0x431bde83

08003e94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea2:	6093      	str	r3, [r2, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e2fe      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d075      	beq.n	8003fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed2:	4b97      	ldr	r3, [pc, #604]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x3e>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x44>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	4b8d      	ldr	r3, [pc, #564]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d05b      	beq.n	8003fbc <HAL_RCC_OscConfig+0x108>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d157      	bne.n	8003fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e2d9      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x74>
 8003f1a:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a84      	ldr	r2, [pc, #528]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e01d      	b.n	8003f64 <HAL_RCC_OscConfig+0xb0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x98>
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7e      	ldr	r2, [pc, #504]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b7c      	ldr	r3, [pc, #496]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7b      	ldr	r2, [pc, #492]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	4b78      	ldr	r3, [pc, #480]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a77      	ldr	r2, [pc, #476]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a74      	ldr	r2, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fa66 	bl	800143c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd fa62 	bl	800143c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e29e      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f86:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0xc0>
 8003f92:	e014      	b.n	8003fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fa52 	bl	800143c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd fa4e 	bl	800143c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e28a      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fae:	4b60      	ldr	r3, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0xe8>
 8003fba:	e000      	b.n	8003fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d075      	beq.n	80040b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd4:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d102      	bne.n	8003fea <HAL_RCC_OscConfig+0x136>
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x13c>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11f      	bne.n	8004030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff0:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_OscConfig+0x154>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e25d      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	4946      	ldr	r1, [pc, #280]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fd f9bf 	bl	80013a4 <HAL_InitTick>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d043      	beq.n	80040b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e249      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a3c      	ldr	r2, [pc, #240]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd f9fa 	bl	800143c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fd f9f6 	bl	800143c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e232      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405e:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	492d      	ldr	r1, [pc, #180]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
 800407e:	e01a      	b.n	80040b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd f9d6 	bl	800143c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fd f9d2 	bl	800143c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e20e      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1e0>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d041      	beq.n	8004146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01c      	beq.n	8004104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fd f9af 	bl	800143c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fd f9ab 	bl	800143c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1e7      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ef      	beq.n	80040e2 <HAL_RCC_OscConfig+0x22e>
 8004102:	e020      	b.n	8004146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd f992 	bl	800143c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411a:	e00d      	b.n	8004138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411c:	f7fd f98e 	bl	800143c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d906      	bls.n	8004138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1ca      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	200002e0 	.word	0x200002e0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004138:	4b8c      	ldr	r3, [pc, #560]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ea      	bne.n	800411c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a6 	beq.w	80042a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004158:	4b84      	ldr	r3, [pc, #528]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_OscConfig+0x2b4>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x2b6>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4b7f      	ldr	r3, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	4a7e      	ldr	r2, [pc, #504]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6593      	str	r3, [r2, #88]	; 0x58
 800417a:	4b7c      	ldr	r3, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418a:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_RCC_OscConfig+0x4bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x4bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a75      	ldr	r2, [pc, #468]	; (8004370 <HAL_RCC_OscConfig+0x4bc>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f94b 	bl	800143c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd f947 	bl	800143c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e183      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x4bc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d108      	bne.n	80041e2 <HAL_RCC_OscConfig+0x32e>
 80041d0:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	4a65      	ldr	r2, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e0:	e024      	b.n	800422c <HAL_RCC_OscConfig+0x378>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d110      	bne.n	800420c <HAL_RCC_OscConfig+0x358>
 80041ea:	4b60      	ldr	r3, [pc, #384]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	4a5e      	ldr	r2, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	4a5a      	ldr	r2, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420a:	e00f      	b.n	800422c <HAL_RCC_OscConfig+0x378>
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	4a56      	ldr	r2, [pc, #344]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd f902 	bl	800143c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd f8fe 	bl	800143c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e138      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004252:	4b46      	ldr	r3, [pc, #280]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ed      	beq.n	800423c <HAL_RCC_OscConfig+0x388>
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fd f8eb 	bl	800143c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fd f8e7 	bl	800143c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	; 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e121      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004280:	4b3a      	ldr	r3, [pc, #232]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ed      	bne.n	800426a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	4a34      	ldr	r2, [pc, #208]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03c      	beq.n	8004326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01c      	beq.n	80042ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ba:	4a2c      	ldr	r2, [pc, #176]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fd f8ba 	bl	800143c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042cc:	f7fd f8b6 	bl	800143c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0f2      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80042e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ef      	beq.n	80042cc <HAL_RCC_OscConfig+0x418>
 80042ec:	e01b      	b.n	8004326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80042f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd f89d 	bl	800143c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004306:	f7fd f899 	bl	800143c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0d5      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800431a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1ef      	bne.n	8004306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80c9 	beq.w	80044c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b0c      	cmp	r3, #12
 800433a:	f000 8083 	beq.w	8004444 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d15e      	bne.n	8004404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x4b8>)
 800434c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd f873 	bl	800143c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	e00c      	b.n	8004374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435a:	f7fd f86f 	bl	800143c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d905      	bls.n	8004374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0ab      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ec      	bne.n	800435a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4b52      	ldr	r3, [pc, #328]	; (80044d0 <HAL_RCC_OscConfig+0x61c>)
 8004386:	4013      	ands	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6a11      	ldr	r1, [r2, #32]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004390:	3a01      	subs	r2, #1
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800439a:	0212      	lsls	r2, r2, #8
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043a2:	0852      	lsrs	r2, r2, #1
 80043a4:	3a01      	subs	r2, #1
 80043a6:	0552      	lsls	r2, r2, #21
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ae:	0852      	lsrs	r2, r2, #1
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0652      	lsls	r2, r2, #25
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043ba:	06d2      	lsls	r2, r2, #27
 80043bc:	430a      	orrs	r2, r1
 80043be:	4943      	ldr	r1, [pc, #268]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a40      	ldr	r2, [pc, #256]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a3d      	ldr	r2, [pc, #244]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd f82e 	bl	800143c <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd f82a 	bl	800143c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e066      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	4b35      	ldr	r3, [pc, #212]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x530>
 8004402:	e05e      	b.n	80044c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004404:	4b31      	ldr	r3, [pc, #196]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 800440a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd f814 	bl	800143c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd f810 	bl	800143c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e04c      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004436:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	4924      	ldr	r1, [pc, #144]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_RCC_OscConfig+0x620>)
 800443e:	4013      	ands	r3, r2
 8004440:	60cb      	str	r3, [r1, #12]
 8004442:	e03e      	b.n	80044c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e039      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004450:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <HAL_RCC_OscConfig+0x618>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	429a      	cmp	r2, r3
 8004462:	d12c      	bne.n	80044be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d123      	bne.n	80044be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11b      	bne.n	80044be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d113      	bne.n	80044be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d109      	bne.n	80044be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	019f800c 	.word	0x019f800c
 80044d4:	feeefffc 	.word	0xfeeefffc

080044d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e11e      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b91      	ldr	r3, [pc, #580]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d910      	bls.n	8004520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b8e      	ldr	r3, [pc, #568]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 020f 	bic.w	r2, r3, #15
 8004506:	498c      	ldr	r1, [pc, #560]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e106      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d073      	beq.n	8004614 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d129      	bne.n	8004588 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004534:	4b81      	ldr	r3, [pc, #516]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0f4      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004544:	f000 f99e 	bl	8004884 <RCC_GetSysClockFreqFromPLLSource>
 8004548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4a7c      	ldr	r2, [pc, #496]	; (8004740 <HAL_RCC_ClockConfig+0x268>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d93f      	bls.n	80045d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004552:	4b7a      	ldr	r3, [pc, #488]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004566:	2b00      	cmp	r3, #0
 8004568:	d033      	beq.n	80045d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d12f      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004572:	4b72      	ldr	r3, [pc, #456]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457a:	4a70      	ldr	r2, [pc, #448]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 800457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e024      	b.n	80045d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004590:	4b6a      	ldr	r3, [pc, #424]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0c6      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a0:	4b66      	ldr	r3, [pc, #408]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0be      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045b0:	f000 f8ce 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4a61      	ldr	r2, [pc, #388]	; (8004740 <HAL_RCC_ClockConfig+0x268>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d909      	bls.n	80045d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045be:	4b5f      	ldr	r3, [pc, #380]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	4a5d      	ldr	r2, [pc, #372]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b5a      	ldr	r3, [pc, #360]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4957      	ldr	r1, [pc, #348]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fc ff2a 	bl	800143c <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fc ff26 	bl	800143c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e095      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b4e      	ldr	r3, [pc, #312]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800462c:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a42      	ldr	r2, [pc, #264]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004636:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004644:	4b3d      	ldr	r3, [pc, #244]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800464c:	4a3b      	ldr	r2, [pc, #236]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 800464e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b39      	ldr	r3, [pc, #228]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4936      	ldr	r1, [pc, #216]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	e008      	b.n	800467a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d105      	bne.n	800467a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800466e:	4b33      	ldr	r3, [pc, #204]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a32      	ldr	r2, [pc, #200]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 8004674:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004678:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d21d      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 020f 	bic.w	r2, r3, #15
 8004690:	4929      	ldr	r1, [pc, #164]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004698:	f7fc fed0 	bl	800143c <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fc fecc 	bl	800143c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e03b      	b.n	800472e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1ed      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4917      	ldr	r1, [pc, #92]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490f      	ldr	r1, [pc, #60]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004702:	f000 f825 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	490c      	ldr	r1, [pc, #48]	; (8004744 <HAL_RCC_ClockConfig+0x26c>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x270>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x274>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc fe3c 	bl	80013a4 <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40022000 	.word	0x40022000
 800473c:	40021000 	.word	0x40021000
 8004740:	04c4b400 	.word	0x04c4b400
 8004744:	08006818 	.word	0x08006818
 8004748:	200002dc 	.word	0x200002dc
 800474c:	200002e0 	.word	0x200002e0

08004750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004756:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d102      	bne.n	8004768 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e047      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b08      	cmp	r3, #8
 8004772:	d102      	bne.n	800477a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004774:	4b26      	ldr	r3, [pc, #152]	; (8004810 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e03e      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d136      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004790:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	3301      	adds	r3, #1
 800479c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ae:	68d2      	ldr	r2, [r2, #12]
 80047b0:	0a12      	lsrs	r2, r2, #8
 80047b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	617b      	str	r3, [r7, #20]
      break;
 80047bc:	e00c      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	0a12      	lsrs	r2, r2, #8
 80047cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
      break;
 80047d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	0e5b      	lsrs	r3, r3, #25
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e001      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047f8:	693b      	ldr	r3, [r7, #16]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	00f42400 	.word	0x00f42400
 8004810:	016e3600 	.word	0x016e3600

08004814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200002dc 	.word	0x200002dc

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4904      	ldr	r1, [pc, #16]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	08006828 	.word	0x08006828

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800485c:	f7ff ffda 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0adb      	lsrs	r3, r3, #11
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4904      	ldr	r1, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	08006828 	.word	0x08006828

08004884 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d10c      	bne.n	80048c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b2:	68d2      	ldr	r2, [r2, #12]
 80048b4:	0a12      	lsrs	r2, r2, #8
 80048b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	617b      	str	r3, [r7, #20]
    break;
 80048c0:	e00c      	b.n	80048dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	0a12      	lsrs	r2, r2, #8
 80048d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    break;
 80048da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0e5b      	lsrs	r3, r3, #25
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	3301      	adds	r3, #1
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048f6:	687b      	ldr	r3, [r7, #4]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40021000 	.word	0x40021000
 8004908:	016e3600 	.word	0x016e3600
 800490c:	00f42400 	.word	0x00f42400

08004910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004918:	2300      	movs	r3, #0
 800491a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800491c:	2300      	movs	r3, #0
 800491e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8098 	beq.w	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10d      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4b40      	ldr	r3, [pc, #256]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	4a3f      	ldr	r2, [pc, #252]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6593      	str	r3, [r2, #88]	; 0x58
 800494a:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495a:	4b3a      	ldr	r3, [pc, #232]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a39      	ldr	r2, [pc, #228]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004966:	f7fc fd69 	bl	800143c <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fc fd65 	bl	800143c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d902      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	74fb      	strb	r3, [r7, #19]
        break;
 8004980:	e005      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d159      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01e      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049bc:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fc fd25 	bl	800143c <HAL_GetTick>
 80049f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f4:	e00b      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fc fd21 	bl	800143c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d902      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ec      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	74bb      	strb	r3, [r7, #18]
 8004a3e:	e005      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	7cfb      	ldrb	r3, [r7, #19]
 8004a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4c:	7c7b      	ldrb	r3, [r7, #17]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4ba7      	ldr	r3, [pc, #668]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	4aa6      	ldr	r2, [pc, #664]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6a:	4ba1      	ldr	r3, [pc, #644]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f023 0203 	bic.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	499d      	ldr	r1, [pc, #628]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a8c:	4b98      	ldr	r3, [pc, #608]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f023 020c 	bic.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4995      	ldr	r1, [pc, #596]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aae:	4b90      	ldr	r3, [pc, #576]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	498c      	ldr	r1, [pc, #560]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad0:	4b87      	ldr	r3, [pc, #540]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	4984      	ldr	r1, [pc, #528]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af2:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	497b      	ldr	r1, [pc, #492]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b14:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	4973      	ldr	r1, [pc, #460]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b36:	4b6e      	ldr	r3, [pc, #440]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	496a      	ldr	r1, [pc, #424]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b58:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	4962      	ldr	r1, [pc, #392]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b7a:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	4959      	ldr	r1, [pc, #356]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b9c:	4b54      	ldr	r3, [pc, #336]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	4951      	ldr	r1, [pc, #324]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b4c      	ldr	r3, [pc, #304]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4948      	ldr	r1, [pc, #288]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4940      	ldr	r1, [pc, #256]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	4932      	ldr	r1, [pc, #200]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c36:	d105      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a2c      	ldr	r2, [pc, #176]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	4924      	ldr	r1, [pc, #144]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	4916      	ldr	r1, [pc, #88]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4908      	ldr	r1, [pc, #32]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a02      	ldr	r2, [pc, #8]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cea:	60d3      	str	r3, [r2, #12]
 8004cec:	e002      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d00:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	4926      	ldr	r1, [pc, #152]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d20:	4b21      	ldr	r3, [pc, #132]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d38:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	4918      	ldr	r1, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d105      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	490a      	ldr	r1, [pc, #40]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000

08004dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e042      	b.n	8004e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fc f8b1 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	; 0x24
 8004dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 ff56 	bl	8005ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fc57 	bl	80056b0 <UART_SetConfig>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e01b      	b.n	8004e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 ffd5 	bl	8005dec <UART_CheckIdleState>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d17b      	bne.n	8004f5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_UART_Transmit+0x26>
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e074      	b.n	8004f60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e86:	f7fc fad9 	bl	800143c <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec0:	e030      	b.n	8004f24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f001 f837 	bl	8005f40 <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e03d      	b.n	8004f60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	3302      	adds	r3, #2
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e007      	b.n	8004f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1c8      	bne.n	8004ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f001 f800 	bl	8005f40 <UART_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e006      	b.n	8004f60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d137      	bne.n	8004ff0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Receive_DMA+0x24>
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e030      	b.n	8004ff2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_UART_Receive_DMA+0x94>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01f      	beq.n	8004fe0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d018      	beq.n	8004fe0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	613b      	str	r3, [r7, #16]
   return(result);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e6      	bne.n	8004fae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f001 f818 	bl	800601c <UART_Start_Receive_DMA>
 8004fec:	4603      	mov	r3, r0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3728      	adds	r7, #40	; 0x28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40008000 	.word	0x40008000

08005000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0ba      	sub	sp, #232	; 0xe8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800502a:	f640 030f 	movw	r3, #2063	; 0x80f
 800502e:	4013      	ands	r3, r2
 8005030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11b      	bne.n	8005074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 82e3 	beq.w	8005630 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
      }
      return;
 8005072:	e2dd      	b.n	8005630 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8123 	beq.w	80052c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800507e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005082:	4b8d      	ldr	r3, [pc, #564]	; (80052b8 <HAL_UART_IRQHandler+0x2b8>)
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800508a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800508e:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_UART_IRQHandler+0x2bc>)
 8005090:	4013      	ands	r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8116 	beq.w	80052c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d011      	beq.n	80050c8 <HAL_UART_IRQHandler+0xc8>
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f043 0201 	orr.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_UART_IRQHandler+0xf8>
 80050d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2202      	movs	r2, #2
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <HAL_UART_IRQHandler+0x128>
 8005104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2204      	movs	r2, #4
 8005116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005144:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <HAL_UART_IRQHandler+0x2b8>)
 8005146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f043 0208 	orr.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d012      	beq.n	8005196 <HAL_UART_IRQHandler+0x196>
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8249 	beq.w	8005634 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d054      	beq.n	80052a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fff5 	bl	80061ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d146      	bne.n	800529c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800523a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1d9      	bne.n	800520e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005260:	2b00      	cmp	r3, #0
 8005262:	d017      	beq.n	8005294 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526a:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_UART_IRQHandler+0x2c0>)
 800526c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005274:	4618      	mov	r0, r3
 8005276:	f7fc fb9b 	bl	80019b0 <HAL_DMA_Abort_IT>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d019      	beq.n	80052b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800528e:	4610      	mov	r0, r2
 8005290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005292:	e00f      	b.n	80052b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9f5 	bl	8005684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529a:	e00b      	b.n	80052b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f9f1 	bl	8005684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a2:	e007      	b.n	80052b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9ed 	bl	8005684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80052b2:	e1bf      	b.n	8005634 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	bf00      	nop
    return;
 80052b6:	e1bd      	b.n	8005634 <HAL_UART_IRQHandler+0x634>
 80052b8:	10000001 	.word	0x10000001
 80052bc:	04000120 	.word	0x04000120
 80052c0:	080064a1 	.word	0x080064a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 8153 	bne.w	8005574 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 814c 	beq.w	8005574 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8145 	beq.w	8005574 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	f040 80bb 	bne.w	8005478 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 818f 	beq.w	8005638 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005320:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005324:	429a      	cmp	r2, r3
 8005326:	f080 8187 	bcs.w	8005638 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 8087 	bne.w	8005456 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800535c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005376:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800537e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800538a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1da      	bne.n	8005348 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e1      	bne.n	8005392 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e3      	bne.n	80053ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005436:	65bb      	str	r3, [r7, #88]	; 0x58
 8005438:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800543c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e4      	bne.n	8005414 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	4618      	mov	r0, r3
 8005452:	f7fc fa54 	bl	80018fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005468:	b29b      	uxth	r3, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	b29b      	uxth	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f911 	bl	8005698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005476:	e0df      	b.n	8005638 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005484:	b29b      	uxth	r3, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80d1 	beq.w	800563c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800549a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80cc 	beq.w	800563c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054c6:	647b      	str	r3, [r7, #68]	; 0x44
 80054c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e4      	bne.n	80054a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	623b      	str	r3, [r7, #32]
   return(result);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005502:	633a      	str	r2, [r7, #48]	; 0x30
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e1      	bne.n	80054da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60fb      	str	r3, [r7, #12]
   return(result);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	617b      	str	r3, [r7, #20]
   return(result);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e4      	bne.n	800552a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005566:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f893 	bl	8005698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005572:	e063      	b.n	800563c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <HAL_UART_IRQHandler+0x59e>
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ffc3 	bl	8006522 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800559c:	e051      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d014      	beq.n	80055d4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03a      	beq.n	8005640 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
    }
    return;
 80055d2:	e035      	b.n	8005640 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_UART_IRQHandler+0x5f4>
 80055e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 ff6d 	bl	80064cc <UART_EndTransmit_IT>
    return;
 80055f2:	e026      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80055f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_UART_IRQHandler+0x614>
 8005600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 ff9c 	bl	800654a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005612:	e016      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_UART_IRQHandler+0x642>
 8005620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0c      	bge.n	8005642 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 ff84 	bl	8006536 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800562e:	e008      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
      return;
 8005630:	bf00      	nop
 8005632:	e006      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
    return;
 8005634:	bf00      	nop
 8005636:	e004      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
      return;
 8005638:	bf00      	nop
 800563a:	e002      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
      return;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_UART_IRQHandler+0x642>
    return;
 8005640:	bf00      	nop
  }
}
 8005642:	37e8      	adds	r7, #232	; 0xe8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b4:	b08c      	sub	sp, #48	; 0x30
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4baa      	ldr	r3, [pc, #680]	; (8005988 <UART_SetConfig+0x2d8>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a9f      	ldr	r2, [pc, #636]	; (800598c <UART_SetConfig+0x2dc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005718:	4313      	orrs	r3, r2
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005726:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005730:	430b      	orrs	r3, r1
 8005732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f023 010f 	bic.w	r1, r3, #15
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a90      	ldr	r2, [pc, #576]	; (8005990 <UART_SetConfig+0x2e0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d125      	bne.n	80057a0 <UART_SetConfig+0xf0>
 8005754:	4b8f      	ldr	r3, [pc, #572]	; (8005994 <UART_SetConfig+0x2e4>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d81a      	bhi.n	8005798 <UART_SetConfig+0xe8>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0xb8>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005779 	.word	0x08005779
 800576c:	08005789 	.word	0x08005789
 8005770:	08005781 	.word	0x08005781
 8005774:	08005791 	.word	0x08005791
 8005778:	2301      	movs	r3, #1
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577e:	e116      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005786:	e112      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e10e      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e10a      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e106      	b.n	80059ae <UART_SetConfig+0x2fe>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7c      	ldr	r2, [pc, #496]	; (8005998 <UART_SetConfig+0x2e8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d138      	bne.n	800581c <UART_SetConfig+0x16c>
 80057aa:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <UART_SetConfig+0x2e4>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d82d      	bhi.n	8005814 <UART_SetConfig+0x164>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x110>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	08005815 	.word	0x08005815
 80057c8:	08005815 	.word	0x08005815
 80057cc:	08005815 	.word	0x08005815
 80057d0:	08005805 	.word	0x08005805
 80057d4:	08005815 	.word	0x08005815
 80057d8:	08005815 	.word	0x08005815
 80057dc:	08005815 	.word	0x08005815
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005815 	.word	0x08005815
 80057e8:	08005815 	.word	0x08005815
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fa:	e0d8      	b.n	80059ae <UART_SetConfig+0x2fe>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005802:	e0d4      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580a:	e0d0      	b.n	80059ae <UART_SetConfig+0x2fe>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e0cc      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e0c8      	b.n	80059ae <UART_SetConfig+0x2fe>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a5e      	ldr	r2, [pc, #376]	; (800599c <UART_SetConfig+0x2ec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d125      	bne.n	8005872 <UART_SetConfig+0x1c2>
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <UART_SetConfig+0x2e4>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d016      	beq.n	8005862 <UART_SetConfig+0x1b2>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d818      	bhi.n	800586a <UART_SetConfig+0x1ba>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d00a      	beq.n	8005852 <UART_SetConfig+0x1a2>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d814      	bhi.n	800586a <UART_SetConfig+0x1ba>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <UART_SetConfig+0x19a>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d008      	beq.n	800585a <UART_SetConfig+0x1aa>
 8005848:	e00f      	b.n	800586a <UART_SetConfig+0x1ba>
 800584a:	2300      	movs	r3, #0
 800584c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005850:	e0ad      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005852:	2302      	movs	r3, #2
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005858:	e0a9      	b.n	80059ae <UART_SetConfig+0x2fe>
 800585a:	2304      	movs	r3, #4
 800585c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005860:	e0a5      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005862:	2308      	movs	r3, #8
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005868:	e0a1      	b.n	80059ae <UART_SetConfig+0x2fe>
 800586a:	2310      	movs	r3, #16
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e09d      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <UART_SetConfig+0x2f0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d125      	bne.n	80058c8 <UART_SetConfig+0x218>
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <UART_SetConfig+0x2e4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005886:	2bc0      	cmp	r3, #192	; 0xc0
 8005888:	d016      	beq.n	80058b8 <UART_SetConfig+0x208>
 800588a:	2bc0      	cmp	r3, #192	; 0xc0
 800588c:	d818      	bhi.n	80058c0 <UART_SetConfig+0x210>
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d00a      	beq.n	80058a8 <UART_SetConfig+0x1f8>
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d814      	bhi.n	80058c0 <UART_SetConfig+0x210>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <UART_SetConfig+0x1f0>
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d008      	beq.n	80058b0 <UART_SetConfig+0x200>
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x210>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e082      	b.n	80059ae <UART_SetConfig+0x2fe>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ae:	e07e      	b.n	80059ae <UART_SetConfig+0x2fe>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e07a      	b.n	80059ae <UART_SetConfig+0x2fe>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e076      	b.n	80059ae <UART_SetConfig+0x2fe>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e072      	b.n	80059ae <UART_SetConfig+0x2fe>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a35      	ldr	r2, [pc, #212]	; (80059a4 <UART_SetConfig+0x2f4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d12a      	bne.n	8005928 <UART_SetConfig+0x278>
 80058d2:	4b30      	ldr	r3, [pc, #192]	; (8005994 <UART_SetConfig+0x2e4>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e0:	d01a      	beq.n	8005918 <UART_SetConfig+0x268>
 80058e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e6:	d81b      	bhi.n	8005920 <UART_SetConfig+0x270>
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d00c      	beq.n	8005908 <UART_SetConfig+0x258>
 80058ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f2:	d815      	bhi.n	8005920 <UART_SetConfig+0x270>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <UART_SetConfig+0x250>
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d008      	beq.n	8005910 <UART_SetConfig+0x260>
 80058fe:	e00f      	b.n	8005920 <UART_SetConfig+0x270>
 8005900:	2300      	movs	r3, #0
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e052      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e04e      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e04a      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e046      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e042      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a17      	ldr	r2, [pc, #92]	; (800598c <UART_SetConfig+0x2dc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d13a      	bne.n	80059a8 <UART_SetConfig+0x2f8>
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <UART_SetConfig+0x2e4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800593c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005940:	d01a      	beq.n	8005978 <UART_SetConfig+0x2c8>
 8005942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005946:	d81b      	bhi.n	8005980 <UART_SetConfig+0x2d0>
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d00c      	beq.n	8005968 <UART_SetConfig+0x2b8>
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005952:	d815      	bhi.n	8005980 <UART_SetConfig+0x2d0>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <UART_SetConfig+0x2b0>
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d008      	beq.n	8005970 <UART_SetConfig+0x2c0>
 800595e:	e00f      	b.n	8005980 <UART_SetConfig+0x2d0>
 8005960:	2300      	movs	r3, #0
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e022      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005968:	2302      	movs	r3, #2
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e01e      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e01a      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e016      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e012      	b.n	80059ae <UART_SetConfig+0x2fe>
 8005988:	cfff69f3 	.word	0xcfff69f3
 800598c:	40008000 	.word	0x40008000
 8005990:	40013800 	.word	0x40013800
 8005994:	40021000 	.word	0x40021000
 8005998:	40004400 	.word	0x40004400
 800599c:	40004800 	.word	0x40004800
 80059a0:	40004c00 	.word	0x40004c00
 80059a4:	40005000 	.word	0x40005000
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4aae      	ldr	r2, [pc, #696]	; (8005c6c <UART_SetConfig+0x5bc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	f040 8097 	bne.w	8005ae8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d823      	bhi.n	8005a0a <UART_SetConfig+0x35a>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x318>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	08005a0b 	.word	0x08005a0b
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	08005a0b 	.word	0x08005a0b
 80059d8:	080059fb 	.word	0x080059fb
 80059dc:	08005a0b 	.word	0x08005a0b
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a0b 	.word	0x08005a0b
 80059e8:	08005a03 	.word	0x08005a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ec:	f7fe ff1e 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059f2:	e010      	b.n	8005a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f4:	4b9e      	ldr	r3, [pc, #632]	; (8005c70 <UART_SetConfig+0x5c0>)
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059f8:	e00d      	b.n	8005a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fa:	f7fe fea9 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 80059fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a00:	e009      	b.n	8005a16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8130 	beq.w	8005c7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	4a94      	ldr	r2, [pc, #592]	; (8005c74 <UART_SetConfig+0x5c4>)
 8005a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d305      	bcc.n	8005a4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d903      	bls.n	8005a56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a54:	e113      	b.n	8005c7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	60fa      	str	r2, [r7, #12]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	4a84      	ldr	r2, [pc, #528]	; (8005c74 <UART_SetConfig+0x5c4>)
 8005a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a78:	f7fa fbd6 	bl	8000228 <__aeabi_uldivmod>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	020b      	lsls	r3, r1, #8
 8005a8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a92:	0202      	lsls	r2, r0, #8
 8005a94:	6979      	ldr	r1, [r7, #20]
 8005a96:	6849      	ldr	r1, [r1, #4]
 8005a98:	0849      	lsrs	r1, r1, #1
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	eb12 0804 	adds.w	r8, r2, r4
 8005aa4:	eb43 0905 	adc.w	r9, r3, r5
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	469a      	mov	sl, r3
 8005ab0:	4693      	mov	fp, r2
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	4649      	mov	r1, r9
 8005aba:	f7fa fbb5 	bl	8000228 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005acc:	d308      	bcc.n	8005ae0 <UART_SetConfig+0x430>
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad4:	d204      	bcs.n	8005ae0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	e0ce      	b.n	8005c7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ae6:	e0ca      	b.n	8005c7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af0:	d166      	bne.n	8005bc0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d827      	bhi.n	8005b4a <UART_SetConfig+0x49a>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x450>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	08005b4b 	.word	0x08005b4b
 8005b10:	08005b3b 	.word	0x08005b3b
 8005b14:	08005b4b 	.word	0x08005b4b
 8005b18:	08005b4b 	.word	0x08005b4b
 8005b1c:	08005b4b 	.word	0x08005b4b
 8005b20:	08005b43 	.word	0x08005b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b24:	f7fe fe82 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8005b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b2a:	e014      	b.n	8005b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7fe fe94 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8005b30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b32:	e010      	b.n	8005b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <UART_SetConfig+0x5c0>)
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b38:	e00d      	b.n	8005b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fe fe09 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b40:	e009      	b.n	8005b56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b48:	e005      	b.n	8005b56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8090 	beq.w	8005c7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	4a44      	ldr	r2, [pc, #272]	; (8005c74 <UART_SetConfig+0x5c4>)
 8005b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b70:	005a      	lsls	r2, r3, #1
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	441a      	add	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d916      	bls.n	8005bb8 <UART_SetConfig+0x508>
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d212      	bcs.n	8005bb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f023 030f 	bic.w	r3, r3, #15
 8005b9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	8bfb      	ldrh	r3, [r7, #30]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	8bfa      	ldrh	r2, [r7, #30]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	e062      	b.n	8005c7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bbe:	e05e      	b.n	8005c7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d828      	bhi.n	8005c1a <UART_SetConfig+0x56a>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x520>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fe1a 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8005bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bfa:	e014      	b.n	8005c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fe fe2c 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c02:	e010      	b.n	8005c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <UART_SetConfig+0x5c0>)
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe fda1 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c18:	e005      	b.n	8005c26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c24:	bf00      	nop
    }

    if (pclk != 0U)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d028      	beq.n	8005c7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	4a10      	ldr	r2, [pc, #64]	; (8005c74 <UART_SetConfig+0x5c4>)
 8005c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c36:	461a      	mov	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d910      	bls.n	8005c78 <UART_SetConfig+0x5c8>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d20c      	bcs.n	8005c78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e009      	b.n	8005c7e <UART_SetConfig+0x5ce>
 8005c6a:	bf00      	nop
 8005c6c:	40008000 	.word	0x40008000
 8005c70:	00f42400 	.word	0x00f42400
 8005c74:	08006830 	.word	0x08006830
      }
      else
      {
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	; 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da6:	d10a      	bne.n	8005dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b098      	sub	sp, #96	; 0x60
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dfc:	f7fb fb1e 	bl	800143c <HAL_GetTick>
 8005e00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d12f      	bne.n	8005e70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f88e 	bl	8005f40 <UART_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d022      	beq.n	8005e70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e48:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e6      	bne.n	8005e2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e063      	b.n	8005f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d149      	bne.n	8005f12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e86:	2200      	movs	r2, #0
 8005e88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f857 	bl	8005f40 <UART_WaitOnFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d03c      	beq.n	8005f12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eea:	61fa      	str	r2, [r7, #28]
 8005eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e012      	b.n	8005f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3758      	adds	r7, #88	; 0x58
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f50:	e04f      	b.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d04b      	beq.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5a:	f7fb fa6f 	bl	800143c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d302      	bcc.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e04e      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d037      	beq.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d034      	beq.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d031      	beq.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d110      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f920 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2208      	movs	r2, #8
 8005fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e029      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fcc:	d111      	bne.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f906 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e00f      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	bf0c      	ite	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	2300      	movne	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	429a      	cmp	r2, r3
 800600e:	d0a0      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b096      	sub	sp, #88	; 0x58
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2222      	movs	r2, #34	; 0x22
 8006044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d02d      	beq.n	80060ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006058:	4a40      	ldr	r2, [pc, #256]	; (800615c <UART_Start_Receive_DMA+0x140>)
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006062:	4a3f      	ldr	r2, [pc, #252]	; (8006160 <UART_Start_Receive_DMA+0x144>)
 8006064:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606c:	4a3d      	ldr	r2, [pc, #244]	; (8006164 <UART_Start_Receive_DMA+0x148>)
 800606e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006076:	2200      	movs	r2, #0
 8006078:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3324      	adds	r3, #36	; 0x24
 8006086:	4619      	mov	r1, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	461a      	mov	r2, r3
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f7fb fbba 	bl	8001808 <HAL_DMA_Start_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2210      	movs	r2, #16
 800609e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e051      	b.n	8006152 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	657b      	str	r3, [r7, #84]	; 0x54
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e6      	bne.n	80060b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006108:	637a      	str	r2, [r7, #52]	; 0x34
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	613b      	str	r3, [r7, #16]
   return(result);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800613c:	623a      	str	r2, [r7, #32]
 800613e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	61bb      	str	r3, [r7, #24]
   return(result);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3758      	adds	r7, #88	; 0x58
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	080062b7 	.word	0x080062b7
 8006160:	080063e3 	.word	0x080063e3
 8006164:	08006421 	.word	0x08006421

08006168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b08f      	sub	sp, #60	; 0x3c
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	61fb      	str	r3, [r7, #28]
   return(result);
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006190:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e6      	bne.n	8006170 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c2:	61ba      	str	r2, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6979      	ldr	r1, [r7, #20]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	613b      	str	r3, [r7, #16]
   return(result);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80061de:	bf00      	nop
 80061e0:	373c      	adds	r7, #60	; 0x3c
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b095      	sub	sp, #84	; 0x54
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006210:	643b      	str	r3, [r7, #64]	; 0x40
 8006212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e3      	bne.n	8006224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d118      	bne.n	8006296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	60bb      	str	r3, [r7, #8]
   return(result);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6979      	ldr	r1, [r7, #20]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	613b      	str	r3, [r7, #16]
   return(result);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062aa:	bf00      	nop
 80062ac:	3754      	adds	r7, #84	; 0x54
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b09c      	sub	sp, #112	; 0x70
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d171      	bne.n	80063b6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80062d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	667b      	str	r3, [r7, #100]	; 0x64
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800632c:	647a      	str	r2, [r7, #68]	; 0x44
 800632e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	623b      	str	r3, [r7, #32]
   return(result);
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	663b      	str	r3, [r7, #96]	; 0x60
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006360:	633a      	str	r2, [r7, #48]	; 0x30
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d118      	bne.n	80063b6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	60fb      	str	r3, [r7, #12]
   return(result);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f023 0310 	bic.w	r3, r3, #16
 8006398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	69b9      	ldr	r1, [r7, #24]
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	617b      	str	r3, [r7, #20]
   return(result);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e6      	bne.n	8006384 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	2200      	movs	r2, #0
 80063ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d107      	bne.n	80063d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ca:	4619      	mov	r1, r3
 80063cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063ce:	f7ff f963 	bl	8005698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063d2:	e002      	b.n	80063da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80063d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063d6:	f7ff f941 	bl	800565c <HAL_UART_RxCpltCallback>
}
 80063da:	bf00      	nop
 80063dc:	3770      	adds	r7, #112	; 0x70
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d109      	bne.n	8006412 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff f944 	bl	8005698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006410:	e002      	b.n	8006418 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff f92c 	bl	8005670 <HAL_UART_RxHalfCpltCallback>
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d109      	bne.n	8006460 <UART_DMAError+0x40>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b21      	cmp	r3, #33	; 0x21
 8006450:	d106      	bne.n	8006460 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2200      	movs	r2, #0
 8006456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800645a:	6978      	ldr	r0, [r7, #20]
 800645c:	f7ff fe84 	bl	8006168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d109      	bne.n	8006482 <UART_DMAError+0x62>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b22      	cmp	r3, #34	; 0x22
 8006472:	d106      	bne.n	8006482 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2200      	movs	r2, #0
 8006478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f7ff feb4 	bl	80061ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006488:	f043 0210 	orr.w	r2, r3, #16
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006492:	6978      	ldr	r0, [r7, #20]
 8006494:	f7ff f8f6 	bl	8005684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff f8e0 	bl	8005684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6979      	ldr	r1, [r7, #20]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e6      	bne.n	80064d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff f897 	bl	8005648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651a:	bf00      	nop
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_UARTEx_DisableFifoMode+0x16>
 8006570:	2302      	movs	r3, #2
 8006572:	e027      	b.n	80065c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	; 0x24
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e02d      	b.n	8006644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	; 0x24
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f84f 	bl	80066c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006660:	2302      	movs	r3, #2
 8006662:	e02d      	b.n	80066c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2224      	movs	r2, #36	; 0x24
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f811 	bl	80066c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d108      	bne.n	80066ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066e8:	e031      	b.n	800674e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ea:	2308      	movs	r3, #8
 80066ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066ee:	2308      	movs	r3, #8
 80066f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	0e5b      	lsrs	r3, r3, #25
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	0f5b      	lsrs	r3, r3, #29
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	7b3a      	ldrb	r2, [r7, #12]
 8006716:	4911      	ldr	r1, [pc, #68]	; (800675c <UARTEx_SetNbDataToProcess+0x94>)
 8006718:	5c8a      	ldrb	r2, [r1, r2]
 800671a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800671e:	7b3a      	ldrb	r2, [r7, #12]
 8006720:	490f      	ldr	r1, [pc, #60]	; (8006760 <UARTEx_SetNbDataToProcess+0x98>)
 8006722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006724:	fb93 f3f2 	sdiv	r3, r3, r2
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	7b7a      	ldrb	r2, [r7, #13]
 8006734:	4909      	ldr	r1, [pc, #36]	; (800675c <UARTEx_SetNbDataToProcess+0x94>)
 8006736:	5c8a      	ldrb	r2, [r1, r2]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800673c:	7b7a      	ldrb	r2, [r7, #13]
 800673e:	4908      	ldr	r1, [pc, #32]	; (8006760 <UARTEx_SetNbDataToProcess+0x98>)
 8006740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006742:	fb93 f3f2 	sdiv	r3, r3, r2
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	08006848 	.word	0x08006848
 8006760:	08006850 	.word	0x08006850

08006764 <memset>:
 8006764:	4402      	add	r2, r0
 8006766:	4603      	mov	r3, r0
 8006768:	4293      	cmp	r3, r2
 800676a:	d100      	bne.n	800676e <memset+0xa>
 800676c:	4770      	bx	lr
 800676e:	f803 1b01 	strb.w	r1, [r3], #1
 8006772:	e7f9      	b.n	8006768 <memset+0x4>

08006774 <__libc_init_array>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	4d0d      	ldr	r5, [pc, #52]	; (80067ac <__libc_init_array+0x38>)
 8006778:	4c0d      	ldr	r4, [pc, #52]	; (80067b0 <__libc_init_array+0x3c>)
 800677a:	1b64      	subs	r4, r4, r5
 800677c:	10a4      	asrs	r4, r4, #2
 800677e:	2600      	movs	r6, #0
 8006780:	42a6      	cmp	r6, r4
 8006782:	d109      	bne.n	8006798 <__libc_init_array+0x24>
 8006784:	4d0b      	ldr	r5, [pc, #44]	; (80067b4 <__libc_init_array+0x40>)
 8006786:	4c0c      	ldr	r4, [pc, #48]	; (80067b8 <__libc_init_array+0x44>)
 8006788:	f000 f818 	bl	80067bc <_init>
 800678c:	1b64      	subs	r4, r4, r5
 800678e:	10a4      	asrs	r4, r4, #2
 8006790:	2600      	movs	r6, #0
 8006792:	42a6      	cmp	r6, r4
 8006794:	d105      	bne.n	80067a2 <__libc_init_array+0x2e>
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	f855 3b04 	ldr.w	r3, [r5], #4
 800679c:	4798      	blx	r3
 800679e:	3601      	adds	r6, #1
 80067a0:	e7ee      	b.n	8006780 <__libc_init_array+0xc>
 80067a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a6:	4798      	blx	r3
 80067a8:	3601      	adds	r6, #1
 80067aa:	e7f2      	b.n	8006792 <__libc_init_array+0x1e>
 80067ac:	08006860 	.word	0x08006860
 80067b0:	08006860 	.word	0x08006860
 80067b4:	08006860 	.word	0x08006860
 80067b8:	08006864 	.word	0x08006864

080067bc <_init>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	bf00      	nop
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr

080067c8 <_fini>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	bf00      	nop
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr
