
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006734  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006990  08006990  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006998  08006998  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080069a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200002e8  08006c88  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006c88  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f44  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  0003129f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6d  00000000  00000000  00034250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253ea  00000000  00000000  00034cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115cc  00000000  00000000  0005a0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec303  00000000  00000000  0006b673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003730  00000000  00000000  00157978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080068f4 	.word	0x080068f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002ec 	.word	0x200002ec
 8000214:	080068f4 	.word	0x080068f4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 ffb7 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 fa44 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fbba 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fb66 	bl	8000c04 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 faca 	bl	8000ad0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 fa88 	bl	8000a50 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fb12 	bl	8000b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f001 f819 	bl	800157c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // STM32 Part //
	  Dummy();
 800054a:	f000 fc6f 	bl	8000e2c <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 800054e:	2202      	movs	r2, #2
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <main+0x278>)
 8000552:	4893      	ldr	r0, [pc, #588]	; (80007a0 <main+0x27c>)
 8000554:	f004 fd9c 	bl	8005090 <HAL_UART_Receive_DMA>
	if(A==8){
 8000558:	4b92      	ldr	r3, [pc, #584]	; (80007a4 <main+0x280>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d112      	bne.n	8000586 <main+0x62>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 8000560:	4891      	ldr	r0, [pc, #580]	; (80007a8 <main+0x284>)
 8000562:	f7ff fe59 	bl	8000218 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	2304      	movs	r3, #4
 800056c:	498e      	ldr	r1, [pc, #568]	; (80007a8 <main+0x284>)
 800056e:	488c      	ldr	r0, [pc, #560]	; (80007a0 <main+0x27c>)
 8000570:	f004 fd00 	bl	8004f74 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 8000574:	2308      	movs	r3, #8
 8000576:	221b      	movs	r2, #27
 8000578:	498c      	ldr	r1, [pc, #560]	; (80007ac <main+0x288>)
 800057a:	4889      	ldr	r0, [pc, #548]	; (80007a0 <main+0x27c>)
 800057c:	f004 fcfa 	bl	8004f74 <HAL_UART_Transmit>
	  A=1;
 8000580:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <main+0x280>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <main+0x280>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <main+0x96>
			HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fff3 	bl	800157c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 8000596:	230a      	movs	r3, #10
 8000598:	2264      	movs	r2, #100	; 0x64
 800059a:	4985      	ldr	r1, [pc, #532]	; (80007b0 <main+0x28c>)
 800059c:	4880      	ldr	r0, [pc, #512]	; (80007a0 <main+0x27c>)
 800059e:	f004 fce9 	bl	8004f74 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2228      	movs	r2, #40	; 0x28
 80005a6:	4983      	ldr	r1, [pc, #524]	; (80007b4 <main+0x290>)
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x27c>)
 80005aa:	f004 fce3 	bl	8004f74 <HAL_UART_Transmit>
			A = 0;
 80005ae:	4b7d      	ldr	r3, [pc, #500]	; (80007a4 <main+0x280>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005b4:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <main+0x294>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005ba:	4b7f      	ldr	r3, [pc, #508]	; (80007b8 <main+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d145      	bne.n	800064e <main+0x12a>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <main+0x278>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b79      	cmp	r3, #121	; 0x79
 80005c8:	d120      	bne.n	800060c <main+0xe8>
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <main+0x278>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b0d      	cmp	r3, #13
 80005d0:	d11c      	bne.n	800060c <main+0xe8>
 80005d2:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x294>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d118      	bne.n	800060c <main+0xe8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005da:	230a      	movs	r3, #10
 80005dc:	221e      	movs	r2, #30
 80005de:	4977      	ldr	r1, [pc, #476]	; (80007bc <main+0x298>)
 80005e0:	486f      	ldr	r0, [pc, #444]	; (80007a0 <main+0x27c>)
 80005e2:	f004 fcc7 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005e6:	2308      	movs	r3, #8
 80005e8:	220c      	movs	r2, #12
 80005ea:	4975      	ldr	r1, [pc, #468]	; (80007c0 <main+0x29c>)
 80005ec:	486c      	ldr	r0, [pc, #432]	; (80007a0 <main+0x27c>)
 80005ee:	f004 fcc1 	bl	8004f74 <HAL_UART_Transmit>
				s1 =+ 1;
 80005f2:	4b74      	ldr	r3, [pc, #464]	; (80007c4 <main+0x2a0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
				A = 2;
 80005f8:	4b6a      	ldr	r3, [pc, #424]	; (80007a4 <main+0x280>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <main+0x278>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <main+0x278>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
 800060a:	e020      	b.n	800064e <main+0x12a>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x278>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b6e      	cmp	r3, #110	; 0x6e
 8000612:	d11c      	bne.n	800064e <main+0x12a>
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <main+0x278>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	d118      	bne.n	800064e <main+0x12a>
 800061c:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <main+0x294>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d114      	bne.n	800064e <main+0x12a>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000624:	230a      	movs	r3, #10
 8000626:	221e      	movs	r2, #30
 8000628:	4967      	ldr	r1, [pc, #412]	; (80007c8 <main+0x2a4>)
 800062a:	485d      	ldr	r0, [pc, #372]	; (80007a0 <main+0x27c>)
 800062c:	f004 fca2 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000630:	2308      	movs	r3, #8
 8000632:	220c      	movs	r2, #12
 8000634:	4962      	ldr	r1, [pc, #392]	; (80007c0 <main+0x29c>)
 8000636:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x27c>)
 8000638:	f004 fc9c 	bl	8004f74 <HAL_UART_Transmit>
				A = 2;
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <main+0x280>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000642:	4b56      	ldr	r3, [pc, #344]	; (800079c <main+0x278>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <main+0x278>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 800064e:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <main+0x280>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d115      	bne.n	8000682 <main+0x15e>
			HAL_Delay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f000 ff8f 	bl	800157c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 800065e:	230a      	movs	r3, #10
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	495a      	ldr	r1, [pc, #360]	; (80007cc <main+0x2a8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <main+0x27c>)
 8000666:	f004 fc85 	bl	8004f74 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800066a:	230a      	movs	r3, #10
 800066c:	2228      	movs	r2, #40	; 0x28
 800066e:	4951      	ldr	r1, [pc, #324]	; (80007b4 <main+0x290>)
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <main+0x27c>)
 8000672:	f004 fc7f 	bl	8004f74 <HAL_UART_Transmit>
			A = 0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x280>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
			mode = 2;
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <main+0x294>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <main+0x294>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d145      	bne.n	8000716 <main+0x1f2>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x278>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b79      	cmp	r3, #121	; 0x79
 8000690:	d11d      	bne.n	80006ce <main+0x1aa>
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x278>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d119      	bne.n	80006ce <main+0x1aa>
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d115      	bne.n	80006ce <main+0x1aa>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80006a2:	230a      	movs	r3, #10
 80006a4:	221e      	movs	r2, #30
 80006a6:	4945      	ldr	r1, [pc, #276]	; (80007bc <main+0x298>)
 80006a8:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x27c>)
 80006aa:	f004 fc63 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006ae:	2308      	movs	r3, #8
 80006b0:	220c      	movs	r2, #12
 80006b2:	4943      	ldr	r1, [pc, #268]	; (80007c0 <main+0x29c>)
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x27c>)
 80006b6:	f004 fc5d 	bl	8004f74 <HAL_UART_Transmit>
				A = 3;
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x280>)
 80006bc:	2203      	movs	r2, #3
 80006be:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <main+0x278>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x278>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	705a      	strb	r2, [r3, #1]
 80006cc:	e023      	b.n	8000716 <main+0x1f2>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <main+0x278>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b6e      	cmp	r3, #110	; 0x6e
 80006d4:	d11f      	bne.n	8000716 <main+0x1f2>
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x278>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d11b      	bne.n	8000716 <main+0x1f2>
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d117      	bne.n	8000716 <main+0x1f2>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006e6:	230a      	movs	r3, #10
 80006e8:	221e      	movs	r2, #30
 80006ea:	4937      	ldr	r1, [pc, #220]	; (80007c8 <main+0x2a4>)
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x27c>)
 80006ee:	f004 fc41 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006f2:	2308      	movs	r3, #8
 80006f4:	220c      	movs	r2, #12
 80006f6:	4932      	ldr	r1, [pc, #200]	; (80007c0 <main+0x29c>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <main+0x27c>)
 80006fa:	f004 fc3b 	bl	8004f74 <HAL_UART_Transmit>
				s2 =+ 1;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0x2ac>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				A = 3;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0x280>)
 8000706:	2203      	movs	r2, #3
 8000708:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0x278>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x278>)
 8000712:	2200      	movs	r2, #0
 8000714:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x280>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d115      	bne.n	800074a <main+0x226>
			HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 ff2b 	bl	800157c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000726:	230a      	movs	r3, #10
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	492a      	ldr	r1, [pc, #168]	; (80007d4 <main+0x2b0>)
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x27c>)
 800072e:	f004 fc21 	bl	8004f74 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000732:	230a      	movs	r3, #10
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	491f      	ldr	r1, [pc, #124]	; (80007b4 <main+0x290>)
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x27c>)
 800073a:	f004 fc1b 	bl	8004f74 <HAL_UART_Transmit>
			A = 0;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x280>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x294>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x294>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d165      	bne.n	800081e <main+0x2fa>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x278>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b79      	cmp	r3, #121	; 0x79
 8000758:	d140      	bne.n	80007dc <main+0x2b8>
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x278>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d13c      	bne.n	80007dc <main+0x2b8>
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x294>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d138      	bne.n	80007dc <main+0x2b8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800076a:	230a      	movs	r3, #10
 800076c:	221e      	movs	r2, #30
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <main+0x298>)
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <main+0x27c>)
 8000772:	f004 fbff 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000776:	2308      	movs	r3, #8
 8000778:	220c      	movs	r2, #12
 800077a:	4911      	ldr	r1, [pc, #68]	; (80007c0 <main+0x29c>)
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x27c>)
 800077e:	f004 fbf9 	bl	8004f74 <HAL_UART_Transmit>
				s3 =+ 1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x2b4>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
				A = 4;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x280>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <main+0x278>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000794:	4b01      	ldr	r3, [pc, #4]	; (800079c <main+0x278>)
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
 800079a:	e040      	b.n	800081e <main+0x2fa>
 800079c:	200006c0 	.word	0x200006c0
 80007a0:	20000418 	.word	0x20000418
 80007a4:	200002d8 	.word	0x200002d8
 80007a8:	20000000 	.word	0x20000000
 80007ac:	0800690c 	.word	0x0800690c
 80007b0:	20000020 	.word	0x20000020
 80007b4:	2000014c 	.word	0x2000014c
 80007b8:	200006c8 	.word	0x200006c8
 80007bc:	20000174 	.word	0x20000174
 80007c0:	08006928 	.word	0x08006928
 80007c4:	200006c2 	.word	0x200006c2
 80007c8:	20000194 	.word	0x20000194
 80007cc:	20000084 	.word	0x20000084
 80007d0:	200006c3 	.word	0x200006c3
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200006c4 	.word	0x200006c4
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007dc:	4b5f      	ldr	r3, [pc, #380]	; (800095c <main+0x438>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b6e      	cmp	r3, #110	; 0x6e
 80007e2:	d11c      	bne.n	800081e <main+0x2fa>
 80007e4:	4b5d      	ldr	r3, [pc, #372]	; (800095c <main+0x438>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	2b0d      	cmp	r3, #13
 80007ea:	d118      	bne.n	800081e <main+0x2fa>
 80007ec:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <main+0x43c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d114      	bne.n	800081e <main+0x2fa>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80007f4:	230a      	movs	r3, #10
 80007f6:	221e      	movs	r2, #30
 80007f8:	495a      	ldr	r1, [pc, #360]	; (8000964 <main+0x440>)
 80007fa:	485b      	ldr	r0, [pc, #364]	; (8000968 <main+0x444>)
 80007fc:	f004 fbba 	bl	8004f74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000800:	2308      	movs	r3, #8
 8000802:	220c      	movs	r2, #12
 8000804:	4959      	ldr	r1, [pc, #356]	; (800096c <main+0x448>)
 8000806:	4858      	ldr	r0, [pc, #352]	; (8000968 <main+0x444>)
 8000808:	f004 fbb4 	bl	8004f74 <HAL_UART_Transmit>
				A = 4;
 800080c:	4b58      	ldr	r3, [pc, #352]	; (8000970 <main+0x44c>)
 800080e:	2204      	movs	r2, #4
 8000810:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <main+0x438>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000818:	4b50      	ldr	r3, [pc, #320]	; (800095c <main+0x438>)
 800081a:	2200      	movs	r2, #0
 800081c:	705a      	strb	r2, [r3, #1]
			}
		}
//ScoreBoard //
		if(A == 4){
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <main+0x44c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d11e      	bne.n	8000864 <main+0x340>
			HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fea7 	bl	800157c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800082e:	230a      	movs	r3, #10
 8000830:	221e      	movs	r2, #30
 8000832:	4950      	ldr	r1, [pc, #320]	; (8000974 <main+0x450>)
 8000834:	484c      	ldr	r0, [pc, #304]	; (8000968 <main+0x444>)
 8000836:	f004 fb9d 	bl	8004f74 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, ToT2, 50, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	2232      	movs	r2, #50	; 0x32
 800083e:	494e      	ldr	r1, [pc, #312]	; (8000978 <main+0x454>)
 8000840:	4849      	ldr	r0, [pc, #292]	; (8000968 <main+0x444>)
 8000842:	f004 fb97 	bl	8004f74 <HAL_UART_Transmit>
			TotalScore = s1+s2+s3;
 8000846:	4b4d      	ldr	r3, [pc, #308]	; (800097c <main+0x458>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <main+0x45c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b4c      	ldr	r3, [pc, #304]	; (8000984 <main+0x460>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <main+0x464>)
 800085c:	701a      	strb	r2, [r3, #0]
			A=5;
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <main+0x44c>)
 8000860:	2205      	movs	r2, #5
 8000862:	601a      	str	r2, [r3, #0]
		}
// I2C part //
		if(A == 5){
 8000864:	4b42      	ldr	r3, [pc, #264]	; (8000970 <main+0x44c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d10c      	bne.n	8000886 <main+0x362>
			HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f000 fe84 	bl	800157c <HAL_Delay>
			WriteFlag = 1;
 8000874:	4b45      	ldr	r3, [pc, #276]	; (800098c <main+0x468>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			C = 1;
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <main+0x46c>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
			A=6;
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <main+0x44c>)
 8000882:	2206      	movs	r2, #6
 8000884:	601a      	str	r2, [r3, #0]
		}
		if(A == 6){
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <main+0x44c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d10c      	bne.n	80008a8 <main+0x384>
			if(C == 1){
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <main+0x46c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d105      	bne.n	80008a2 <main+0x37e>
				ReadFlag = 1;
 8000896:	4b3f      	ldr	r3, [pc, #252]	; (8000994 <main+0x470>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
				C = 0;
 800089c:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <main+0x46c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			}
			A=7;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <main+0x44c>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
		}
		if(A == 7){
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <main+0x44c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d14d      	bne.n	800094c <main+0x428>
			if(ReadFlag == 0){ReadFlag = 1;}
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <main+0x470>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <main+0x39a>
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <main+0x470>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
			ReadFlag = 0;
 80008be:	4b35      	ldr	r3, [pc, #212]	; (8000994 <main+0x470>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]

			strcpy(D,ReadBack);//compare
 80008c4:	4934      	ldr	r1, [pc, #208]	; (8000998 <main+0x474>)
 80008c6:	4835      	ldr	r0, [pc, #212]	; (800099c <main+0x478>)
 80008c8:	f006 f80c 	bl	80068e4 <strcpy>
			if (D[0] == 0){
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <main+0x478>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <main+0x3c4>
				B = 4;
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <main+0x47c>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S, 50, 10);
 80008da:	230a      	movs	r3, #10
 80008dc:	2232      	movs	r2, #50	; 0x32
 80008de:	4931      	ldr	r1, [pc, #196]	; (80009a4 <main+0x480>)
 80008e0:	4821      	ldr	r0, [pc, #132]	; (8000968 <main+0x444>)
 80008e2:	f004 fb47 	bl	8004f74 <HAL_UART_Transmit>
 80008e6:	e028      	b.n	800093a <main+0x416>
			}
			else if(D[0] == 1){
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <main+0x478>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d109      	bne.n	8000904 <main+0x3e0>
				B = 1;
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <main+0x47c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S1, 50, 10);
 80008f6:	230a      	movs	r3, #10
 80008f8:	2232      	movs	r2, #50	; 0x32
 80008fa:	492b      	ldr	r1, [pc, #172]	; (80009a8 <main+0x484>)
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <main+0x444>)
 80008fe:	f004 fb39 	bl	8004f74 <HAL_UART_Transmit>
 8000902:	e01a      	b.n	800093a <main+0x416>
			}
			else if(D[0] == 2){
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <main+0x478>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d109      	bne.n	8000920 <main+0x3fc>
				B = 2;
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <main+0x47c>)
 800090e:	2202      	movs	r2, #2
 8000910:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S2, 50, 10);
 8000912:	230a      	movs	r3, #10
 8000914:	2232      	movs	r2, #50	; 0x32
 8000916:	4925      	ldr	r1, [pc, #148]	; (80009ac <main+0x488>)
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <main+0x444>)
 800091a:	f004 fb2b 	bl	8004f74 <HAL_UART_Transmit>
 800091e:	e00c      	b.n	800093a <main+0x416>
			}
			else if(D[0] == 3){
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <main+0x478>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d108      	bne.n	800093a <main+0x416>
				B = 3;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <main+0x47c>)
 800092a:	2203      	movs	r2, #3
 800092c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S3, 50, 10);
 800092e:	230a      	movs	r3, #10
 8000930:	2232      	movs	r2, #50	; 0x32
 8000932:	491f      	ldr	r1, [pc, #124]	; (80009b0 <main+0x48c>)
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <main+0x444>)
 8000936:	f004 fb1d 	bl	8004f74 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&hlpuart1,"YOU ARE NOOB,LOSER UwU.\n\r", 50, 10);
 800093a:	230a      	movs	r3, #10
 800093c:	2232      	movs	r2, #50	; 0x32
 800093e:	491d      	ldr	r1, [pc, #116]	; (80009b4 <main+0x490>)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <main+0x444>)
 8000942:	f004 fb17 	bl	8004f74 <HAL_UART_Transmit>
			A=0;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <main+0x44c>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
		}
  EEPROMWriteExample();
 800094c:	f000 fa1a 	bl	8000d84 <EEPROMWriteExample>
  EEPROMReadExample(ReadBack, 1);
 8000950:	2101      	movs	r1, #1
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <main+0x474>)
 8000954:	f000 fa48 	bl	8000de8 <EEPROMReadExample>
	  Dummy();
 8000958:	e5f7      	b.n	800054a <main+0x26>
 800095a:	bf00      	nop
 800095c:	200006c0 	.word	0x200006c0
 8000960:	200006c8 	.word	0x200006c8
 8000964:	20000194 	.word	0x20000194
 8000968:	20000418 	.word	0x20000418
 800096c:	08006928 	.word	0x08006928
 8000970:	200002d8 	.word	0x200002d8
 8000974:	200001b4 	.word	0x200001b4
 8000978:	200001d4 	.word	0x200001d4
 800097c:	200006c2 	.word	0x200006c2
 8000980:	200006c3 	.word	0x200006c3
 8000984:	200006c4 	.word	0x200006c4
 8000988:	200006cc 	.word	0x200006cc
 800098c:	200006cd 	.word	0x200006cd
 8000990:	200006d8 	.word	0x200006d8
 8000994:	200006ce 	.word	0x200006ce
 8000998:	200006d0 	.word	0x200006d0
 800099c:	200006dc 	.word	0x200006dc
 80009a0:	200006d4 	.word	0x200006d4
 80009a4:	20000208 	.word	0x20000208
 80009a8:	2000023c 	.word	0x2000023c
 80009ac:	20000270 	.word	0x20000270
 80009b0:	200002a4 	.word	0x200002a4
 80009b4:	08006934 	.word	0x08006934

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2238      	movs	r2, #56	; 0x38
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 ff60 	bl	800688c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009da:	2000      	movs	r0, #0
 80009dc:	f003 fa4a 	bl	8003e74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009fa:	2355      	movs	r3, #85	; 0x55
 80009fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fae4 	bl	8003fdc <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a1a:	f000 fa1f 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2303      	movs	r3, #3
 8000a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2104      	movs	r1, #4
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fde2 	bl	8004600 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a42:	f000 fa0b 	bl	8000e5c <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3750      	adds	r7, #80	; 0x50
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_I2C1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <MX_I2C1_Init+0x7c>)
 8000a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a8c:	f001 fbbf 	bl	800220e <HAL_I2C_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a96:	f000 f9e1 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000a9e:	f003 f951 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aa8:	f000 f9d8 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_I2C1_Init+0x74>)
 8000ab0:	f003 f993 	bl	8003dda <HAL_I2CEx_ConfigDigitalFilter>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 f9cf 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000304 	.word	0x20000304
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	30a0a7fb 	.word	0x30a0a7fb

08000ad0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_LPUART1_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b18:	f004 f9dc 	bl	8004ed4 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b22:	f000 f99b 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b2a:	f005 fde5 	bl	80066f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b34:	f000 f992 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b3c:	f005 fe1a 	bl	8006774 <HAL_UARTEx_SetRxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b46:	f000 f989 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	f005 fd9b 	bl	8006686 <HAL_UARTEx_DisableFifoMode>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b56:	f000 f981 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000418 	.word	0x20000418
 8000b64:	40008000 	.word	0x40008000

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <MX_USART1_UART_Init+0x98>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000bb6:	f004 f98d 	bl	8004ed4 <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 f94c 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000bc8:	f005 fd96 	bl	80066f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f943 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000bda:	f005 fdcb 	bl	8006774 <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000be4:	f000 f93a 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000bea:	f005 fd4c 	bl	8006686 <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 f932 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200004ac 	.word	0x200004ac
 8000c00:	40013800 	.word	0x40013800

08000c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6493      	str	r3, [r2, #72]	; 0x48
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_DMA_Init+0xa0>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f000 fd99 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c44:	200b      	movs	r0, #11
 8000c46:	f000 fdb0 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f000 fd91 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c54:	200c      	movs	r0, #12
 8000c56:	f000 fda8 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200d      	movs	r0, #13
 8000c60:	f000 fd89 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c64:	200d      	movs	r0, #13
 8000c66:	f000 fda0 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200e      	movs	r0, #14
 8000c70:	f000 fd81 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fd98 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 fd79 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c84:	200f      	movs	r0, #15
 8000c86:	f000 fd90 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2010      	movs	r0, #16
 8000c90:	f000 fd71 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c94:	2010      	movs	r0, #16
 8000c96:	f000 fd88 	bl	80017aa <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f001 fa1d 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_GPIO_Init+0xd8>)
 8000d42:	f001 f88d 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f001 f87e 	bl	8001e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2028      	movs	r0, #40	; 0x28
 8000d6a:	f000 fd04 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f000 fd1b 	bl	80017aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800

08000d84 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af02      	add	r7, sp, #8
	if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <EEPROMWriteExample+0x54>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01f      	beq.n	8000dd2 <EEPROMWriteExample+0x4e>
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <EEPROMWriteExample+0x58>)
 8000d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d119      	bne.n	8000dd2 <EEPROMWriteExample+0x4e>
	static uint8_t data[4];
	 data[0]=TotalScore;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <EEPROMWriteExample+0x5c>)
 8000da0:	781a      	ldrb	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <EEPROMWriteExample+0x60>)
 8000da4:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <EEPROMWriteExample+0x60>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <EEPROMWriteExample+0x60>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <EEPROMWriteExample+0x60>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 1);
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <EEPROMWriteExample+0x60>)
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	222c      	movs	r2, #44	; 0x2c
 8000dc4:	21a0      	movs	r1, #160	; 0xa0
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <EEPROMWriteExample+0x58>)
 8000dc8:	f001 fabc 	bl	8002344 <HAL_I2C_Mem_Write_IT>
		WriteFlag = 0;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <EEPROMWriteExample+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200006cd 	.word	0x200006cd
 8000ddc:	20000304 	.word	0x20000304
 8000de0:	200006cc 	.word	0x200006cc
 8000de4:	200006e0 	.word	0x200006e0

08000de8 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
	if (ReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <EEPROMReadExample+0x3c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00f      	beq.n	8000e1c <EEPROMReadExample+0x34>
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <EEPROMReadExample+0x40>)
 8000dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	d109      	bne.n	8000e1c <EEPROMReadExample+0x34>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2302      	movs	r3, #2
 8000e12:	222c      	movs	r2, #44	; 0x2c
 8000e14:	21a0      	movs	r1, #160	; 0xa0
 8000e16:	4804      	ldr	r0, [pc, #16]	; (8000e28 <EEPROMReadExample+0x40>)
 8000e18:	f001 fb1e 	bl	8002458 <HAL_I2C_Mem_Read_IT>
//		ReadFlag = 0;
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200006ce 	.word	0x200006ce
 8000e28:	20000304 	.word	0x20000304

08000e2c <Dummy>:



// For LD2 Test //
void Dummy(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000e30:	f000 fb98 	bl	8001564 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <Dummy+0x2c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d30a      	bcc.n	8000e54 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000e3e:	f000 fb91 	bl	8001564 <HAL_GetTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	3364      	adds	r3, #100	; 0x64
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <Dummy+0x2c>)
 8000e48:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 f9a0 	bl	8002194 <HAL_GPIO_TogglePin>
	}
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200006e4 	.word	0x200006e4

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x44>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x44>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x44>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x44>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e9e:	f003 f88d 	bl	8003fbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	; 0x78
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2254      	movs	r2, #84	; 0x54
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fcdb 	bl	800688c <memset>
  if(hi2c->Instance==I2C1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_I2C_MspInit+0x16c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	f040 8099 	bne.w	8001014 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fda2 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff ffaf 	bl	8000e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b48      	ldr	r3, [pc, #288]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b45      	ldr	r3, [pc, #276]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f30:	4619      	mov	r1, r3
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <HAL_I2C_MspInit+0x174>)
 8000f34:	f000 ff94 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f38:	4b39      	ldr	r3, [pc, #228]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	4a38      	ldr	r2, [pc, #224]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f42:	6593      	str	r3, [r2, #88]	; 0x58
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_I2C_MspInit+0x170>)
 8000f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <HAL_I2C_MspInit+0x17c>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f86:	4828      	ldr	r0, [pc, #160]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f88:	f000 fc2a 	bl	80017e0 <HAL_DMA_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000f92:	f7ff ff63 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_I2C_MspInit+0x178>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_I2C_MspInit+0x184>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000faa:	2211      	movs	r2, #17
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fd8:	4815      	ldr	r0, [pc, #84]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fda:	f000 fc01 	bl	80017e0 <HAL_DMA_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000fe4:	f7ff ff3a 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_I2C_MspInit+0x180>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	201f      	movs	r0, #31
 8000ffa:	f000 fbbc 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ffe:	201f      	movs	r0, #31
 8001000:	f000 fbd3 	bl	80017aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2020      	movs	r0, #32
 800100a:	f000 fbb4 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800100e:	2020      	movs	r0, #32
 8001010:	f000 fbcb 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3778      	adds	r7, #120	; 0x78
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40005400 	.word	0x40005400
 8001020:	40021000 	.word	0x40021000
 8001024:	48000400 	.word	0x48000400
 8001028:	20000358 	.word	0x20000358
 800102c:	40020058 	.word	0x40020058
 8001030:	200003b8 	.word	0x200003b8
 8001034:	4002006c 	.word	0x4002006c

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0a0      	sub	sp, #128	; 0x80
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2254      	movs	r2, #84	; 0x54
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fc17 	bl	800688c <memset>
  if(huart->Instance==LPUART1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a99      	ldr	r2, [pc, #612]	; (80012c8 <HAL_UART_MspInit+0x290>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 8093 	bne.w	8001190 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800106a:	2320      	movs	r3, #32
 800106c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fcde 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001082:	f7ff feeb 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001086:	4b91      	ldr	r3, [pc, #580]	; (80012cc <HAL_UART_MspInit+0x294>)
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	4a90      	ldr	r2, [pc, #576]	; (80012cc <HAL_UART_MspInit+0x294>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001092:	4b8e      	ldr	r3, [pc, #568]	; (80012cc <HAL_UART_MspInit+0x294>)
 8001094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b8b      	ldr	r3, [pc, #556]	; (80012cc <HAL_UART_MspInit+0x294>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a8a      	ldr	r2, [pc, #552]	; (80012cc <HAL_UART_MspInit+0x294>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_UART_MspInit+0x294>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010b6:	230c      	movs	r3, #12
 80010b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010c6:	230c      	movs	r3, #12
 80010c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f000 fec4 	bl	8001e60 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_UART_MspInit+0x29c>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80010de:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010e0:	2223      	movs	r2, #35	; 0x23
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e4:	4b7a      	ldr	r3, [pc, #488]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010e6:	2210      	movs	r2, #16
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_UART_MspInit+0x298>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <HAL_UART_MspInit+0x298>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <HAL_UART_MspInit+0x298>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800110e:	4870      	ldr	r0, [pc, #448]	; (80012d0 <HAL_UART_MspInit+0x298>)
 8001110:	f000 fb66 	bl	80017e0 <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800111a:	f7ff fe9f 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a6b      	ldr	r2, [pc, #428]	; (80012d0 <HAL_UART_MspInit+0x298>)
 8001122:	67da      	str	r2, [r3, #124]	; 0x7c
 8001124:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <HAL_UART_MspInit+0x298>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800112a:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 800112c:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <HAL_UART_MspInit+0x2a4>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001132:	2222      	movs	r2, #34	; 0x22
 8001134:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114e:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001156:	2220      	movs	r2, #32
 8001158:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001160:	485d      	ldr	r0, [pc, #372]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001162:	f000 fb3d 	bl	80017e0 <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800116c:	f7ff fe76 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a59      	ldr	r2, [pc, #356]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 8001174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001178:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <HAL_UART_MspInit+0x2a0>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	205b      	movs	r0, #91	; 0x5b
 8001184:	f000 faf7 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001188:	205b      	movs	r0, #91	; 0x5b
 800118a:	f000 fb0e 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800118e:	e096      	b.n	80012be <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_UART_MspInit+0x2a8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 8091 	bne.w	80012be <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fc45 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80011b4:	f7ff fe52 	bl	8000e5c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011bc:	4a43      	ldr	r2, [pc, #268]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6613      	str	r3, [r2, #96]	; 0x60
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011dc:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_UART_MspInit+0x294>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011e8:	2330      	movs	r3, #48	; 0x30
 80011ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f8:	2307      	movs	r3, #7
 80011fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001200:	4619      	mov	r1, r3
 8001202:	4838      	ldr	r0, [pc, #224]	; (80012e4 <HAL_UART_MspInit+0x2ac>)
 8001204:	f000 fe2c 	bl	8001e60 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 800120a:	4a38      	ldr	r2, [pc, #224]	; (80012ec <HAL_UART_MspInit+0x2b4>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001210:	2218      	movs	r2, #24
 8001212:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001234:	2220      	movs	r2, #32
 8001236:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800123e:	482a      	ldr	r0, [pc, #168]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001240:	f000 face 	bl	80017e0 <HAL_DMA_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x216>
      Error_Handler();
 800124a:	f7ff fe07 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_UART_MspInit+0x2b0>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <HAL_UART_MspInit+0x2bc>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001264:	2219      	movs	r2, #25
 8001266:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 800126a:	2210      	movs	r2, #16
 800126c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001292:	4817      	ldr	r0, [pc, #92]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 8001294:	f000 faa4 	bl	80017e0 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800129e:	f7ff fddd 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 80012a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_UART_MspInit+0x2b8>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2025      	movs	r0, #37	; 0x25
 80012b4:	f000 fa5f 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012b8:	2025      	movs	r0, #37	; 0x25
 80012ba:	f000 fa76 	bl	80017aa <HAL_NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3780      	adds	r7, #128	; 0x80
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40008000 	.word	0x40008000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	20000540 	.word	0x20000540
 80012d4:	40020008 	.word	0x40020008
 80012d8:	200005a0 	.word	0x200005a0
 80012dc:	4002001c 	.word	0x4002001c
 80012e0:	40013800 	.word	0x40013800
 80012e4:	48000800 	.word	0x48000800
 80012e8:	20000600 	.word	0x20000600
 80012ec:	40020030 	.word	0x40020030
 80012f0:	20000660 	.word	0x20000660
 80012f4:	40020044 	.word	0x40020044

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f8fc 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA1_Channel1_IRQHandler+0x10>)
 8001352:	f000 fc28 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000540 	.word	0x20000540

08001360 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA1_Channel2_IRQHandler+0x10>)
 8001366:	f000 fc1e 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200005a0 	.word	0x200005a0

08001374 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <DMA1_Channel3_IRQHandler+0x10>)
 800137a:	f000 fc14 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000600 	.word	0x20000600

08001388 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <DMA1_Channel4_IRQHandler+0x10>)
 800138e:	f000 fc0a 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000660 	.word	0x20000660

0800139c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA1_Channel5_IRQHandler+0x10>)
 80013a2:	f000 fc00 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000358 	.word	0x20000358

080013b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <DMA1_Channel6_IRQHandler+0x10>)
 80013b6:	f000 fbf6 	bl	8001ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200003b8 	.word	0x200003b8

080013c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <I2C1_EV_IRQHandler+0x10>)
 80013ca:	f001 f8cb 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000304 	.word	0x20000304

080013d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <I2C1_ER_IRQHandler+0x10>)
 80013de:	f001 f8db 	bl	8002598 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000304 	.word	0x20000304

080013ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <USART1_IRQHandler+0x10>)
 80013f2:	f003 fe99 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200004ac 	.word	0x200004ac

08001400 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001404:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001408:	f000 fede 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <LPUART1_IRQHandler+0x10>)
 8001416:	f003 fe87 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000418 	.word	0x20000418

08001424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f005 fa11 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff f853 	bl	8000524 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 800148c:	080069a0 	.word	0x080069a0
  ldr r2, =_sbss
 8001490:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001494:	200006ec 	.word	0x200006ec

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f95b 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fcd4 	bl	8000e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_InitTick+0x6c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f966 	bl	80017c6 <HAL_SYSTICK_Config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d809      	bhi.n	800151a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f000 f932 	bl	8001776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_InitTick+0x70>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e007      	b.n	800152a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e004      	b.n	800152a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002e4 	.word	0x200002e4
 8001538:	200002dc 	.word	0x200002dc
 800153c:	200002e0 	.word	0x200002e0

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_IncTick+0x1c>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200006e8 	.word	0x200006e8
 8001560:	200002e4 	.word	0x200002e4

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200006e8 	.word	0x200006e8

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d004      	beq.n	80015a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_Delay+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a0:	bf00      	nop
 80015a2:	f7ff ffdf 	bl	8001564 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8f7      	bhi.n	80015a2 <HAL_Delay+0x26>
  {
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002e4 	.word	0x200002e4

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff40 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff33 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa4 	bl	800171c <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e08d      	b.n	800190e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_DMA_Init+0x138>)
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d80f      	bhi.n	800181e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_DMA_Init+0x13c>)
 8001806:	4413      	add	r3, r2
 8001808:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_DMA_Init+0x140>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a42      	ldr	r2, [pc, #264]	; (8001924 <HAL_DMA_Init+0x144>)
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	e00e      	b.n	800183c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_DMA_Init+0x148>)
 8001826:	4413      	add	r3, r2
 8001828:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_DMA_Init+0x140>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_DMA_Init+0x14c>)
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fa84 	bl	8001d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800189c:	d102      	bne.n	80018a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <HAL_DMA_Init+0x104>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d80c      	bhi.n	80018e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 faa4 	bl	8001e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e008      	b.n	80018f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020407 	.word	0x40020407
 800191c:	bffdfff8 	.word	0xbffdfff8
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	40020000 	.word	0x40020000
 8001928:	bffdfbf8 	.word	0xbffdfbf8
 800192c:	40020400 	.word	0x40020400

08001930 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_DMA_Start_IT+0x20>
 800194c:	2302      	movs	r3, #2
 800194e:	e066      	b.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d155      	bne.n	8001a10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f9c9 	bl	8001d20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 020e 	orr.w	r2, r2, #14
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00f      	b.n	80019c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 020a 	orr.w	r2, r2, #10
 80019c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e005      	b.n	8001a1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d005      	beq.n	8001a4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e037      	b.n	8001aba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020e 	bic.w	r2, r2, #14
 8001a58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 021f 	and.w	r2, r3, #31
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ab8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d00d      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e047      	b.n	8001b9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020e 	bic.w	r2, r2, #14
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00c      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
    }
  }
  return status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d026      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x7a>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d021      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f003 021f 	and.w	r2, r3, #31
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2104      	movs	r1, #4
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d071      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c1e:	e06c      	b.n	8001cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2202      	movs	r2, #2
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d02e      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d029      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020a 	bic.w	r2, r2, #10
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2102      	movs	r1, #2
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d038      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c90:	e033      	b.n	8001cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d02a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d025      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 020e 	bic.w	r2, r2, #14
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
}
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d12:	b2db      	uxtb	r3, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 021f 	and.w	r2, r3, #31
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d108      	bne.n	8001d80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d7e:	e007      	b.n	8001d90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d802      	bhi.n	8001db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e001      	b.n	8001dba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001db8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3b08      	subs	r3, #8
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2201      	movs	r2, #1
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40020407 	.word	0x40020407
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020820 	.word	0x40020820
 8001e10:	cccccccd 	.word	0xcccccccd
 8001e14:	40020880 	.word	0x40020880

08001e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	1000823f 	.word	0x1000823f
 8001e5c:	40020940 	.word	0x40020940

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e6e:	e15a      	b.n	8002126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 814c 	beq.w	8002120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d005      	beq.n	8001ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d123      	bne.n	8001f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0203 	and.w	r2, r3, #3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a6 	beq.w	8002120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fec:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_Init+0x1f8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_GPIO_Init+0x2ec>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_GPIO_Init+0x1f4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_GPIO_Init+0x2f0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_Init+0x1f0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <HAL_GPIO_Init+0x2f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a49      	ldr	r2, [pc, #292]	; (8002158 <HAL_GPIO_Init+0x2f8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_GPIO_Init+0x2fc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002040:	2305      	movs	r3, #5
 8002042:	e00a      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002044:	2306      	movs	r3, #6
 8002046:	e008      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002048:	2304      	movs	r3, #4
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 800204c:	2303      	movs	r3, #3
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002058:	2300      	movs	r3, #0
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_GPIO_Init+0x300>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209c:	4a30      	ldr	r2, [pc, #192]	; (8002160 <HAL_GPIO_Init+0x300>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x300>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x300>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_GPIO_Init+0x300>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_GPIO_Init+0x300>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x300>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_GPIO_Init+0x300>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f ae9d 	bne.w	8001e70 <HAL_GPIO_Init+0x10>
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	48001000 	.word	0x48001000
 800215c:	48001400 	.word	0x48001400
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002180:	e002      	b.n	8002188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43d9      	mvns	r1, r3
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	400b      	ands	r3, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f806 	bl	80021f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e08d      	b.n	800233c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe fe3b 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2224      	movs	r2, #36	; 0x24
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	e006      	b.n	8002296 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002294:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d108      	bne.n	80022b0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	e007      	b.n	80022c0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69d9      	ldr	r1, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	460b      	mov	r3, r1
 8002358:	813b      	strh	r3, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	d16a      	bne.n	8002440 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_I2C_Mem_Write_IT+0x32>
 8002370:	8bbb      	ldrh	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e05f      	b.n	8002442 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002392:	2302      	movs	r3, #2
 8002394:	e055      	b.n	8002442 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_I2C_Mem_Write_IT+0x60>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e04e      	b.n	8002442 <HAL_I2C_Mem_Write_IT+0xfe>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8bba      	ldrh	r2, [r7, #28]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_I2C_Mem_Write_IT+0x108>)
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_I2C_Mem_Write_IT+0x10c>)
 80023de:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80023e0:	897a      	ldrh	r2, [r7, #10]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d109      	bne.n	8002400 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
 80023fe:	e00b      	b.n	8002418 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002400:	893b      	ldrh	r3, [r7, #8]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2da      	uxtb	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_I2C_Mem_Write_IT+0x110>)
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f001 fb78 	bl	8003b1c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002434:	2101      	movs	r1, #1
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f001 fba2 	bl	8003b80 <I2C_Enable_IRQ>

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	ffff0000 	.word	0xffff0000
 8002450:	08002721 	.word	0x08002721
 8002454:	80002000 	.word	0x80002000

08002458 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	d166      	bne.n	800254c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_I2C_Mem_Read_IT+0x32>
 8002484:	8bbb      	ldrh	r3, [r7, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e05b      	b.n	800254e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	e051      	b.n	800254e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_Mem_Read_IT+0x60>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e04a      	b.n	800254e <HAL_I2C_Mem_Read_IT+0xf6>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2222      	movs	r2, #34	; 0x22
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8bba      	ldrh	r2, [r7, #28]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <HAL_I2C_Mem_Read_IT+0x100>)
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_I2C_Mem_Read_IT+0x104>)
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80024ee:	897a      	ldrh	r2, [r7, #10]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d109      	bne.n	800250e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fa:	893b      	ldrh	r3, [r7, #8]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f04f 32ff 	mov.w	r2, #4294967295
 800250a:	651a      	str	r2, [r3, #80]	; 0x50
 800250c:	e00b      	b.n	8002526 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800250e:	893b      	ldrh	r3, [r7, #8]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800251c:	893b      	ldrh	r3, [r7, #8]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_I2C_Mem_Read_IT+0x108>)
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f001 faf2 	bl	8003b1c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002540:	2101      	movs	r1, #1
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 fb1c 	bl	8003b80 <I2C_Enable_IRQ>

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	ffff0000 	.word	0xffff0000
 800255c:	08002721 	.word	0x08002721
 8002560:	80002000 	.word	0x80002000

08002564 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
  }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00f      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00f      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0208 	orr.w	r2, r3, #8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002602:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00f      	beq.n	800262e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0202 	orr.w	r2, r3, #2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030b 	and.w	r3, r3, #11
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 f911 	bl	8003868 <I2C_ITError>
  }
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	70fb      	strb	r3, [r7, #3]
 80026aa:	4613      	mov	r3, r2
 80026ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800272c:	4b8d      	ldr	r3, [pc, #564]	; (8002964 <I2C_Mem_ISR_IT+0x244>)
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <I2C_Mem_ISR_IT+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e10c      	b.n	800295c <I2C_Mem_ISR_IT+0x23c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2210      	movs	r2, #16
 8002764:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f001 f98f 	bl	8003a96 <I2C_Flush_TXDR>
 8002778:	e0dd      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d022      	beq.n	80027ca <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c8:	e0b5      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02c      	beq.n	800282e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d027      	beq.n	800282e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d118      	bne.n	800281a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002818:	e08d      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f04f 32ff 	mov.w	r2, #4294967295
 800282a:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800282c:	e083      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b00      	cmp	r3, #0
 8002836:	d03c      	beq.n	80028b2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800283e:	2b00      	cmp	r3, #0
 8002840:	d037      	beq.n	80028b2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02c      	beq.n	80028a6 <I2C_Mem_ISR_IT+0x186>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d128      	bne.n	80028a6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d910      	bls.n	8002880 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	b299      	uxth	r1, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f001 f94f 	bl	8003b1c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	e017      	b.n	80028b0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	b299      	uxth	r1, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f001 f93c 	bl	8003b1c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a4:	e004      	b.n	80028b0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 ffdd 	bl	8003868 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ae:	e042      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
 80028b0:	e041      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03c      	beq.n	8002936 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d037      	beq.n	8002936 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028c6:	2101      	movs	r1, #1
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f001 f9dd 	bl	8003c88 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028ce:	2102      	movs	r1, #2
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f001 f955 	bl	8003b80 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b22      	cmp	r3, #34	; 0x22
 80028e0:	d101      	bne.n	80028e6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <I2C_Mem_ISR_IT+0x248>)
 80028e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	d910      	bls.n	8002912 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	b299      	uxth	r1, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 f906 	bl	8003b1c <I2C_TransferConfig>
 8002910:	e011      	b.n	8002936 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	b299      	uxth	r1, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f001 f8f3 	bl	8003b1c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800294a:	6939      	ldr	r1, [r7, #16]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fd0b 	bl	8003368 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	80002000 	.word	0x80002000
 8002968:	80002400 	.word	0x80002400

0800296c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <I2C_Slave_ISR_IT+0x24>
 800298c:	2302      	movs	r3, #2
 800298e:	e0e2      	b.n	8002b56 <I2C_Slave_ISR_IT+0x1ea>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fda2 	bl	80034f8 <I2C_ITSlaveCplt>
 80029b4:	e0ca      	b.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d04b      	beq.n	8002a58 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d046      	beq.n	8002a58 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d128      	bne.n	8002a26 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b28      	cmp	r3, #40	; 0x28
 80029de:	d108      	bne.n	80029f2 <I2C_Slave_ISR_IT+0x86>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e6:	d104      	bne.n	80029f2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fee8 	bl	80037c0 <I2C_ITListenCplt>
 80029f0:	e031      	b.n	8002a56 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b29      	cmp	r3, #41	; 0x29
 80029fc:	d10e      	bne.n	8002a1c <I2C_Slave_ISR_IT+0xb0>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a04:	d00a      	beq.n	8002a1c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f001 f841 	bl	8003a96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fc4b 	bl	80032b0 <I2C_ITSlaveSeqCplt>
 8002a1a:	e01c      	b.n	8002a56 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2210      	movs	r2, #16
 8002a22:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a24:	e08f      	b.n	8002b46 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <I2C_Slave_ISR_IT+0xdc>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a46:	d17e      	bne.n	8002b46 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 ff0a 	bl	8003868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a54:	e077      	b.n	8002b46 <I2C_Slave_ISR_IT+0x1da>
 8002a56:	e076      	b.n	8002b46 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d02f      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02a      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d018      	beq.n	8002aa8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d14b      	bne.n	8002b4a <I2C_Slave_ISR_IT+0x1de>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab8:	d047      	beq.n	8002b4a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fbf8 	bl	80032b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ac0:	e043      	b.n	8002b4a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ad6:	6939      	ldr	r1, [r7, #16]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fb28 	bl	800312e <I2C_ITAddrCplt>
 8002ade:	e035      	b.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d030      	beq.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02b      	beq.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d018      	beq.n	8002b30 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002b2e:	e00d      	b.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b36:	d002      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x1d2>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fbb6 	bl	80032b0 <I2C_ITSlaveSeqCplt>
 8002b44:	e002      	b.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002b4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <I2C_Master_ISR_DMA+0x1a>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0d9      	b.n	8002d2c <I2C_Master_ISR_DMA+0x1ce>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d011      	beq.n	8002bb8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002ba8:	2120      	movs	r1, #32
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 ffe8 	bl	8003b80 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 ff70 	bl	8003a96 <I2C_Flush_TXDR>
 8002bb6:	e0b4      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d071      	beq.n	8002ca6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d06c      	beq.n	8002ca6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04e      	beq.n	8002c84 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d906      	bls.n	8002c0c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	22ff      	movs	r2, #255	; 0xff
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e010      	b.n	8002c2e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c1e:	d003      	beq.n	8002c28 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e002      	b.n	8002c2e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8a79      	ldrh	r1, [r7, #18]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 ff6d 	bl	8003b1c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b22      	cmp	r3, #34	; 0x22
 8002c5e:	d108      	bne.n	8002c72 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c70:	e057      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c82:	e04e      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c92:	d003      	beq.n	8002c9c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 face 	bl	8003236 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002c9a:	e042      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c9c:	2140      	movs	r1, #64	; 0x40
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fde2 	bl	8003868 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ca4:	e03d      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d028      	beq.n	8002d02 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d023      	beq.n	8002d02 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d119      	bne.n	8002cf8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cd2:	d025      	beq.n	8002d20 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cec:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002cee:	e017      	b.n	8002d20 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 faa0 	bl	8003236 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002cf6:	e013      	b.n	8002d20 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fdb4 	bl	8003868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d00:	e00e      	b.n	8002d20 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fb25 	bl	8003368 <I2C_ITMasterCplt>
 8002d1e:	e000      	b.n	8002d22 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002d20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002d40:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <I2C_Mem_ISR_DMA+0x244>)
 8002d42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <I2C_Mem_ISR_DMA+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e10e      	b.n	8002f70 <I2C_Mem_ISR_DMA+0x23c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d016      	beq.n	8002d92 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d011      	beq.n	8002d92 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2210      	movs	r2, #16
 8002d74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f043 0204 	orr.w	r2, r3, #4
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d82:	2120      	movs	r1, #32
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fefb 	bl	8003b80 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fe83 	bl	8003a96 <I2C_Flush_TXDR>
 8002d90:	e0e9      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	651a      	str	r2, [r3, #80]	; 0x50
 8002db8:	e0d5      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05f      	beq.n	8002e84 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d05a      	beq.n	8002e84 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 ff59 	bl	8003c88 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fed1 	bl	8003b80 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d048      	beq.n	8002e7a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d910      	bls.n	8002e14 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	b299      	uxth	r1, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fe85 	bl	8003b1c <I2C_TransferConfig>
 8002e12:	e011      	b.n	8002e38 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	b299      	uxth	r1, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fe72 	bl	8003b1c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b22      	cmp	r3, #34	; 0x22
 8002e54:	d108      	bne.n	8002e68 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e66:	e07e      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e78:	e075      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fcf3 	bl	8003868 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e82:	e070      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d05d      	beq.n	8002f4a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d058      	beq.n	8002f4a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fef4 	bl	8003c88 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fe6c 	bl	8003b80 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b22      	cmp	r3, #34	; 0x22
 8002eb2:	d101      	bne.n	8002eb8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <I2C_Mem_ISR_DMA+0x248>)
 8002eb6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2bff      	cmp	r3, #255	; 0xff
 8002ec0:	d910      	bls.n	8002ee4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fe1d 	bl	8003b1c <I2C_TransferConfig>
 8002ee2:	e011      	b.n	8002f08 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fe0a 	bl	8003b1c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b22      	cmp	r3, #34	; 0x22
 8002f24:	d108      	bne.n	8002f38 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f34:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f36:	e016      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f48:	e00d      	b.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa01 	bl	8003368 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	80002000 	.word	0x80002000
 8002f7c:	80002400 	.word	0x80002400

08002f80 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <I2C_Slave_ISR_DMA+0x24>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0c0      	b.n	8003126 <I2C_Slave_ISR_DMA+0x1a6>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fa98 	bl	80034f8 <I2C_ITSlaveCplt>
 8002fc8:	e0a8      	b.n	800311c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8095 	beq.w	8003100 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 808f 	beq.w	8003100 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07d      	beq.n	80030f2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003014:	2301      	movs	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8003036:	2301      	movs	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d128      	bne.n	8003092 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b28      	cmp	r3, #40	; 0x28
 800304a:	d108      	bne.n	800305e <I2C_Slave_ISR_DMA+0xde>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003052:	d104      	bne.n	800305e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fbb2 	bl	80037c0 <I2C_ITListenCplt>
 800305c:	e048      	b.n	80030f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b29      	cmp	r3, #41	; 0x29
 8003068:	d10e      	bne.n	8003088 <I2C_Slave_ISR_DMA+0x108>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003070:	d00a      	beq.n	8003088 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2210      	movs	r2, #16
 8003078:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fd0b 	bl	8003a96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f915 	bl	80032b0 <I2C_ITSlaveSeqCplt>
 8003086:	e033      	b.n	80030f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003090:	e034      	b.n	80030fc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2210      	movs	r2, #16
 8003098:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f043 0204 	orr.w	r2, r3, #4
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <I2C_Slave_ISR_DMA+0x13c>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ba:	d11f      	bne.n	80030fc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b21      	cmp	r3, #33	; 0x21
 80030c0:	d002      	beq.n	80030c8 <I2C_Slave_ISR_DMA+0x148>
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b29      	cmp	r3, #41	; 0x29
 80030c6:	d103      	bne.n	80030d0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	; 0x21
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
 80030ce:	e008      	b.n	80030e2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b22      	cmp	r3, #34	; 0x22
 80030d4:	d002      	beq.n	80030dc <I2C_Slave_ISR_DMA+0x15c>
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b2a      	cmp	r3, #42	; 0x2a
 80030da:	d102      	bne.n	80030e2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2222      	movs	r2, #34	; 0x22
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbbd 	bl	8003868 <I2C_ITError>
      if (treatdmanack == 1U)
 80030ee:	e005      	b.n	80030fc <I2C_Slave_ISR_DMA+0x17c>
 80030f0:	e004      	b.n	80030fc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2210      	movs	r2, #16
 80030f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030fa:	e00f      	b.n	800311c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80030fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030fe:	e00d      	b.n	800311c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f809 	bl	800312e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003144:	2b28      	cmp	r3, #40	; 0x28
 8003146:	d16a      	bne.n	800321e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	b29b      	uxth	r3, r3
 8003162:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003166:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003174:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003182:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d138      	bne.n	80031fe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	09db      	lsrs	r3, r3, #7
 8003190:	b29a      	uxth	r2, r3
 8003192:	89bb      	ldrh	r3, [r7, #12]
 8003194:	4053      	eors	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	f003 0306 	and.w	r3, r3, #6
 800319c:	2b00      	cmp	r3, #0
 800319e:	d11c      	bne.n	80031da <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031a0:	897b      	ldrh	r3, [r7, #10]
 80031a2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d13b      	bne.n	800322e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031cc:	89ba      	ldrh	r2, [r7, #12]
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fa63 	bl	800269e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031d8:	e029      	b.n	800322e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80031da:	893b      	ldrh	r3, [r7, #8]
 80031dc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fd50 	bl	8003c88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031f0:	89ba      	ldrh	r2, [r7, #12]
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fa51 	bl	800269e <HAL_I2C_AddrCallback>
}
 80031fc:	e017      	b.n	800322e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fd40 	bl	8003c88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003210:	89ba      	ldrh	r2, [r7, #12]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fa41 	bl	800269e <HAL_I2C_AddrCallback>
}
 800321c:	e007      	b.n	800322e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2208      	movs	r2, #8
 8003224:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b21      	cmp	r3, #33	; 0x21
 8003250:	d115      	bne.n	800327e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2211      	movs	r2, #17
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003266:	2101      	movs	r1, #1
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fd0d 	bl	8003c88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff f9e9 	bl	800264e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800327c:	e014      	b.n	80032a8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2212      	movs	r2, #18
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003292:	2102      	movs	r1, #2
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fcf7 	bl	8003c88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f9dd 	bl	8002662 <HAL_I2C_MasterRxCpltCallback>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e00c      	b.n	80032fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b29      	cmp	r3, #41	; 0x29
 8003308:	d112      	bne.n	8003330 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2228      	movs	r2, #40	; 0x28
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003318:	2101      	movs	r1, #1
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fcb4 	bl	8003c88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff f9a4 	bl	8002676 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800332e:	e017      	b.n	8003360 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d111      	bne.n	8003360 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2228      	movs	r2, #40	; 0x28
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800334a:	2102      	movs	r1, #2
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fc9b 	bl	8003c88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff f995 	bl	800268a <HAL_I2C_SlaveRxCpltCallback>
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2220      	movs	r2, #32
 800337c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b21      	cmp	r3, #33	; 0x21
 8003388:	d107      	bne.n	800339a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800338a:	2101      	movs	r1, #1
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fc7b 	bl	8003c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2211      	movs	r2, #17
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
 8003398:	e00c      	b.n	80033b4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b22      	cmp	r3, #34	; 0x22
 80033a4:	d106      	bne.n	80033b4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033a6:	2102      	movs	r1, #2
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fc6d 	bl	8003c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2212      	movs	r2, #18
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <I2C_ITMasterCplt+0x188>)
 80033c0:	400b      	ands	r3, r1
 80033c2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a49      	ldr	r2, [pc, #292]	; (80034f4 <I2C_ITMasterCplt+0x18c>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2210      	movs	r2, #16
 80033e0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f043 0204 	orr.w	r2, r3, #4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b60      	cmp	r3, #96	; 0x60
 80033f8:	d10a      	bne.n	8003410 <I2C_ITMasterCplt+0xa8>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2db      	uxtb	r3, r3
 800340c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800340e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fb40 	bl	8003a96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d002      	beq.n	800342e <I2C_ITMasterCplt+0xc6>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa17 	bl	8003868 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800343a:	e054      	b.n	80034e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b21      	cmp	r3, #33	; 0x21
 8003446:	d124      	bne.n	8003492 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d10b      	bne.n	800347a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff f92b 	bl	80026ce <HAL_I2C_MemTxCpltCallback>
}
 8003478:	e035      	b.n	80034e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff f8df 	bl	800264e <HAL_I2C_MasterTxCpltCallback>
}
 8003490:	e029      	b.n	80034e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b22      	cmp	r3, #34	; 0x22
 800349c:	d123      	bne.n	80034e6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d10b      	bne.n	80034d0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff f90a 	bl	80026e2 <HAL_I2C_MemRxCpltCallback>
}
 80034ce:	e00a      	b.n	80034e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff f8be 	bl	8002662 <HAL_I2C_MasterRxCpltCallback>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	fe00e800 	.word	0xfe00e800
 80034f4:	ffff0000 	.word	0xffff0000

080034f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2220      	movs	r2, #32
 8003522:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	2b21      	cmp	r3, #33	; 0x21
 8003528:	d002      	beq.n	8003530 <I2C_ITSlaveCplt+0x38>
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	2b29      	cmp	r3, #41	; 0x29
 800352e:	d108      	bne.n	8003542 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003530:	f248 0101 	movw	r1, #32769	; 0x8001
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fba7 	bl	8003c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2221      	movs	r2, #33	; 0x21
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
 8003540:	e019      	b.n	8003576 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	2b22      	cmp	r3, #34	; 0x22
 8003546:	d002      	beq.n	800354e <I2C_ITSlaveCplt+0x56>
 8003548:	7afb      	ldrb	r3, [r7, #11]
 800354a:	2b2a      	cmp	r3, #42	; 0x2a
 800354c:	d108      	bne.n	8003560 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800354e:	f248 0102 	movw	r1, #32770	; 0x8002
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb98 	bl	8003c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2222      	movs	r2, #34	; 0x22
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
 800355e:	e00a      	b.n	8003576 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	2b28      	cmp	r3, #40	; 0x28
 8003564:	d107      	bne.n	8003576 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003566:	f248 0103 	movw	r1, #32771	; 0x8003
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fb8c 	bl	8003c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003584:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <I2C_ITSlaveCplt+0x2c0>)
 8003592:	400b      	ands	r3, r1
 8003594:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa7d 	bl	8003a96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01f      	beq.n	80035fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035cc:	e017      	b.n	80035fe <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d049      	beq.n	80036fe <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003670:	2b00      	cmp	r3, #0
 8003672:	d044      	beq.n	80036fe <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d128      	bne.n	80036d0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b28      	cmp	r3, #40	; 0x28
 8003688:	d108      	bne.n	800369c <I2C_ITSlaveCplt+0x1a4>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003690:	d104      	bne.n	800369c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f893 	bl	80037c0 <I2C_ITListenCplt>
 800369a:	e030      	b.n	80036fe <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b29      	cmp	r3, #41	; 0x29
 80036a6:	d10e      	bne.n	80036c6 <I2C_ITSlaveCplt+0x1ce>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ae:	d00a      	beq.n	80036c6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f9ec 	bl	8003a96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fdf6 	bl	80032b0 <I2C_ITSlaveSeqCplt>
 80036c4:	e01b      	b.n	80036fe <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	61da      	str	r2, [r3, #28]
 80036ce:	e016      	b.n	80036fe <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2210      	movs	r2, #16
 80036d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <I2C_ITSlaveCplt+0x1fa>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d105      	bne.n	80036fe <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4619      	mov	r1, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8b5 	bl	8003868 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8a4 	bl	8003868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b28      	cmp	r3, #40	; 0x28
 800372a:	d141      	bne.n	80037b0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f846 	bl	80037c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003734:	e03c      	b.n	80037b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800373e:	d014      	beq.n	800376a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fdb5 	bl	80032b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <I2C_ITSlaveCplt+0x2c4>)
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe ffa9 	bl	80026ba <HAL_I2C_ListenCpltCallback>
}
 8003768:	e022      	b.n	80037b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b22      	cmp	r3, #34	; 0x22
 8003774:	d10e      	bne.n	8003794 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe ff7c 	bl	800268a <HAL_I2C_SlaveRxCpltCallback>
}
 8003792:	e00d      	b.n	80037b0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe ff63 	bl	8002676 <HAL_I2C_SlaveTxCpltCallback>
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	fe00e800 	.word	0xfe00e800
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <I2C_ITListenCplt+0xa4>)
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d022      	beq.n	800383c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d012      	beq.n	800383c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800383c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fa21 	bl	8003c88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe ff2f 	bl	80026ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	ffff0000 	.word	0xffff0000

08003868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a6d      	ldr	r2, [pc, #436]	; (8003a3c <I2C_ITError+0x1d4>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b28      	cmp	r3, #40	; 0x28
 800389e:	d005      	beq.n	80038ac <I2C_ITError+0x44>
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b29      	cmp	r3, #41	; 0x29
 80038a4:	d002      	beq.n	80038ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b2a      	cmp	r3, #42	; 0x2a
 80038aa:	d10b      	bne.n	80038c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038ac:	2103      	movs	r1, #3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9ea 	bl	8003c88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a60      	ldr	r2, [pc, #384]	; (8003a40 <I2C_ITError+0x1d8>)
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34
 80038c2:	e030      	b.n	8003926 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9dd 	bl	8003c88 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8e1 	bl	8003a96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	d01f      	beq.n	8003920 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d114      	bne.n	8003920 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d109      	bne.n	8003918 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2210      	movs	r2, #16
 800390a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d039      	beq.n	80039a8 <I2C_ITError+0x140>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b11      	cmp	r3, #17
 8003938:	d002      	beq.n	8003940 <I2C_ITError+0xd8>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b21      	cmp	r3, #33	; 0x21
 800393e:	d133      	bne.n	80039a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394e:	d107      	bne.n	8003960 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800395e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe f9cd 	bl	8001d04 <HAL_DMA_GetState>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d017      	beq.n	80039a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	4a33      	ldr	r2, [pc, #204]	; (8003a44 <I2C_ITError+0x1dc>)
 8003976:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe f8a7 	bl	8001ad8 <HAL_DMA_Abort_IT>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d04d      	beq.n	8003a2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800399a:	4610      	mov	r0, r2
 800399c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800399e:	e045      	b.n	8003a2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f851 	bl	8003a48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039a6:	e041      	b.n	8003a2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d039      	beq.n	8003a24 <I2C_ITError+0x1bc>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b12      	cmp	r3, #18
 80039b4:	d002      	beq.n	80039bc <I2C_ITError+0x154>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b22      	cmp	r3, #34	; 0x22
 80039ba:	d133      	bne.n	8003a24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ca:	d107      	bne.n	80039dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe f98f 	bl	8001d04 <HAL_DMA_GetState>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d017      	beq.n	8003a1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <I2C_ITError+0x1dc>)
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe f869 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a16:	4610      	mov	r0, r2
 8003a18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a1a:	e009      	b.n	8003a30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f813 	bl	8003a48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a22:	e005      	b.n	8003a30 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f80f 	bl	8003a48 <I2C_TreatErrorCallback>
  }
}
 8003a2a:	e002      	b.n	8003a32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a30:	bf00      	nop
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	ffff0000 	.word	0xffff0000
 8003a40:	0800296d 	.word	0x0800296d
 8003a44:	08003adf 	.word	0x08003adf

08003a48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d10e      	bne.n	8003a7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe fe49 	bl	800270a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a78:	e009      	b.n	8003a8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fe fe34 	bl	80026f6 <HAL_I2C_ErrorCallback>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d103      	bne.n	8003ab4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d007      	beq.n	8003ad2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	619a      	str	r2, [r3, #24]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	2200      	movs	r2, #0
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ff9b 	bl	8003a48 <I2C_TreatErrorCallback>
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b34:	7a7b      	ldrb	r3, [r7, #9]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	0d5b      	lsrs	r3, r3, #21
 8003b56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <I2C_TransferConfig+0x60>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	ea02 0103 	and.w	r1, r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	03ff63ff 	.word	0x03ff63ff

08003b80 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	4a39      	ldr	r2, [pc, #228]	; (8003c7c <I2C_Enable_IRQ+0xfc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d032      	beq.n	8003c00 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003b9e:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <I2C_Enable_IRQ+0x100>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d02d      	beq.n	8003c00 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003ba8:	4a36      	ldr	r2, [pc, #216]	; (8003c84 <I2C_Enable_IRQ+0x104>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d028      	beq.n	8003c00 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da03      	bge.n	8003bbe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003bce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003be0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d103      	bne.n	8003bf0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003bee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d133      	bne.n	8003c5e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f043 0320 	orr.w	r3, r3, #32
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bfe:	e02e      	b.n	8003c5e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da03      	bge.n	8003c10 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d103      	bne.n	8003c42 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d103      	bne.n	8003c50 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d103      	bne.n	8003c5e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	08002b5f 	.word	0x08002b5f
 8003c80:	08002f81 	.word	0x08002f81
 8003c84:	08002d35 	.word	0x08002d35

08003c88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00f      	beq.n	8003cc2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ca8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cb6:	2b28      	cmp	r3, #40	; 0x28
 8003cb8:	d003      	beq.n	8003cc2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00f      	beq.n	8003cec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003cd2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ce0:	2b28      	cmp	r3, #40	; 0x28
 8003ce2:	d003      	beq.n	8003cec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da03      	bge.n	8003cfc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d103      	bne.n	8003d0a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d103      	bne.n	8003d18 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f043 0320 	orr.w	r3, r3, #32
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d103      	bne.n	8003d26 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d139      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e033      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d141      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d131      	bne.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e96:	4a46      	ldr	r2, [pc, #280]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea8:	4a41      	ldr	r2, [pc, #260]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eb0:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2232      	movs	r2, #50	; 0x32
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec6:	e002      	b.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d102      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f2      	bne.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eee:	d158      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e057      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f04:	e04d      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d141      	bne.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d131      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2232      	movs	r2, #50	; 0x32
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f52:	e002      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d102      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f2      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d112      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e011      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f90:	e007      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9a:	4a05      	ldr	r2, [pc, #20]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	200002dc 	.word	0x200002dc
 8003fb8:	431bde83 	.word	0x431bde83

08003fbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fca:	6093      	str	r3, [r2, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40007000 	.word	0x40007000

08003fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e2fe      	b.n	80045ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d075      	beq.n	80040e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffa:	4b97      	ldr	r3, [pc, #604]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004004:	4b94      	ldr	r3, [pc, #592]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d102      	bne.n	800401a <HAL_RCC_OscConfig+0x3e>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d002      	beq.n	8004020 <HAL_RCC_OscConfig+0x44>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d10b      	bne.n	8004038 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d05b      	beq.n	80040e4 <HAL_RCC_OscConfig+0x108>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d157      	bne.n	80040e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e2d9      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004040:	d106      	bne.n	8004050 <HAL_RCC_OscConfig+0x74>
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a84      	ldr	r2, [pc, #528]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e01d      	b.n	800408c <HAL_RCC_OscConfig+0xb0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x98>
 800405a:	4b7f      	ldr	r3, [pc, #508]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7e      	ldr	r2, [pc, #504]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7b      	ldr	r2, [pc, #492]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0xb0>
 8004074:	4b78      	ldr	r3, [pc, #480]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a74      	ldr	r2, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fa66 	bl	8001564 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fa62 	bl	8001564 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e29e      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0xc0>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fa52 	bl	8001564 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd fa4e 	bl	8001564 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e28a      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0xe8>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d075      	beq.n	80041de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d102      	bne.n	8004112 <HAL_RCC_OscConfig+0x136>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d002      	beq.n	8004118 <HAL_RCC_OscConfig+0x13c>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11f      	bne.n	8004158 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004118:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_OscConfig+0x154>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e25d      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b49      	ldr	r3, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4946      	ldr	r1, [pc, #280]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd f9bf 	bl	80014cc <HAL_InitTick>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d043      	beq.n	80041dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e249      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd f9fa 	bl	8001564 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fd f9f6 	bl	8001564 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e232      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	492d      	ldr	r1, [pc, #180]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 80041a6:	e01a      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd f9d6 	bl	8001564 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fd f9d2 	bl	8001564 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e20e      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x1e0>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d041      	beq.n	800426e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01c      	beq.n	800422c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fd f9af 	bl	8001564 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fd f9ab 	bl	8001564 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e1e7      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800421e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <HAL_RCC_OscConfig+0x22e>
 800422a:	e020      	b.n	800426e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_RCC_OscConfig+0x27c>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd f992 	bl	8001564 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004242:	e00d      	b.n	8004260 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd f98e 	bl	8001564 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d906      	bls.n	8004260 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1ca      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	200002e0 	.word	0x200002e0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004260:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ea      	bne.n	8004244 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a6 	beq.w	80043c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004280:	4b84      	ldr	r3, [pc, #528]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_OscConfig+0x2b4>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x2b6>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a7e      	ldr	r2, [pc, #504]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6593      	str	r3, [r2, #88]	; 0x58
 80042a2:	4b7c      	ldr	r3, [pc, #496]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042ae:	2301      	movs	r3, #1
 80042b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_OscConfig+0x4bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d118      	bne.n	80042f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x4bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a75      	ldr	r2, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x4bc>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ca:	f7fd f94b 	bl	8001564 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fd f947 	bl	8001564 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e183      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e4:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x4bc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d108      	bne.n	800430a <HAL_RCC_OscConfig+0x32e>
 80042f8:	4b66      	ldr	r3, [pc, #408]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a65      	ldr	r2, [pc, #404]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004308:	e024      	b.n	8004354 <HAL_RCC_OscConfig+0x378>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d110      	bne.n	8004334 <HAL_RCC_OscConfig+0x358>
 8004312:	4b60      	ldr	r3, [pc, #384]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	4a5e      	ldr	r2, [pc, #376]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004322:	4b5c      	ldr	r3, [pc, #368]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4a5a      	ldr	r2, [pc, #360]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004332:	e00f      	b.n	8004354 <HAL_RCC_OscConfig+0x378>
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	4a56      	ldr	r2, [pc, #344]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d016      	beq.n	800438a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fd f902 	bl	8001564 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd f8fe 	bl	8001564 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e138      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437a:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ed      	beq.n	8004364 <HAL_RCC_OscConfig+0x388>
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fd f8eb 	bl	8001564 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd f8e7 	bl	8001564 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e121      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a8:	4b3a      	ldr	r3, [pc, #232]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ed      	bne.n	8004392 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d03c      	beq.n	800444e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01c      	beq.n	8004416 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80043de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e2:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd f8ba 	bl	8001564 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f4:	f7fd f8b6 	bl	8001564 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e0f2      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ef      	beq.n	80043f4 <HAL_RCC_OscConfig+0x418>
 8004414:	e01b      	b.n	800444e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004416:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441c:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fd f89d 	bl	8001564 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800442e:	f7fd f899 	bl	8001564 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0d5      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ef      	bne.n	800442e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80c9 	beq.w	80045ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b0c      	cmp	r3, #12
 8004462:	f000 8083 	beq.w	800456c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d15e      	bne.n	800452c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd f873 	bl	8001564 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	e00c      	b.n	800449c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fd f86f 	bl	8001564 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d905      	bls.n	800449c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0ab      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ec      	bne.n	8004482 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	4b52      	ldr	r3, [pc, #328]	; (80045f8 <HAL_RCC_OscConfig+0x61c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6a11      	ldr	r1, [r2, #32]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044c2:	0212      	lsls	r2, r2, #8
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044ca:	0852      	lsrs	r2, r2, #1
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0552      	lsls	r2, r2, #21
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d6:	0852      	lsrs	r2, r2, #1
 80044d8:	3a01      	subs	r2, #1
 80044da:	0652      	lsls	r2, r2, #25
 80044dc:	4311      	orrs	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044e2:	06d2      	lsls	r2, r2, #27
 80044e4:	430a      	orrs	r2, r1
 80044e6:	4943      	ldr	r1, [pc, #268]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a40      	ldr	r2, [pc, #256]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f8:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd f82e 	bl	8001564 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd f82a 	bl	8001564 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e066      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x530>
 800452a:	e05e      	b.n	80045ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd f814 	bl	8001564 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd f810 	bl	8001564 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04c      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004552:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	4924      	ldr	r1, [pc, #144]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_OscConfig+0x620>)
 8004566:	4013      	ands	r3, r2
 8004568:	60cb      	str	r3, [r1, #12]
 800456a:	e03e      	b.n	80045ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e039      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCC_OscConfig+0x618>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0203 	and.w	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d12c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	3b01      	subs	r3, #1
 8004598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d123      	bne.n	80045e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11b      	bne.n	80045e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d113      	bne.n	80045e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	3b01      	subs	r3, #1
 80045cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	019f800c 	.word	0x019f800c
 80045fc:	feeefffc 	.word	0xfeeefffc

08004600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e11e      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b91      	ldr	r3, [pc, #580]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d910      	bls.n	8004648 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b8e      	ldr	r3, [pc, #568]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 020f 	bic.w	r2, r3, #15
 800462e:	498c      	ldr	r1, [pc, #560]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b8a      	ldr	r3, [pc, #552]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e106      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d073      	beq.n	800473c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d129      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465c:	4b81      	ldr	r3, [pc, #516]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0f4      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800466c:	f000 f99e 	bl	80049ac <RCC_GetSysClockFreqFromPLLSource>
 8004670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4a7c      	ldr	r2, [pc, #496]	; (8004868 <HAL_RCC_ClockConfig+0x268>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d93f      	bls.n	80046fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800467a:	4b7a      	ldr	r3, [pc, #488]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	d033      	beq.n	80046fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d12f      	bne.n	80046fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800469a:	4b72      	ldr	r3, [pc, #456]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a2:	4a70      	ldr	r2, [pc, #448]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e024      	b.n	80046fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b8:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0c6      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c8:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0be      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046d8:	f000 f8ce 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4a61      	ldr	r2, [pc, #388]	; (8004868 <HAL_RCC_ClockConfig+0x268>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d909      	bls.n	80046fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ee:	4a5d      	ldr	r2, [pc, #372]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4957      	ldr	r1, [pc, #348]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fc ff2a 	bl	8001564 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fc ff26 	bl	8001564 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e095      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 020c 	and.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d1eb      	bne.n	8004714 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a42      	ldr	r2, [pc, #264]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800475a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800475e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800476c:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004774:	4a3b      	ldr	r2, [pc, #236]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800477a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4936      	ldr	r1, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
 800478e:	e008      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d105      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	4a32      	ldr	r2, [pc, #200]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 800479c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d21d      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b0:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 020f 	bic.w	r2, r3, #15
 80047b8:	4929      	ldr	r1, [pc, #164]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047c0:	f7fc fed0 	bl	8001564 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fc fecc 	bl	8001564 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e03b      	b.n	8004856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1ed      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4917      	ldr	r1, [pc, #92]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	490f      	ldr	r1, [pc, #60]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800482a:	f000 f825 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <HAL_RCC_ClockConfig+0x264>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490c      	ldr	r1, [pc, #48]	; (800486c <HAL_RCC_ClockConfig+0x26c>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x270>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x274>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fe3c 	bl	80014cc <HAL_InitTick>
 8004854:	4603      	mov	r3, r0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	04c4b400 	.word	0x04c4b400
 800486c:	08006950 	.word	0x08006950
 8004870:	200002dc 	.word	0x200002dc
 8004874:	200002e0 	.word	0x200002e0

08004878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d102      	bne.n	8004890 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800488a:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <HAL_RCC_GetSysClockFreq+0xbc>)
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e047      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b08      	cmp	r3, #8
 800489a:	d102      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <HAL_RCC_GetSysClockFreq+0xc0>)
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e03e      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d136      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3301      	adds	r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d6:	68d2      	ldr	r2, [r2, #12]
 80048d8:	0a12      	lsrs	r2, r2, #8
 80048da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	617b      	str	r3, [r7, #20]
      break;
 80048e4:	e00c      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	0a12      	lsrs	r2, r2, #8
 80048f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
      break;
 80048fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0e5b      	lsrs	r3, r3, #25
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	3301      	adds	r3, #1
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e001      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004920:	693b      	ldr	r3, [r7, #16]
}
 8004922:	4618      	mov	r0, r3
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	00f42400 	.word	0x00f42400
 8004938:	016e3600 	.word	0x016e3600

0800493c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	200002dc 	.word	0x200002dc

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4904      	ldr	r1, [pc, #16]	; (800497c <HAL_RCC_GetPCLK1Freq+0x28>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	08006960 	.word	0x08006960

08004980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004984:	f7ff ffda 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0adb      	lsrs	r3, r3, #11
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4904      	ldr	r1, [pc, #16]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	08006960 	.word	0x08006960

080049ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049b2:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d10c      	bne.n	80049ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049d0:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049da:	68d2      	ldr	r2, [r2, #12]
 80049dc:	0a12      	lsrs	r2, r2, #8
 80049de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	617b      	str	r3, [r7, #20]
    break;
 80049e8:	e00c      	b.n	8004a04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	0a12      	lsrs	r2, r2, #8
 80049f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]
    break;
 8004a02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0e5b      	lsrs	r3, r3, #25
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a1e:	687b      	ldr	r3, [r7, #4]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	016e3600 	.word	0x016e3600
 8004a34:	00f42400 	.word	0x00f42400

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8098 	beq.w	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5a:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	4a3f      	ldr	r2, [pc, #252]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
 8004a72:	4b3d      	ldr	r3, [pc, #244]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a82:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fd69 	bl	8001564 <HAL_GetTick>
 8004a92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a94:	e009      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fc fd65 	bl	8001564 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d902      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	74fb      	strb	r3, [r7, #19]
        break;
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ef      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d159      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01e      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d019      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ae4:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b04:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fc fd25 	bl	8001564 <HAL_GetTick>
 8004b1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fc fd21 	bl	8001564 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d902      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	74fb      	strb	r3, [r7, #19]
            break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ec      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	74bb      	strb	r3, [r7, #18]
 8004b66:	e005      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b74:	7c7b      	ldrb	r3, [r7, #17]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d105      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7a:	4ba7      	ldr	r3, [pc, #668]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	4aa6      	ldr	r2, [pc, #664]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b92:	4ba1      	ldr	r3, [pc, #644]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f023 0203 	bic.w	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	499d      	ldr	r1, [pc, #628]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bb4:	4b98      	ldr	r3, [pc, #608]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 020c 	bic.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	4995      	ldr	r1, [pc, #596]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bd6:	4b90      	ldr	r3, [pc, #576]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	498c      	ldr	r1, [pc, #560]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bf8:	4b87      	ldr	r3, [pc, #540]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4984      	ldr	r1, [pc, #528]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	497b      	ldr	r1, [pc, #492]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c3c:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	4973      	ldr	r1, [pc, #460]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c5e:	4b6e      	ldr	r3, [pc, #440]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	496a      	ldr	r1, [pc, #424]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c80:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4962      	ldr	r1, [pc, #392]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	4959      	ldr	r1, [pc, #356]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cc4:	4b54      	ldr	r3, [pc, #336]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	4951      	ldr	r1, [pc, #324]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce6:	4b4c      	ldr	r3, [pc, #304]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4948      	ldr	r1, [pc, #288]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d015      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d08:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4940      	ldr	r1, [pc, #256]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d26:	d105      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d28:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a3a      	ldr	r2, [pc, #232]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d40:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	4932      	ldr	r1, [pc, #200]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d60:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4924      	ldr	r1, [pc, #144]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	4916      	ldr	r1, [pc, #88]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d019      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e06:	d109      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a02      	ldr	r2, [pc, #8]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e12:	60d3      	str	r3, [r2, #12]
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	4926      	ldr	r1, [pc, #152]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e48:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	4918      	ldr	r1, [pc, #96]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	490a      	ldr	r1, [pc, #40]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ec4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e042      	b.n	8004f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fc f89d 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2224      	movs	r2, #36	; 0x24
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 ff56 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc57 	bl	80057d8 <UART_SetConfig>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01b      	b.n	8004f6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 ffd5 	bl	8005f14 <UART_CheckIdleState>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d17b      	bne.n	8005086 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_UART_Transmit+0x26>
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e074      	b.n	8005088 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fae:	f7fc fad9 	bl	8001564 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d108      	bne.n	8004fe0 <HAL_UART_Transmit+0x6c>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e003      	b.n	8004fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe8:	e030      	b.n	800504c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f001 f837 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e03d      	b.n	8005088 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	3302      	adds	r3, #2
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e007      	b.n	800503a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1c8      	bne.n	8004fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f001 f800 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e006      	b.n	8005088 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d137      	bne.n	8005118 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_UART_Receive_DMA+0x24>
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e030      	b.n	800511a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_UART_Receive_DMA+0x94>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01f      	beq.n	8005108 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	613b      	str	r3, [r7, #16]
   return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	6a3a      	ldr	r2, [r7, #32]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	61bb      	str	r3, [r7, #24]
   return(result);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f001 f818 	bl	8006144 <UART_Start_Receive_DMA>
 8005114:	4603      	mov	r3, r0
 8005116:	e000      	b.n	800511a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	; 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40008000 	.word	0x40008000

08005128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0ba      	sub	sp, #232	; 0xe8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800514e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005152:	f640 030f 	movw	r3, #2063	; 0x80f
 8005156:	4013      	ands	r3, r2
 8005158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800515c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11b      	bne.n	800519c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800517c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 82e3 	beq.w	8005758 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
      }
      return;
 800519a:	e2dd      	b.n	8005758 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800519c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8123 	beq.w	80053ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051aa:	4b8d      	ldr	r3, [pc, #564]	; (80053e0 <HAL_UART_IRQHandler+0x2b8>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051b6:	4b8b      	ldr	r3, [pc, #556]	; (80053e4 <HAL_UART_IRQHandler+0x2bc>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8116 	beq.w	80053ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_UART_IRQHandler+0xc8>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d011      	beq.n	8005220 <HAL_UART_IRQHandler+0xf8>
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00b      	beq.n	8005220 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2202      	movs	r2, #2
 800520e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <HAL_UART_IRQHandler+0x128>
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2204      	movs	r2, #4
 800523e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f043 0202 	orr.w	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005268:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800526c:	4b5c      	ldr	r3, [pc, #368]	; (80053e0 <HAL_UART_IRQHandler+0x2b8>)
 800526e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005294:	2b00      	cmp	r3, #0
 8005296:	d012      	beq.n	80052be <HAL_UART_IRQHandler+0x196>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8249 	beq.w	800575c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d013      	beq.n	80052fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d105      	bne.n	80052ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800531a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d054      	beq.n	80053cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fff5 	bl	8006312 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d146      	bne.n	80053c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800534c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800536e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800537a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1d9      	bne.n	8005336 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005388:	2b00      	cmp	r3, #0
 800538a:	d017      	beq.n	80053bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_UART_IRQHandler+0x2c0>)
 8005394:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539c:	4618      	mov	r0, r3
 800539e:	f7fc fb9b 	bl	8001ad8 <HAL_DMA_Abort_IT>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053b6:	4610      	mov	r0, r2
 80053b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	e00f      	b.n	80053dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9f5 	bl	80057ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	e00b      	b.n	80053dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9f1 	bl	80057ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ca:	e007      	b.n	80053dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9ed 	bl	80057ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053da:	e1bf      	b.n	800575c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	bf00      	nop
    return;
 80053de:	e1bd      	b.n	800575c <HAL_UART_IRQHandler+0x634>
 80053e0:	10000001 	.word	0x10000001
 80053e4:	04000120 	.word	0x04000120
 80053e8:	080065c9 	.word	0x080065c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 8153 	bne.w	800569c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 814c 	beq.w	800569c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8145 	beq.w	800569c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	f040 80bb 	bne.w	80055a0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 818f 	beq.w	8005760 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800544c:	429a      	cmp	r2, r3
 800544e:	f080 8187 	bcs.w	8005760 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 8087 	bne.w	800557e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800549a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800549e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1da      	bne.n	8005470 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e1      	bne.n	80054ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800551a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800551c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e3      	bne.n	80054f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800554a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554c:	f023 0310 	bic.w	r3, r3, #16
 8005550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800555e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800556c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e4      	bne.n	800553c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005578:	4618      	mov	r0, r3
 800557a:	f7fc fa54 	bl	8001a26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005590:	b29b      	uxth	r3, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	b29b      	uxth	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f911 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800559e:	e0df      	b.n	8005760 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80d1 	beq.w	8005764 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80055c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80cc 	beq.w	8005764 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ee:	647b      	str	r3, [r7, #68]	; 0x44
 80055f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e4      	bne.n	80055cc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	623b      	str	r3, [r7, #32]
   return(result);
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800562a:	633a      	str	r2, [r7, #48]	; 0x30
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e1      	bne.n	8005602 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	617b      	str	r3, [r7, #20]
   return(result);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e4      	bne.n	8005652 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800568e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f893 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800569a:	e063      	b.n	8005764 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800569c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00e      	beq.n	80056c6 <HAL_UART_IRQHandler+0x59e>
 80056a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 ffc3 	bl	800664a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056c4:	e051      	b.n	800576a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d014      	beq.n	80056fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d03a      	beq.n	8005768 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
    }
    return;
 80056fa:	e035      	b.n	8005768 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <HAL_UART_IRQHandler+0x5f4>
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 ff6d 	bl	80065f4 <UART_EndTransmit_IT>
    return;
 800571a:	e026      	b.n	800576a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_UART_IRQHandler+0x614>
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 ff9c 	bl	8006672 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800573a:	e016      	b.n	800576a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <HAL_UART_IRQHandler+0x642>
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0c      	bge.n	800576a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 ff84 	bl	800665e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005756:	e008      	b.n	800576a <HAL_UART_IRQHandler+0x642>
      return;
 8005758:	bf00      	nop
 800575a:	e006      	b.n	800576a <HAL_UART_IRQHandler+0x642>
    return;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <HAL_UART_IRQHandler+0x642>
      return;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_UART_IRQHandler+0x642>
      return;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_UART_IRQHandler+0x642>
    return;
 8005768:	bf00      	nop
  }
}
 800576a:	37e8      	adds	r7, #232	; 0xe8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057dc:	b08c      	sub	sp, #48	; 0x30
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4baa      	ldr	r3, [pc, #680]	; (8005ab0 <UART_SetConfig+0x2d8>)
 8005808:	4013      	ands	r3, r2
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005810:	430b      	orrs	r3, r1
 8005812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a9f      	ldr	r2, [pc, #636]	; (8005ab4 <UART_SetConfig+0x2dc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005840:	4313      	orrs	r3, r2
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800584e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005858:	430b      	orrs	r3, r1
 800585a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f023 010f 	bic.w	r1, r3, #15
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a90      	ldr	r2, [pc, #576]	; (8005ab8 <UART_SetConfig+0x2e0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d125      	bne.n	80058c8 <UART_SetConfig+0xf0>
 800587c:	4b8f      	ldr	r3, [pc, #572]	; (8005abc <UART_SetConfig+0x2e4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b03      	cmp	r3, #3
 8005888:	d81a      	bhi.n	80058c0 <UART_SetConfig+0xe8>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0xb8>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058b1 	.word	0x080058b1
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e116      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ae:	e112      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e10e      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e10a      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e106      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7c      	ldr	r2, [pc, #496]	; (8005ac0 <UART_SetConfig+0x2e8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d138      	bne.n	8005944 <UART_SetConfig+0x16c>
 80058d2:	4b7a      	ldr	r3, [pc, #488]	; (8005abc <UART_SetConfig+0x2e4>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d82d      	bhi.n	800593c <UART_SetConfig+0x164>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x110>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	0800593d 	.word	0x0800593d
 80058f0:	0800593d 	.word	0x0800593d
 80058f4:	0800593d 	.word	0x0800593d
 80058f8:	0800592d 	.word	0x0800592d
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	0800593d 	.word	0x0800593d
 8005904:	0800593d 	.word	0x0800593d
 8005908:	08005925 	.word	0x08005925
 800590c:	0800593d 	.word	0x0800593d
 8005910:	0800593d 	.word	0x0800593d
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005935 	.word	0x08005935
 800591c:	2300      	movs	r3, #0
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e0d8      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005924:	2302      	movs	r3, #2
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592a:	e0d4      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e0d0      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593a:	e0cc      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005942:	e0c8      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a5e      	ldr	r2, [pc, #376]	; (8005ac4 <UART_SetConfig+0x2ec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d125      	bne.n	800599a <UART_SetConfig+0x1c2>
 800594e:	4b5b      	ldr	r3, [pc, #364]	; (8005abc <UART_SetConfig+0x2e4>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005958:	2b30      	cmp	r3, #48	; 0x30
 800595a:	d016      	beq.n	800598a <UART_SetConfig+0x1b2>
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d818      	bhi.n	8005992 <UART_SetConfig+0x1ba>
 8005960:	2b20      	cmp	r3, #32
 8005962:	d00a      	beq.n	800597a <UART_SetConfig+0x1a2>
 8005964:	2b20      	cmp	r3, #32
 8005966:	d814      	bhi.n	8005992 <UART_SetConfig+0x1ba>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <UART_SetConfig+0x19a>
 800596c:	2b10      	cmp	r3, #16
 800596e:	d008      	beq.n	8005982 <UART_SetConfig+0x1aa>
 8005970:	e00f      	b.n	8005992 <UART_SetConfig+0x1ba>
 8005972:	2300      	movs	r3, #0
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005978:	e0ad      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 800597a:	2302      	movs	r3, #2
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005980:	e0a9      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005982:	2304      	movs	r3, #4
 8005984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005988:	e0a5      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 800598a:	2308      	movs	r3, #8
 800598c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005990:	e0a1      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005992:	2310      	movs	r3, #16
 8005994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005998:	e09d      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4a      	ldr	r2, [pc, #296]	; (8005ac8 <UART_SetConfig+0x2f0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d125      	bne.n	80059f0 <UART_SetConfig+0x218>
 80059a4:	4b45      	ldr	r3, [pc, #276]	; (8005abc <UART_SetConfig+0x2e4>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059ae:	2bc0      	cmp	r3, #192	; 0xc0
 80059b0:	d016      	beq.n	80059e0 <UART_SetConfig+0x208>
 80059b2:	2bc0      	cmp	r3, #192	; 0xc0
 80059b4:	d818      	bhi.n	80059e8 <UART_SetConfig+0x210>
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d00a      	beq.n	80059d0 <UART_SetConfig+0x1f8>
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d814      	bhi.n	80059e8 <UART_SetConfig+0x210>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <UART_SetConfig+0x1f0>
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d008      	beq.n	80059d8 <UART_SetConfig+0x200>
 80059c6:	e00f      	b.n	80059e8 <UART_SetConfig+0x210>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e082      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e07e      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059de:	e07a      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e076      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e072      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a35      	ldr	r2, [pc, #212]	; (8005acc <UART_SetConfig+0x2f4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d12a      	bne.n	8005a50 <UART_SetConfig+0x278>
 80059fa:	4b30      	ldr	r3, [pc, #192]	; (8005abc <UART_SetConfig+0x2e4>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a08:	d01a      	beq.n	8005a40 <UART_SetConfig+0x268>
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0x270>
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d00c      	beq.n	8005a30 <UART_SetConfig+0x258>
 8005a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1a:	d815      	bhi.n	8005a48 <UART_SetConfig+0x270>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <UART_SetConfig+0x250>
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x260>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x270>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e052      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e04e      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e04a      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e046      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e042      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <UART_SetConfig+0x2dc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d13a      	bne.n	8005ad0 <UART_SetConfig+0x2f8>
 8005a5a:	4b18      	ldr	r3, [pc, #96]	; (8005abc <UART_SetConfig+0x2e4>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a68:	d01a      	beq.n	8005aa0 <UART_SetConfig+0x2c8>
 8005a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a6e:	d81b      	bhi.n	8005aa8 <UART_SetConfig+0x2d0>
 8005a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a74:	d00c      	beq.n	8005a90 <UART_SetConfig+0x2b8>
 8005a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7a:	d815      	bhi.n	8005aa8 <UART_SetConfig+0x2d0>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <UART_SetConfig+0x2b0>
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d008      	beq.n	8005a98 <UART_SetConfig+0x2c0>
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x2d0>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e022      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e01e      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e01a      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e016      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e012      	b.n	8005ad6 <UART_SetConfig+0x2fe>
 8005ab0:	cfff69f3 	.word	0xcfff69f3
 8005ab4:	40008000 	.word	0x40008000
 8005ab8:	40013800 	.word	0x40013800
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40004400 	.word	0x40004400
 8005ac4:	40004800 	.word	0x40004800
 8005ac8:	40004c00 	.word	0x40004c00
 8005acc:	40005000 	.word	0x40005000
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4aae      	ldr	r2, [pc, #696]	; (8005d94 <UART_SetConfig+0x5bc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	f040 8097 	bne.w	8005c10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d823      	bhi.n	8005b32 <UART_SetConfig+0x35a>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0x318>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b33 	.word	0x08005b33
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b23 	.word	0x08005b23
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b33 	.word	0x08005b33
 8005b10:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b14:	f7fe ff1e 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b9e      	ldr	r3, [pc, #632]	; (8005d98 <UART_SetConfig+0x5c0>)
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe fea9 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8130 	beq.w	8005da6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	4a94      	ldr	r2, [pc, #592]	; (8005d9c <UART_SetConfig+0x5c4>)
 8005b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d305      	bcc.n	8005b76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b7c:	e113      	b.n	8005da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2200      	movs	r2, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	60fa      	str	r2, [r7, #12]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	4a84      	ldr	r2, [pc, #528]	; (8005d9c <UART_SetConfig+0x5c4>)
 8005b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2200      	movs	r2, #0
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ba0:	f7fa fb42 	bl	8000228 <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	020b      	lsls	r3, r1, #8
 8005bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bba:	0202      	lsls	r2, r0, #8
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	6849      	ldr	r1, [r1, #4]
 8005bc0:	0849      	lsrs	r1, r1, #1
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	eb12 0804 	adds.w	r8, r2, r4
 8005bcc:	eb43 0905 	adc.w	r9, r3, r5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	469a      	mov	sl, r3
 8005bd8:	4693      	mov	fp, r2
 8005bda:	4652      	mov	r2, sl
 8005bdc:	465b      	mov	r3, fp
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa fb21 	bl	8000228 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4613      	mov	r3, r2
 8005bec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf4:	d308      	bcc.n	8005c08 <UART_SetConfig+0x430>
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfc:	d204      	bcs.n	8005c08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a3a      	ldr	r2, [r7, #32]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e0ce      	b.n	8005da6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c0e:	e0ca      	b.n	8005da6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c18:	d166      	bne.n	8005ce8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d827      	bhi.n	8005c72 <UART_SetConfig+0x49a>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x450>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fe fe82 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c52:	e014      	b.n	8005c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7fe fe94 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c5a:	e010      	b.n	8005c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <UART_SetConfig+0x5c0>)
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c60:	e00d      	b.n	8005c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fe fe09 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8005c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c68:	e009      	b.n	8005c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c70:	e005      	b.n	8005c7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8090 	beq.w	8005da6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	4a44      	ldr	r2, [pc, #272]	; (8005d9c <UART_SetConfig+0x5c4>)
 8005c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c98:	005a      	lsls	r2, r3, #1
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	441a      	add	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d916      	bls.n	8005ce0 <UART_SetConfig+0x508>
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d212      	bcs.n	8005ce0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f023 030f 	bic.w	r3, r3, #15
 8005cc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	8bfb      	ldrh	r3, [r7, #30]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	8bfa      	ldrh	r2, [r7, #30]
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	e062      	b.n	8005da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ce6:	e05e      	b.n	8005da6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d828      	bhi.n	8005d42 <UART_SetConfig+0x56a>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x520>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	08005d43 	.word	0x08005d43
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d43 	.word	0x08005d43
 8005d10:	08005d43 	.word	0x08005d43
 8005d14:	08005d43 	.word	0x08005d43
 8005d18:	08005d3b 	.word	0x08005d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7fe fe1a 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d22:	e014      	b.n	8005d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d24:	f7fe fe2c 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8005d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d2a:	e010      	b.n	8005d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <UART_SetConfig+0x5c0>)
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d30:	e00d      	b.n	8005d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d32:	f7fe fda1 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d38:	e009      	b.n	8005d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d40:	e005      	b.n	8005d4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d028      	beq.n	8005da6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <UART_SetConfig+0x5c4>)
 8005d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	441a      	add	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d910      	bls.n	8005da0 <UART_SetConfig+0x5c8>
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d20c      	bcs.n	8005da0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	e009      	b.n	8005da6 <UART_SetConfig+0x5ce>
 8005d92:	bf00      	nop
 8005d94:	40008000 	.word	0x40008000
 8005d98:	00f42400 	.word	0x00f42400
 8005d9c:	08006968 	.word	0x08006968
      }
      else
      {
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3730      	adds	r7, #48	; 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d10a      	bne.n	8005ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b098      	sub	sp, #96	; 0x60
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f24:	f7fb fb1e 	bl	8001564 <HAL_GetTick>
 8005f28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d12f      	bne.n	8005f98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f88e 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d022      	beq.n	8005f98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
 8005f72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e6      	bne.n	8005f52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e063      	b.n	8006060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d149      	bne.n	800603a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f857 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d03c      	beq.n	800603a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e6      	bne.n	8005fc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	60fb      	str	r3, [r7, #12]
   return(result);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	64bb      	str	r3, [r7, #72]	; 0x48
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006012:	61fa      	str	r2, [r7, #28]
 8006014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	69b9      	ldr	r1, [r7, #24]
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	617b      	str	r3, [r7, #20]
   return(result);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e012      	b.n	8006060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3758      	adds	r7, #88	; 0x58
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	e04f      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d04b      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006082:	f7fb fa6f 	bl	8001564 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	429a      	cmp	r2, r3
 8006090:	d302      	bcc.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e04e      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d037      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d034      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d031      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d110      	bne.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2208      	movs	r2, #8
 80060ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f920 	bl	8006312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2208      	movs	r2, #8
 80060d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e029      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f4:	d111      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f906 	bl	8006312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e00f      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	429a      	cmp	r2, r3
 8006136:	d0a0      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b096      	sub	sp, #88	; 0x58
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2222      	movs	r2, #34	; 0x22
 800616c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d02d      	beq.n	80061d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006180:	4a40      	ldr	r2, [pc, #256]	; (8006284 <UART_Start_Receive_DMA+0x140>)
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618a:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <UART_Start_Receive_DMA+0x144>)
 800618c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006194:	4a3d      	ldr	r2, [pc, #244]	; (800628c <UART_Start_Receive_DMA+0x148>)
 8006196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800619e:	2200      	movs	r2, #0
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	4619      	mov	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	461a      	mov	r2, r3
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	f7fb fbba 	bl	8001930 <HAL_DMA_Start_IT>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2210      	movs	r2, #16
 80061c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e051      	b.n	800627a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d018      	beq.n	8006210 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f2:	657b      	str	r3, [r7, #84]	; 0x54
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80061fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800620a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e6      	bne.n	80061de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006230:	637a      	str	r2, [r7, #52]	; 0x34
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	613b      	str	r3, [r7, #16]
   return(result);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006264:	623a      	str	r2, [r7, #32]
 8006266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	61bb      	str	r3, [r7, #24]
   return(result);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3758      	adds	r7, #88	; 0x58
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	080063df 	.word	0x080063df
 8006288:	0800650b 	.word	0x0800650b
 800628c:	08006549 	.word	0x08006549

08006290 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b08f      	sub	sp, #60	; 0x3c
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	61ba      	str	r2, [r7, #24]
 80062ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6979      	ldr	r1, [r7, #20]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	613b      	str	r3, [r7, #16]
   return(result);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006306:	bf00      	nop
 8006308:	373c      	adds	r7, #60	; 0x3c
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006312:	b480      	push	{r7}
 8006314:	b095      	sub	sp, #84	; 0x54
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006338:	643b      	str	r3, [r7, #64]	; 0x40
 800633a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800633e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e6      	bne.n	800631a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	61fb      	str	r3, [r7, #28]
   return(result);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	64bb      	str	r3, [r7, #72]	; 0x48
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e3      	bne.n	800634c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d118      	bne.n	80063be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	60bb      	str	r3, [r7, #8]
   return(result);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 0310 	bic.w	r3, r3, #16
 80063a0:	647b      	str	r3, [r7, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6979      	ldr	r1, [r7, #20]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	613b      	str	r3, [r7, #16]
   return(result);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063d2:	bf00      	nop
 80063d4:	3754      	adds	r7, #84	; 0x54
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b09c      	sub	sp, #112	; 0x70
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d171      	bne.n	80064de <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006416:	66bb      	str	r3, [r7, #104]	; 0x68
 8006418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006420:	65bb      	str	r3, [r7, #88]	; 0x58
 8006422:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800642e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	667b      	str	r3, [r7, #100]	; 0x64
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006454:	647a      	str	r2, [r7, #68]	; 0x44
 8006456:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	663b      	str	r3, [r7, #96]	; 0x60
 8006480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006488:	633a      	str	r2, [r7, #48]	; 0x30
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800649c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649e:	2220      	movs	r2, #32
 80064a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d118      	bne.n	80064de <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f023 0310 	bic.w	r3, r3, #16
 80064c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	69b9      	ldr	r1, [r7, #24]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	617b      	str	r3, [r7, #20]
   return(result);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e6      	bne.n	80064ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e0:	2200      	movs	r2, #0
 80064e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d107      	bne.n	80064fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f2:	4619      	mov	r1, r3
 80064f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064f6:	f7ff f963 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064fa:	e002      	b.n	8006502 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064fe:	f7ff f941 	bl	8005784 <HAL_UART_RxCpltCallback>
}
 8006502:	bf00      	nop
 8006504:	3770      	adds	r7, #112	; 0x70
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	2b01      	cmp	r3, #1
 8006524:	d109      	bne.n	800653a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff f944 	bl	80057c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006538:	e002      	b.n	8006540 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff f92c 	bl	8005798 <HAL_UART_RxHalfCpltCallback>
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006564:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d109      	bne.n	8006588 <UART_DMAError+0x40>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b21      	cmp	r3, #33	; 0x21
 8006578:	d106      	bne.n	8006588 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006582:	6978      	ldr	r0, [r7, #20]
 8006584:	f7ff fe84 	bl	8006290 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d109      	bne.n	80065aa <UART_DMAError+0x62>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b22      	cmp	r3, #34	; 0x22
 800659a:	d106      	bne.n	80065aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80065a4:	6978      	ldr	r0, [r7, #20]
 80065a6:	f7ff feb4 	bl	8006312 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	f043 0210 	orr.w	r2, r3, #16
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f7ff f8f6 	bl	80057ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff f8e0 	bl	80057ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	60bb      	str	r3, [r7, #8]
   return(result);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e6      	bne.n	80065fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff f897 	bl	8005770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006642:	bf00      	nop
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UARTEx_DisableFifoMode+0x16>
 8006698:	2302      	movs	r3, #2
 800669a:	e027      	b.n	80066ec <HAL_UARTEx_DisableFifoMode+0x66>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e02d      	b.n	800676c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f84f 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e02d      	b.n	80067e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	; 0x24
 8006798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f811 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d108      	bne.n	8006812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006810:	e031      	b.n	8006876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006812:	2308      	movs	r3, #8
 8006814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006816:	2308      	movs	r3, #8
 8006818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	0e5b      	lsrs	r3, r3, #25
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	0f5b      	lsrs	r3, r3, #29
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	7b3a      	ldrb	r2, [r7, #12]
 800683e:	4911      	ldr	r1, [pc, #68]	; (8006884 <UARTEx_SetNbDataToProcess+0x94>)
 8006840:	5c8a      	ldrb	r2, [r1, r2]
 8006842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006846:	7b3a      	ldrb	r2, [r7, #12]
 8006848:	490f      	ldr	r1, [pc, #60]	; (8006888 <UARTEx_SetNbDataToProcess+0x98>)
 800684a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800684c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	7b7a      	ldrb	r2, [r7, #13]
 800685c:	4909      	ldr	r1, [pc, #36]	; (8006884 <UARTEx_SetNbDataToProcess+0x94>)
 800685e:	5c8a      	ldrb	r2, [r1, r2]
 8006860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006864:	7b7a      	ldrb	r2, [r7, #13]
 8006866:	4908      	ldr	r1, [pc, #32]	; (8006888 <UARTEx_SetNbDataToProcess+0x98>)
 8006868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686a:	fb93 f3f2 	sdiv	r3, r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	08006980 	.word	0x08006980
 8006888:	08006988 	.word	0x08006988

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4d0d      	ldr	r5, [pc, #52]	; (80068d4 <__libc_init_array+0x38>)
 80068a0:	4c0d      	ldr	r4, [pc, #52]	; (80068d8 <__libc_init_array+0x3c>)
 80068a2:	1b64      	subs	r4, r4, r5
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	2600      	movs	r6, #0
 80068a8:	42a6      	cmp	r6, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	4d0b      	ldr	r5, [pc, #44]	; (80068dc <__libc_init_array+0x40>)
 80068ae:	4c0c      	ldr	r4, [pc, #48]	; (80068e0 <__libc_init_array+0x44>)
 80068b0:	f000 f820 	bl	80068f4 <_init>
 80068b4:	1b64      	subs	r4, r4, r5
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	2600      	movs	r6, #0
 80068ba:	42a6      	cmp	r6, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c4:	4798      	blx	r3
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ce:	4798      	blx	r3
 80068d0:	3601      	adds	r6, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	08006998 	.word	0x08006998
 80068d8:	08006998 	.word	0x08006998
 80068dc:	08006998 	.word	0x08006998
 80068e0:	0800699c 	.word	0x0800699c

080068e4 <strcpy>:
 80068e4:	4603      	mov	r3, r0
 80068e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ea:	f803 2b01 	strb.w	r2, [r3], #1
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	d1f9      	bne.n	80068e6 <strcpy+0x2>
 80068f2:	4770      	bx	lr

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
