
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a00  08006a00  000202f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a08  08006a08  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08006a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200002f0  08006d00  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006d00  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f45  00000000  00000000  00020363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  000312a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000334f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025473  00000000  00000000  00034cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011673  00000000  00000000  0005a139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3d3  00000000  00000000  0006b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003710  00000000  00000000  00157b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f0 	.word	0x200002f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006964 	.word	0x08006964

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002f4 	.word	0x200002f4
 8000214:	08006964 	.word	0x08006964

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fff7 	bl	800151a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 fa72 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fbe8 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fb94 	bl	8000c60 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 faf8 	bl	8000b2c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 fab6 	bl	8000aac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fb40 	bl	8000bc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f001 f859 	bl	80015fc <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // STM32 Part //
	  Dummy();
 800054a:	f000 fcaf 	bl	8000eac <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 800054e:	2202      	movs	r2, #2
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <main+0x278>)
 8000552:	4893      	ldr	r0, [pc, #588]	; (80007a0 <main+0x27c>)
 8000554:	f004 fddc 	bl	8005110 <HAL_UART_Receive_DMA>
	if(A==8){
 8000558:	4b92      	ldr	r3, [pc, #584]	; (80007a4 <main+0x280>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d112      	bne.n	8000586 <main+0x62>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 8000560:	4891      	ldr	r0, [pc, #580]	; (80007a8 <main+0x284>)
 8000562:	f7ff fe59 	bl	8000218 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	2304      	movs	r3, #4
 800056c:	498e      	ldr	r1, [pc, #568]	; (80007a8 <main+0x284>)
 800056e:	488c      	ldr	r0, [pc, #560]	; (80007a0 <main+0x27c>)
 8000570:	f004 fd40 	bl	8004ff4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 8000574:	2308      	movs	r3, #8
 8000576:	221b      	movs	r2, #27
 8000578:	498c      	ldr	r1, [pc, #560]	; (80007ac <main+0x288>)
 800057a:	4889      	ldr	r0, [pc, #548]	; (80007a0 <main+0x27c>)
 800057c:	f004 fd3a 	bl	8004ff4 <HAL_UART_Transmit>
	  A=1;
 8000580:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <main+0x280>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <main+0x280>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <main+0x96>
			HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f001 f833 	bl	80015fc <HAL_Delay>

			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 8000596:	230a      	movs	r3, #10
 8000598:	2264      	movs	r2, #100	; 0x64
 800059a:	4985      	ldr	r1, [pc, #532]	; (80007b0 <main+0x28c>)
 800059c:	4880      	ldr	r0, [pc, #512]	; (80007a0 <main+0x27c>)
 800059e:	f004 fd29 	bl	8004ff4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2228      	movs	r2, #40	; 0x28
 80005a6:	4983      	ldr	r1, [pc, #524]	; (80007b4 <main+0x290>)
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x27c>)
 80005aa:	f004 fd23 	bl	8004ff4 <HAL_UART_Transmit>
			A = 0;
 80005ae:	4b7d      	ldr	r3, [pc, #500]	; (80007a4 <main+0x280>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005b4:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <main+0x294>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005ba:	4b7f      	ldr	r3, [pc, #508]	; (80007b8 <main+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d145      	bne.n	800064e <main+0x12a>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <main+0x278>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b79      	cmp	r3, #121	; 0x79
 80005c8:	d120      	bne.n	800060c <main+0xe8>
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <main+0x278>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b0d      	cmp	r3, #13
 80005d0:	d11c      	bne.n	800060c <main+0xe8>
 80005d2:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x294>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d118      	bne.n	800060c <main+0xe8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005da:	230a      	movs	r3, #10
 80005dc:	221e      	movs	r2, #30
 80005de:	4977      	ldr	r1, [pc, #476]	; (80007bc <main+0x298>)
 80005e0:	486f      	ldr	r0, [pc, #444]	; (80007a0 <main+0x27c>)
 80005e2:	f004 fd07 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005e6:	2308      	movs	r3, #8
 80005e8:	220c      	movs	r2, #12
 80005ea:	4975      	ldr	r1, [pc, #468]	; (80007c0 <main+0x29c>)
 80005ec:	486c      	ldr	r0, [pc, #432]	; (80007a0 <main+0x27c>)
 80005ee:	f004 fd01 	bl	8004ff4 <HAL_UART_Transmit>
				s1 =+ 1;
 80005f2:	4b74      	ldr	r3, [pc, #464]	; (80007c4 <main+0x2a0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
				A = 2;
 80005f8:	4b6a      	ldr	r3, [pc, #424]	; (80007a4 <main+0x280>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <main+0x278>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <main+0x278>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
 800060a:	e020      	b.n	800064e <main+0x12a>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x278>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b6e      	cmp	r3, #110	; 0x6e
 8000612:	d11c      	bne.n	800064e <main+0x12a>
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <main+0x278>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	d118      	bne.n	800064e <main+0x12a>
 800061c:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <main+0x294>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d114      	bne.n	800064e <main+0x12a>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000624:	230a      	movs	r3, #10
 8000626:	221e      	movs	r2, #30
 8000628:	4967      	ldr	r1, [pc, #412]	; (80007c8 <main+0x2a4>)
 800062a:	485d      	ldr	r0, [pc, #372]	; (80007a0 <main+0x27c>)
 800062c:	f004 fce2 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000630:	2308      	movs	r3, #8
 8000632:	220c      	movs	r2, #12
 8000634:	4962      	ldr	r1, [pc, #392]	; (80007c0 <main+0x29c>)
 8000636:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x27c>)
 8000638:	f004 fcdc 	bl	8004ff4 <HAL_UART_Transmit>
				A = 2;
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <main+0x280>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000642:	4b56      	ldr	r3, [pc, #344]	; (800079c <main+0x278>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <main+0x278>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 800064e:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <main+0x280>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d115      	bne.n	8000682 <main+0x15e>
			HAL_Delay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f000 ffcf 	bl	80015fc <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 800065e:	230a      	movs	r3, #10
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	495a      	ldr	r1, [pc, #360]	; (80007cc <main+0x2a8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <main+0x27c>)
 8000666:	f004 fcc5 	bl	8004ff4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800066a:	230a      	movs	r3, #10
 800066c:	2228      	movs	r2, #40	; 0x28
 800066e:	4951      	ldr	r1, [pc, #324]	; (80007b4 <main+0x290>)
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <main+0x27c>)
 8000672:	f004 fcbf 	bl	8004ff4 <HAL_UART_Transmit>
			A = 0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x280>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
			mode = 2;
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <main+0x294>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <main+0x294>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d145      	bne.n	8000716 <main+0x1f2>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x278>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b79      	cmp	r3, #121	; 0x79
 8000690:	d11d      	bne.n	80006ce <main+0x1aa>
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x278>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d119      	bne.n	80006ce <main+0x1aa>
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d115      	bne.n	80006ce <main+0x1aa>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80006a2:	230a      	movs	r3, #10
 80006a4:	221e      	movs	r2, #30
 80006a6:	4945      	ldr	r1, [pc, #276]	; (80007bc <main+0x298>)
 80006a8:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x27c>)
 80006aa:	f004 fca3 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006ae:	2308      	movs	r3, #8
 80006b0:	220c      	movs	r2, #12
 80006b2:	4943      	ldr	r1, [pc, #268]	; (80007c0 <main+0x29c>)
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x27c>)
 80006b6:	f004 fc9d 	bl	8004ff4 <HAL_UART_Transmit>
				A = 3;
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x280>)
 80006bc:	2203      	movs	r2, #3
 80006be:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <main+0x278>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x278>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	705a      	strb	r2, [r3, #1]
 80006cc:	e023      	b.n	8000716 <main+0x1f2>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <main+0x278>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b6e      	cmp	r3, #110	; 0x6e
 80006d4:	d11f      	bne.n	8000716 <main+0x1f2>
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x278>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d11b      	bne.n	8000716 <main+0x1f2>
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d117      	bne.n	8000716 <main+0x1f2>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006e6:	230a      	movs	r3, #10
 80006e8:	221e      	movs	r2, #30
 80006ea:	4937      	ldr	r1, [pc, #220]	; (80007c8 <main+0x2a4>)
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x27c>)
 80006ee:	f004 fc81 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006f2:	2308      	movs	r3, #8
 80006f4:	220c      	movs	r2, #12
 80006f6:	4932      	ldr	r1, [pc, #200]	; (80007c0 <main+0x29c>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <main+0x27c>)
 80006fa:	f004 fc7b 	bl	8004ff4 <HAL_UART_Transmit>
				s2 =+ 1;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0x2ac>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				A = 3;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0x280>)
 8000706:	2203      	movs	r2, #3
 8000708:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0x278>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x278>)
 8000712:	2200      	movs	r2, #0
 8000714:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x280>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d115      	bne.n	800074a <main+0x226>
			HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 ff6b 	bl	80015fc <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000726:	230a      	movs	r3, #10
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	492a      	ldr	r1, [pc, #168]	; (80007d4 <main+0x2b0>)
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x27c>)
 800072e:	f004 fc61 	bl	8004ff4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000732:	230a      	movs	r3, #10
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	491f      	ldr	r1, [pc, #124]	; (80007b4 <main+0x290>)
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x27c>)
 800073a:	f004 fc5b 	bl	8004ff4 <HAL_UART_Transmit>
			A = 0;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x280>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x294>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x294>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d165      	bne.n	800081e <main+0x2fa>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x278>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b79      	cmp	r3, #121	; 0x79
 8000758:	d140      	bne.n	80007dc <main+0x2b8>
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x278>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d13c      	bne.n	80007dc <main+0x2b8>
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x294>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d138      	bne.n	80007dc <main+0x2b8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800076a:	230a      	movs	r3, #10
 800076c:	221e      	movs	r2, #30
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <main+0x298>)
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <main+0x27c>)
 8000772:	f004 fc3f 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000776:	2308      	movs	r3, #8
 8000778:	220c      	movs	r2, #12
 800077a:	4911      	ldr	r1, [pc, #68]	; (80007c0 <main+0x29c>)
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x27c>)
 800077e:	f004 fc39 	bl	8004ff4 <HAL_UART_Transmit>
				s3 =+ 1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x2b4>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
				A = 4;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x280>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <main+0x278>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000794:	4b01      	ldr	r3, [pc, #4]	; (800079c <main+0x278>)
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
 800079a:	e040      	b.n	800081e <main+0x2fa>
 800079c:	200006c8 	.word	0x200006c8
 80007a0:	20000420 	.word	0x20000420
 80007a4:	200002dc 	.word	0x200002dc
 80007a8:	20000000 	.word	0x20000000
 80007ac:	0800697c 	.word	0x0800697c
 80007b0:	20000020 	.word	0x20000020
 80007b4:	2000014c 	.word	0x2000014c
 80007b8:	200006d0 	.word	0x200006d0
 80007bc:	20000174 	.word	0x20000174
 80007c0:	08006998 	.word	0x08006998
 80007c4:	200006ca 	.word	0x200006ca
 80007c8:	20000194 	.word	0x20000194
 80007cc:	20000084 	.word	0x20000084
 80007d0:	200006cb 	.word	0x200006cb
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200006cc 	.word	0x200006cc
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007dc:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <main+0x494>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b6e      	cmp	r3, #110	; 0x6e
 80007e2:	d11c      	bne.n	800081e <main+0x2fa>
 80007e4:	4b74      	ldr	r3, [pc, #464]	; (80009b8 <main+0x494>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	2b0d      	cmp	r3, #13
 80007ea:	d118      	bne.n	800081e <main+0x2fa>
 80007ec:	4b73      	ldr	r3, [pc, #460]	; (80009bc <main+0x498>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d114      	bne.n	800081e <main+0x2fa>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80007f4:	230a      	movs	r3, #10
 80007f6:	221e      	movs	r2, #30
 80007f8:	4971      	ldr	r1, [pc, #452]	; (80009c0 <main+0x49c>)
 80007fa:	4872      	ldr	r0, [pc, #456]	; (80009c4 <main+0x4a0>)
 80007fc:	f004 fbfa 	bl	8004ff4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000800:	2308      	movs	r3, #8
 8000802:	220c      	movs	r2, #12
 8000804:	4970      	ldr	r1, [pc, #448]	; (80009c8 <main+0x4a4>)
 8000806:	486f      	ldr	r0, [pc, #444]	; (80009c4 <main+0x4a0>)
 8000808:	f004 fbf4 	bl	8004ff4 <HAL_UART_Transmit>
				A = 4;
 800080c:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <main+0x4a8>)
 800080e:	2204      	movs	r2, #4
 8000810:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000812:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <main+0x494>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000818:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <main+0x494>)
 800081a:	2200      	movs	r2, #0
 800081c:	705a      	strb	r2, [r3, #1]
			}
		}
//ScoreBoard //
		if(A == 4){
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <main+0x4a8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d11e      	bne.n	8000864 <main+0x340>
			HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fee7 	bl	80015fc <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800082e:	230a      	movs	r3, #10
 8000830:	221e      	movs	r2, #30
 8000832:	4967      	ldr	r1, [pc, #412]	; (80009d0 <main+0x4ac>)
 8000834:	4863      	ldr	r0, [pc, #396]	; (80009c4 <main+0x4a0>)
 8000836:	f004 fbdd 	bl	8004ff4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, ToT2, 50, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	2232      	movs	r2, #50	; 0x32
 800083e:	4965      	ldr	r1, [pc, #404]	; (80009d4 <main+0x4b0>)
 8000840:	4860      	ldr	r0, [pc, #384]	; (80009c4 <main+0x4a0>)
 8000842:	f004 fbd7 	bl	8004ff4 <HAL_UART_Transmit>
			TotalScore = s1+s2+s3;
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <main+0x4b4>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b64      	ldr	r3, [pc, #400]	; (80009dc <main+0x4b8>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <main+0x4bc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <main+0x4c0>)
 800085c:	701a      	strb	r2, [r3, #0]
			A=5;
 800085e:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <main+0x4a8>)
 8000860:	2205      	movs	r2, #5
 8000862:	601a      	str	r2, [r3, #0]
		}
// I2C part //
		if(A == 5){
 8000864:	4b59      	ldr	r3, [pc, #356]	; (80009cc <main+0x4a8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d10c      	bne.n	8000886 <main+0x362>
			HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f000 fec4 	bl	80015fc <HAL_Delay>
			WriteFlag = 1;
 8000874:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <main+0x4c4>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			C = 1;
 800087a:	4b5c      	ldr	r3, [pc, #368]	; (80009ec <main+0x4c8>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
			A=7;
 8000880:	4b52      	ldr	r3, [pc, #328]	; (80009cc <main+0x4a8>)
 8000882:	2207      	movs	r2, #7
 8000884:	601a      	str	r2, [r3, #0]
		}
		if(A == 7){
 8000886:	4b51      	ldr	r3, [pc, #324]	; (80009cc <main+0x4a8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d110      	bne.n	80008b0 <main+0x38c>
			HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 feb3 	bl	80015fc <HAL_Delay>
			ReadFlag = 1;
 8000896:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <main+0x4cc>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 feac 	bl	80015fc <HAL_Delay>
			State = 1;
 80008a4:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <main+0x4d0>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
			A = 9 ;
 80008aa:	4b48      	ldr	r3, [pc, #288]	; (80009cc <main+0x4a8>)
 80008ac:	2209      	movs	r2, #9
 80008ae:	601a      	str	r2, [r3, #0]
//					B = 4;
//					HAL_UART_Transmit(&hlpuart1, S, 50, 10);
//					State = 0;
//					A = 10;
//				}
				if(ReadBack[0] == 1 && A == 9){
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <main+0x4d4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d112      	bne.n	80008de <main+0x3ba>
 80008b8:	4b44      	ldr	r3, [pc, #272]	; (80009cc <main+0x4a8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b09      	cmp	r3, #9
 80008be:	d10e      	bne.n	80008de <main+0x3ba>
					B = 1;
 80008c0:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <main+0x4d8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S1, 50, 10);
 80008c6:	230a      	movs	r3, #10
 80008c8:	2232      	movs	r2, #50	; 0x32
 80008ca:	494d      	ldr	r1, [pc, #308]	; (8000a00 <main+0x4dc>)
 80008cc:	483d      	ldr	r0, [pc, #244]	; (80009c4 <main+0x4a0>)
 80008ce:	f004 fb91 	bl	8004ff4 <HAL_UART_Transmit>
					State = 0;
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <main+0x4d0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
					A = 10;
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <main+0x4a8>)
 80008da:	220a      	movs	r2, #10
 80008dc:	601a      	str	r2, [r3, #0]
				}
				if(ReadBack[0] == 2 && A == 9){
 80008de:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <main+0x4d4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d112      	bne.n	800090c <main+0x3e8>
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <main+0x4a8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	d10e      	bne.n	800090c <main+0x3e8>
					B = 2;
 80008ee:	4b43      	ldr	r3, [pc, #268]	; (80009fc <main+0x4d8>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S2, 50, 10);
 80008f4:	230a      	movs	r3, #10
 80008f6:	2232      	movs	r2, #50	; 0x32
 80008f8:	4942      	ldr	r1, [pc, #264]	; (8000a04 <main+0x4e0>)
 80008fa:	4832      	ldr	r0, [pc, #200]	; (80009c4 <main+0x4a0>)
 80008fc:	f004 fb7a 	bl	8004ff4 <HAL_UART_Transmit>
					State = 0;
 8000900:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <main+0x4d0>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
					A = 10;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <main+0x4a8>)
 8000908:	220a      	movs	r2, #10
 800090a:	601a      	str	r2, [r3, #0]
				}
				if(ReadBack[0] == 3 && A == 9){
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <main+0x4d4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d112      	bne.n	800093a <main+0x416>
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <main+0x4a8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b09      	cmp	r3, #9
 800091a:	d10e      	bne.n	800093a <main+0x416>
					B = 3;
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <main+0x4d8>)
 800091e:	2203      	movs	r2, #3
 8000920:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S3, 50, 10);
 8000922:	230a      	movs	r3, #10
 8000924:	2232      	movs	r2, #50	; 0x32
 8000926:	4938      	ldr	r1, [pc, #224]	; (8000a08 <main+0x4e4>)
 8000928:	4826      	ldr	r0, [pc, #152]	; (80009c4 <main+0x4a0>)
 800092a:	f004 fb63 	bl	8004ff4 <HAL_UART_Transmit>
					State = 0;
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0x4d0>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
					A = 10;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <main+0x4a8>)
 8000936:	220a      	movs	r2, #10
 8000938:	601a      	str	r2, [r3, #0]
				}
				if(ReadBack[0] == 0 && A == 9){
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <main+0x4d4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d112      	bne.n	8000968 <main+0x444>
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <main+0x4a8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b09      	cmp	r3, #9
 8000948:	d10e      	bne.n	8000968 <main+0x444>
					B = 4;
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <main+0x4d8>)
 800094c:	2204      	movs	r2, #4
 800094e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S, 50, 10);
 8000950:	230a      	movs	r3, #10
 8000952:	2232      	movs	r2, #50	; 0x32
 8000954:	492d      	ldr	r1, [pc, #180]	; (8000a0c <main+0x4e8>)
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <main+0x4a0>)
 8000958:	f004 fb4c 	bl	8004ff4 <HAL_UART_Transmit>
					State = 0;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <main+0x4d0>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
					A = 10;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <main+0x4a8>)
 8000964:	220a      	movs	r2, #10
 8000966:	601a      	str	r2, [r3, #0]
				}


				if(State == 0 && B != 0 && A == 10){
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <main+0x4d0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d110      	bne.n	8000992 <main+0x46e>
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0x4d8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <main+0x46e>
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <main+0x4a8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b0a      	cmp	r3, #10
 800097e:	d108      	bne.n	8000992 <main+0x46e>
					HAL_UART_Transmit(&hlpuart1,"YOU ARE NOOB,LOSER UwU.\n\r", 50, 10);
 8000980:	230a      	movs	r3, #10
 8000982:	2232      	movs	r2, #50	; 0x32
 8000984:	4922      	ldr	r1, [pc, #136]	; (8000a10 <main+0x4ec>)
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <main+0x4a0>)
 8000988:	f004 fb34 	bl	8004ff4 <HAL_UART_Transmit>
					State = 9;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <main+0x4d0>)
 800098e:	2209      	movs	r2, #9
 8000990:	601a      	str	r2, [r3, #0]
				}if(State == 9){A=11; break; }
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <main+0x4d0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b09      	cmp	r3, #9
 8000998:	d103      	bne.n	80009a2 <main+0x47e>
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <main+0x4a8>)
 800099c:	220b      	movs	r2, #11
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e006      	b.n	80009b0 <main+0x48c>


  EEPROMWriteExample();
 80009a2:	f000 fa1d 	bl	8000de0 <EEPROMWriteExample>
  EEPROMReadExample(ReadBack, 1);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <main+0x4d4>)
 80009aa:	f000 fa5d 	bl	8000e68 <EEPROMReadExample>
	  Dummy();
 80009ae:	e5cc      	b.n	800054a <main+0x26>
 80009b0:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200006c8 	.word	0x200006c8
 80009bc:	200006d0 	.word	0x200006d0
 80009c0:	20000194 	.word	0x20000194
 80009c4:	20000420 	.word	0x20000420
 80009c8:	08006998 	.word	0x08006998
 80009cc:	200002dc 	.word	0x200002dc
 80009d0:	200001b4 	.word	0x200001b4
 80009d4:	200001d4 	.word	0x200001d4
 80009d8:	200006ca 	.word	0x200006ca
 80009dc:	200006cb 	.word	0x200006cb
 80009e0:	200006cc 	.word	0x200006cc
 80009e4:	200006d4 	.word	0x200006d4
 80009e8:	200006d5 	.word	0x200006d5
 80009ec:	200006d8 	.word	0x200006d8
 80009f0:	200006d6 	.word	0x200006d6
 80009f4:	200006dc 	.word	0x200006dc
 80009f8:	200002d8 	.word	0x200002d8
 80009fc:	200002e0 	.word	0x200002e0
 8000a00:	2000023c 	.word	0x2000023c
 8000a04:	20000270 	.word	0x20000270
 8000a08:	200002a4 	.word	0x200002a4
 8000a0c:	20000208 	.word	0x20000208
 8000a10:	080069a4 	.word	0x080069a4

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2238      	movs	r2, #56	; 0x38
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 ff72 	bl	800690c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f003 fa5c 	bl	8003ef4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a56:	2355      	movs	r3, #85	; 0x55
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 faf6 	bl	800405c <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a76:	f000 fa31 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2104      	movs	r1, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fdf4 	bl	8004680 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a9e:	f000 fa1d 	bl	8000edc <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae8:	f001 fbd1 	bl	800228e <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f9f3 	bl	8000edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000afa:	f003 f963 	bl	8003dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f9ea 	bl	8000edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000b0c:	f003 f9a5 	bl	8003e5a <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f9e1 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000030c 	.word	0x2000030c
 8000b24:	40005400 	.word	0x40005400
 8000b28:	30a0a7fb 	.word	0x30a0a7fb

08000b2c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <MX_LPUART1_UART_Init+0x94>)
 8000b34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b44:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b74:	f004 f9ee 	bl	8004f54 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b7e:	f000 f9ad 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b86:	f005 fdf7 	bl	8006778 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b90:	f000 f9a4 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b98:	f005 fe2c 	bl	80067f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ba2:	f000 f99b 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000ba8:	f005 fdad 	bl	8006706 <HAL_UARTEx_DisableFifoMode>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000bb2:	f000 f993 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000420 	.word	0x20000420
 8000bc0:	40008000 	.word	0x40008000

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MX_USART1_UART_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bdc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c12:	f004 f99f 	bl	8004f54 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f000 f95e 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c24:	f005 fda8 	bl	8006778 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 f955 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c36:	f005 fddd 	bl	80067f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c40:	f000 f94c 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c46:	f005 fd5e 	bl	8006706 <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000c50:	f000 f944 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200004b4 	.word	0x200004b4
 8000c5c:	40013800 	.word	0x40013800

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6493      	str	r3, [r2, #72]	; 0x48
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6493      	str	r3, [r2, #72]	; 0x48
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_DMA_Init+0xa0>)
 8000c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	200b      	movs	r0, #11
 8000c9c:	f000 fdab 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ca0:	200b      	movs	r0, #11
 8000ca2:	f000 fdc2 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200c      	movs	r0, #12
 8000cac:	f000 fda3 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f000 fdba 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200d      	movs	r0, #13
 8000cbc:	f000 fd9b 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000cc0:	200d      	movs	r0, #13
 8000cc2:	f000 fdb2 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200e      	movs	r0, #14
 8000ccc:	f000 fd93 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	f000 fdaa 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f000 fd8b 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ce0:	200f      	movs	r0, #15
 8000ce2:	f000 fda2 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2010      	movs	r0, #16
 8000cec:	f000 fd83 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f000 fd9a 	bl	800182a <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 fa2f 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480f      	ldr	r0, [pc, #60]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000d9e:	f001 f89f 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000da2:	2320      	movs	r3, #32
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 f890 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2028      	movs	r0, #40	; 0x28
 8000dc6:	f000 fd16 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dca:	2028      	movs	r0, #40	; 0x28
 8000dcc:	f000 fd2d 	bl	800182a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000800 	.word	0x48000800

08000de0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af02      	add	r7, sp, #8
	if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <EEPROMWriteExample+0x74>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d02f      	beq.n	8000e4e <EEPROMWriteExample+0x6e>
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <EEPROMWriteExample+0x78>)
 8000df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b20      	cmp	r3, #32
 8000df8:	d129      	bne.n	8000e4e <EEPROMWriteExample+0x6e>
	static uint8_t data[4];
	 data[0]=TotalScore;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <EEPROMWriteExample+0x7c>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e00:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 1);
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	222c      	movs	r2, #44	; 0x2c
 8000e20:	21a0      	movs	r1, #160	; 0xa0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <EEPROMWriteExample+0x78>)
 8000e24:	f001 face 	bl	80023c4 <HAL_I2C_Mem_Write_IT>
		WriteFlag = 0;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <EEPROMWriteExample+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	if(A==11){
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <EEPROMWriteExample+0x84>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b0b      	cmp	r3, #11
 8000e34:	d10b      	bne.n	8000e4e <EEPROMWriteExample+0x6e>
		 data[0]=0x00;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		 data[1]=0x00;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	705a      	strb	r2, [r3, #1]
		 data[2]=0x00;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	709a      	strb	r2, [r3, #2]
		 data[3]=0x00;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <EEPROMWriteExample+0x80>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	70da      	strb	r2, [r3, #3]
	}
	}
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200006d5 	.word	0x200006d5
 8000e58:	2000030c 	.word	0x2000030c
 8000e5c:	200006d4 	.word	0x200006d4
 8000e60:	200006e0 	.word	0x200006e0
 8000e64:	200002dc 	.word	0x200002dc

08000e68 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
	if (ReadFlag ==1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <EEPROMReadExample+0x3c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10f      	bne.n	8000e9c <EEPROMReadExample+0x34>
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <EEPROMReadExample+0x40>)
 8000e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d109      	bne.n	8000e9c <EEPROMReadExample+0x34>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2302      	movs	r3, #2
 8000e92:	222c      	movs	r2, #44	; 0x2c
 8000e94:	21a0      	movs	r1, #160	; 0xa0
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <EEPROMReadExample+0x40>)
 8000e98:	f001 fb1e 	bl	80024d8 <HAL_I2C_Mem_Read_IT>
//		ReadFlag = 0;
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200006d6 	.word	0x200006d6
 8000ea8:	2000030c 	.word	0x2000030c

08000eac <Dummy>:



// For LD2 Test //
void Dummy(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000eb0:	f000 fb98 	bl	80015e4 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <Dummy+0x2c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d30a      	bcc.n	8000ed4 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000ebe:	f000 fb91 	bl	80015e4 <HAL_GetTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	3364      	adds	r3, #100	; 0x64
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <Dummy+0x2c>)
 8000ec8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eca:	2120      	movs	r1, #32
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f001 f9a0 	bl	8002214 <HAL_GPIO_TogglePin>
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200006e4 	.word	0x200006e4

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f1e:	f003 f88d 	bl	800403c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09e      	sub	sp, #120	; 0x78
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2254      	movs	r2, #84	; 0x54
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fcdb 	bl	800690c <memset>
  if(hi2c->Instance==I2C1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a50      	ldr	r2, [pc, #320]	; (800109c <HAL_I2C_MspInit+0x16c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 8099 	bne.w	8001094 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fda2 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff ffaf 	bl	8000edc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483c      	ldr	r0, [pc, #240]	; (80010a4 <HAL_I2C_MspInit+0x174>)
 8000fb4:	f000 ff94 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_I2C_MspInit+0x170>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <HAL_I2C_MspInit+0x17c>)
 8000fd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000fd8:	2210      	movs	r2, #16
 8000fda:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001006:	4828      	ldr	r0, [pc, #160]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 8001008:	f000 fc2a 	bl	8001860 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8001012:	f7ff ff63 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_I2C_MspInit+0x178>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_I2C_MspInit+0x184>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 800102a:	2211      	movs	r2, #17
 800102c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001030:	2210      	movs	r2, #16
 8001032:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001058:	4815      	ldr	r0, [pc, #84]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 800105a:	f000 fc01 	bl	8001860 <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001064:	f7ff ff3a 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_I2C_MspInit+0x180>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	201f      	movs	r0, #31
 800107a:	f000 fbbc 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800107e:	201f      	movs	r0, #31
 8001080:	f000 fbd3 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2020      	movs	r0, #32
 800108a:	f000 fbb4 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800108e:	2020      	movs	r0, #32
 8001090:	f000 fbcb 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3778      	adds	r7, #120	; 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40005400 	.word	0x40005400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	20000360 	.word	0x20000360
 80010ac:	40020058 	.word	0x40020058
 80010b0:	200003c0 	.word	0x200003c0
 80010b4:	4002006c 	.word	0x4002006c

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a0      	sub	sp, #128	; 0x80
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2254      	movs	r2, #84	; 0x54
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 fc17 	bl	800690c <memset>
  if(huart->Instance==LPUART1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a99      	ldr	r2, [pc, #612]	; (8001348 <HAL_UART_MspInit+0x290>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	f040 8093 	bne.w	8001210 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010ea:	2320      	movs	r3, #32
 80010ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fcde 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff feeb 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <HAL_UART_MspInit+0x294>)
 8001108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110a:	4a90      	ldr	r2, [pc, #576]	; (800134c <HAL_UART_MspInit+0x294>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001112:	4b8e      	ldr	r3, [pc, #568]	; (800134c <HAL_UART_MspInit+0x294>)
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_UART_MspInit+0x294>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a8a      	ldr	r2, [pc, #552]	; (800134c <HAL_UART_MspInit+0x294>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_UART_MspInit+0x294>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001136:	230c      	movs	r3, #12
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001146:	230c      	movs	r3, #12
 8001148:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 fec4 	bl	8001ee0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001158:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <HAL_UART_MspInit+0x298>)
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_UART_MspInit+0x29c>)
 800115c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800115e:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001160:	2223      	movs	r2, #35	; 0x23
 8001162:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001164:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001166:	2210      	movs	r2, #16
 8001168:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116a:	4b79      	ldr	r3, [pc, #484]	; (8001350 <HAL_UART_MspInit+0x298>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001170:	4b77      	ldr	r3, [pc, #476]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117c:	4b74      	ldr	r3, [pc, #464]	; (8001350 <HAL_UART_MspInit+0x298>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001182:	4b73      	ldr	r3, [pc, #460]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001188:	4b71      	ldr	r3, [pc, #452]	; (8001350 <HAL_UART_MspInit+0x298>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800118e:	4870      	ldr	r0, [pc, #448]	; (8001350 <HAL_UART_MspInit+0x298>)
 8001190:	f000 fb66 	bl	8001860 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800119a:	f7ff fe9f 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a6b      	ldr	r2, [pc, #428]	; (8001350 <HAL_UART_MspInit+0x298>)
 80011a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <HAL_UART_MspInit+0x298>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80011aa:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011ac:	4a6b      	ldr	r2, [pc, #428]	; (800135c <HAL_UART_MspInit+0x2a4>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80011b0:	4b69      	ldr	r3, [pc, #420]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011b2:	2222      	movs	r2, #34	; 0x22
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c8:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ce:	4b62      	ldr	r3, [pc, #392]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80011d4:	4b60      	ldr	r3, [pc, #384]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011d6:	2220      	movs	r2, #32
 80011d8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80011e0:	485d      	ldr	r0, [pc, #372]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011e2:	f000 fb3d 	bl	8001860 <HAL_DMA_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80011ec:	f7ff fe76 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a59      	ldr	r2, [pc, #356]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f8:	4a57      	ldr	r2, [pc, #348]	; (8001358 <HAL_UART_MspInit+0x2a0>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	205b      	movs	r0, #91	; 0x5b
 8001204:	f000 faf7 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001208:	205b      	movs	r0, #91	; 0x5b
 800120a:	f000 fb0e 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800120e:	e096      	b.n	800133e <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_UART_MspInit+0x2a8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	f040 8091 	bne.w	800133e <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fc45 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001234:	f7ff fe52 	bl	8000edc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001238:	4b44      	ldr	r3, [pc, #272]	; (800134c <HAL_UART_MspInit+0x294>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	4a43      	ldr	r2, [pc, #268]	; (800134c <HAL_UART_MspInit+0x294>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6613      	str	r3, [r2, #96]	; 0x60
 8001244:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_UART_MspInit+0x294>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <HAL_UART_MspInit+0x294>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	4a3d      	ldr	r2, [pc, #244]	; (800134c <HAL_UART_MspInit+0x294>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_UART_MspInit+0x294>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001268:	2330      	movs	r3, #48	; 0x30
 800126a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001278:	2307      	movs	r3, #7
 800127a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001280:	4619      	mov	r1, r3
 8001282:	4838      	ldr	r0, [pc, #224]	; (8001364 <HAL_UART_MspInit+0x2ac>)
 8001284:	f000 fe2c 	bl	8001ee0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001288:	4b37      	ldr	r3, [pc, #220]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 800128a:	4a38      	ldr	r2, [pc, #224]	; (800136c <HAL_UART_MspInit+0x2b4>)
 800128c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 8001290:	2218      	movs	r2, #24
 8001292:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012b4:	2220      	movs	r2, #32
 80012b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012be:	482a      	ldr	r0, [pc, #168]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012c0:	f000 face 	bl	8001860 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_UART_MspInit+0x216>
      Error_Handler();
 80012ca:	f7ff fe07 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80012d6:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_UART_MspInit+0x2b0>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_UART_MspInit+0x2bc>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012e4:	2219      	movs	r2, #25
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012ea:	2210      	movs	r2, #16
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 8001314:	f000 faa4 	bl	8001860 <HAL_DMA_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800131e:	f7ff fddd 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 8001326:	67da      	str	r2, [r3, #124]	; 0x7c
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_UART_MspInit+0x2b8>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2025      	movs	r0, #37	; 0x25
 8001334:	f000 fa5f 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001338:	2025      	movs	r0, #37	; 0x25
 800133a:	f000 fa76 	bl	800182a <HAL_NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3780      	adds	r7, #128	; 0x80
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40008000 	.word	0x40008000
 800134c:	40021000 	.word	0x40021000
 8001350:	20000548 	.word	0x20000548
 8001354:	40020008 	.word	0x40020008
 8001358:	200005a8 	.word	0x200005a8
 800135c:	4002001c 	.word	0x4002001c
 8001360:	40013800 	.word	0x40013800
 8001364:	48000800 	.word	0x48000800
 8001368:	20000608 	.word	0x20000608
 800136c:	40020030 	.word	0x40020030
 8001370:	20000668 	.word	0x20000668
 8001374:	40020044 	.word	0x40020044

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f8fc 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Channel1_IRQHandler+0x10>)
 80013d2:	f000 fc28 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000548 	.word	0x20000548

080013e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA1_Channel2_IRQHandler+0x10>)
 80013e6:	f000 fc1e 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200005a8 	.word	0x200005a8

080013f4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA1_Channel3_IRQHandler+0x10>)
 80013fa:	f000 fc14 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000608 	.word	0x20000608

08001408 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <DMA1_Channel4_IRQHandler+0x10>)
 800140e:	f000 fc0a 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000668 	.word	0x20000668

0800141c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA1_Channel5_IRQHandler+0x10>)
 8001422:	f000 fc00 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000360 	.word	0x20000360

08001430 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA1_Channel6_IRQHandler+0x10>)
 8001436:	f000 fbf6 	bl	8001c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200003c0 	.word	0x200003c0

08001444 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <I2C1_EV_IRQHandler+0x10>)
 800144a:	f001 f8cb 	bl	80025e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000030c 	.word	0x2000030c

08001458 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <I2C1_ER_IRQHandler+0x10>)
 800145e:	f001 f8db 	bl	8002618 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000030c 	.word	0x2000030c

0800146c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <USART1_IRQHandler+0x10>)
 8001472:	f003 fe99 	bl	80051a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200004b4 	.word	0x200004b4

08001480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001484:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001488:	f000 fede 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <LPUART1_IRQHandler+0x10>)
 8001496:	f003 fe87 	bl	80051a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000420 	.word	0x20000420

080014a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f005 fa11 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff f813 	bl	8000524 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   r0, =_estack
 8001500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 800150c:	08006a10 	.word	0x08006a10
  ldr r2, =_sbss
 8001510:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001514:	200006ec 	.word	0x200006ec

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>

0800151a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f95b 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f80e 	bl	800154c <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fcd4 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]

}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_InitTick+0x68>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_InitTick+0x6c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_InitTick+0x68>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800156c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f966 	bl	8001846 <HAL_SYSTICK_Config>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10f      	bne.n	80015a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d809      	bhi.n	800159a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001586:	2200      	movs	r2, #0
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	f04f 30ff 	mov.w	r0, #4294967295
 800158e:	f000 f932 	bl	80017f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_InitTick+0x70>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e007      	b.n	80015aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e004      	b.n	80015aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002ec 	.word	0x200002ec
 80015b8:	200002e4 	.word	0x200002e4
 80015bc:	200002e8 	.word	0x200002e8

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_IncTick+0x1c>)
 80015d0:	6013      	str	r3, [r2, #0]
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200006e8 	.word	0x200006e8
 80015e0:	200002ec 	.word	0x200002ec

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200006e8 	.word	0x200006e8

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d004      	beq.n	8001620 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_Delay+0x40>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001620:	bf00      	nop
 8001622:	f7ff ffdf 	bl	80015e4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	429a      	cmp	r2, r3
 8001630:	d8f7      	bhi.n	8001622 <HAL_Delay+0x26>
  {
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200002ec 	.word	0x200002ec

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff29 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff40 	bl	8001688 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff33 	bl	80016a4 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa4 	bl	800179c <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e08d      	b.n	800198e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_DMA_Init+0x138>)
 800187a:	429a      	cmp	r2, r3
 800187c:	d80f      	bhi.n	800189e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b45      	ldr	r3, [pc, #276]	; (800199c <HAL_DMA_Init+0x13c>)
 8001886:	4413      	add	r3, r2
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <HAL_DMA_Init+0x140>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	009a      	lsls	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <HAL_DMA_Init+0x144>)
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
 800189c:	e00e      	b.n	80018bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_DMA_Init+0x148>)
 80018a6:	4413      	add	r3, r2
 80018a8:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_DMA_Init+0x140>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <HAL_DMA_Init+0x14c>)
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fa84 	bl	8001e1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800191c:	d102      	bne.n	8001924 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001938:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <HAL_DMA_Init+0x104>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d80c      	bhi.n	8001964 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 faa4 	bl	8001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	e008      	b.n	8001976 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020407 	.word	0x40020407
 800199c:	bffdfff8 	.word	0xbffdfff8
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	40020000 	.word	0x40020000
 80019a8:	bffdfbf8 	.word	0xbffdfbf8
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_DMA_Start_IT+0x20>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e066      	b.n	8001a9e <HAL_DMA_Start_IT+0xee>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d155      	bne.n	8001a90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f9c9 	bl	8001da0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 020e 	orr.w	r2, r2, #14
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00f      	b.n	8001a48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 020a 	orr.w	r2, r2, #10
 8001a46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e005      	b.n	8001a9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d005      	beq.n	8001aca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e037      	b.n	8001b3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020e 	bic.w	r2, r2, #14
 8001ad8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 021f 	and.w	r2, r3, #31
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00c      	beq.n	8001b3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e047      	b.n	8001c1c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020e 	bic.w	r2, r2, #14
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
    }
  }
  return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2204      	movs	r2, #4
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d026      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x7a>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d021      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0204 	bic.w	r2, r2, #4
 8001c78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2104      	movs	r1, #4
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d071      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c9e:	e06c      	b.n	8001d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2202      	movs	r2, #2
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d02e      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d029      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 020a 	bic.w	r2, r2, #10
 8001cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d038      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d10:	e033      	b.n	8001d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d02a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d025      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 020e 	bic.w	r2, r2, #14
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
}
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d92:	b2db      	uxtb	r3, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001db6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dc8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d108      	bne.n	8001e00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dfe:	e007      	b.n	8001e10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d802      	bhi.n	8001e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e001      	b.n	8001e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e38:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3b08      	subs	r3, #8
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40020407 	.word	0x40020407
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020820 	.word	0x40020820
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	40020880 	.word	0x40020880

08001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	1000823f 	.word	0x1000823f
 8001edc:	40020940 	.word	0x40020940

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eee:	e15a      	b.n	80021a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 814c 	beq.w	80021a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80a6 	beq.w	80021a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_GPIO_Init+0x2e4>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_GPIO_Init+0x2e4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6613      	str	r3, [r2, #96]	; 0x60
 8002060:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x2e4>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206c:	4a56      	ldr	r2, [pc, #344]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002096:	d01f      	beq.n	80020d8 <HAL_GPIO_Init+0x1f8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x2ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d019      	beq.n	80020d4 <HAL_GPIO_Init+0x1f4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_GPIO_Init+0x1f0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x2f4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_GPIO_Init+0x1ec>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_GPIO_Init+0x2f8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x1e8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a48      	ldr	r2, [pc, #288]	; (80021dc <HAL_GPIO_Init+0x2fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_GPIO_Init+0x1e4>
 80020c0:	2305      	movs	r3, #5
 80020c2:	e00a      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020c4:	2306      	movs	r3, #6
 80020c6:	e008      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e004      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d8:	2300      	movs	r3, #0
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ea:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_GPIO_Init+0x300>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800211c:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_GPIO_Init+0x300>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_GPIO_Init+0x300>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_GPIO_Init+0x300>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_GPIO_Init+0x300>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_GPIO_Init+0x300>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_GPIO_Init+0x300>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_GPIO_Init+0x300>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f ae9d 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000c00 	.word	0x48000c00
 80021d8:	48001000 	.word	0x48001000
 80021dc:	48001400 	.word	0x48001400
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002200:	e002      	b.n	8002208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43d9      	mvns	r1, r3
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	400b      	ands	r3, r1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f806 	bl	8002278 <HAL_GPIO_EXTI_Callback>
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e08d      	b.n	80023bc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fe fe3b 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2224      	movs	r2, #36	; 0x24
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e006      	b.n	8002316 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002314:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d108      	bne.n	8002330 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e007      	b.n	8002340 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002362:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69d9      	ldr	r1, [r3, #28]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	817b      	strh	r3, [r7, #10]
 80023d6:	460b      	mov	r3, r1
 80023d8:	813b      	strh	r3, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d16a      	bne.n	80024c0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_I2C_Mem_Write_IT+0x32>
 80023f0:	8bbb      	ldrh	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e05f      	b.n	80024c2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e055      	b.n	80024c2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_I2C_Mem_Write_IT+0x60>
 8002420:	2302      	movs	r3, #2
 8002422:	e04e      	b.n	80024c2 <HAL_I2C_Mem_Write_IT+0xfe>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2221      	movs	r2, #33	; 0x21
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8bba      	ldrh	r2, [r7, #28]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_I2C_Mem_Write_IT+0x108>)
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_I2C_Mem_Write_IT+0x10c>)
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002460:	897a      	ldrh	r2, [r7, #10]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d109      	bne.n	8002480 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	651a      	str	r2, [r3, #80]	; 0x50
 800247e:	e00b      	b.n	8002498 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_I2C_Mem_Write_IT+0x110>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f001 fb78 	bl	8003b9c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024b4:	2101      	movs	r1, #1
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f001 fba2 	bl	8003c00 <I2C_Enable_IRQ>

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	ffff0000 	.word	0xffff0000
 80024d0:	080027a1 	.word	0x080027a1
 80024d4:	80002000 	.word	0x80002000

080024d8 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	460b      	mov	r3, r1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d166      	bne.n	80025cc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_I2C_Mem_Read_IT+0x32>
 8002504:	8bbb      	ldrh	r3, [r7, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d105      	bne.n	8002516 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e05b      	b.n	80025ce <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002524:	d101      	bne.n	800252a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	e051      	b.n	80025ce <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Mem_Read_IT+0x60>
 8002534:	2302      	movs	r3, #2
 8002536:	e04a      	b.n	80025ce <HAL_I2C_Mem_Read_IT+0xf6>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2222      	movs	r2, #34	; 0x22
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8bba      	ldrh	r2, [r7, #28]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_I2C_Mem_Read_IT+0x100>)
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_I2C_Mem_Read_IT+0x104>)
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800256e:	897a      	ldrh	r2, [r7, #10]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d109      	bne.n	800258e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257a:	893b      	ldrh	r3, [r7, #8]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f04f 32ff 	mov.w	r2, #4294967295
 800258a:	651a      	str	r2, [r3, #80]	; 0x50
 800258c:	e00b      	b.n	80025a6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800258e:	893b      	ldrh	r3, [r7, #8]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29b      	uxth	r3, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800259c:	893b      	ldrh	r3, [r7, #8]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_I2C_Mem_Read_IT+0x108>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 faf2 	bl	8003b9c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025c0:	2101      	movs	r1, #1
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f001 fb1c 	bl	8003c00 <I2C_Enable_IRQ>

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	ffff0000 	.word	0xffff0000
 80025dc:	080027a1 	.word	0x080027a1
 80025e0:	80002000 	.word	0x80002000

080025e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
  }
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00f      	beq.n	800265a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002658:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00f      	beq.n	8002684 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002682:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00f      	beq.n	80026ae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f043 0202 	orr.w	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 030b 	and.w	r3, r3, #11
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 f911 	bl	80038e8 <I2C_ITError>
  }
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	70fb      	strb	r3, [r7, #3]
 800272a:	4613      	mov	r3, r2
 800272c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80027ac:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <I2C_Mem_ISR_IT+0x244>)
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <I2C_Mem_ISR_IT+0x22>
 80027be:	2302      	movs	r3, #2
 80027c0:	e10c      	b.n	80029dc <I2C_Mem_ISR_IT+0x23c>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2210      	movs	r2, #16
 80027e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f001 f98f 	bl	8003b16 <I2C_Flush_TXDR>
 80027f8:	e0dd      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d022      	beq.n	800284a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01d      	beq.n	800284a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002848:	e0b5      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02c      	beq.n	80028ae <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800285a:	2b00      	cmp	r3, #0
 800285c:	d027      	beq.n	80028ae <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d118      	bne.n	800289a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002898:	e08d      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f04f 32ff 	mov.w	r2, #4294967295
 80028aa:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80028ac:	e083      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03c      	beq.n	8002932 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d037      	beq.n	8002932 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02c      	beq.n	8002926 <I2C_Mem_ISR_IT+0x186>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d128      	bne.n	8002926 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d910      	bls.n	8002900 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	b299      	uxth	r1, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f001 f94f 	bl	8003b9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fe:	e017      	b.n	8002930 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	b299      	uxth	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	b2da      	uxtb	r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f001 f93c 	bl	8003b9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002924:	e004      	b.n	8002930 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 ffdd 	bl	80038e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800292e:	e042      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
 8002930:	e041      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d03c      	beq.n	80029b6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002942:	2b00      	cmp	r3, #0
 8002944:	d037      	beq.n	80029b6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002946:	2101      	movs	r1, #1
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f001 f9dd 	bl	8003d08 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800294e:	2102      	movs	r1, #2
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 f955 	bl	8003c00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b22      	cmp	r3, #34	; 0x22
 8002960:	d101      	bne.n	8002966 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <I2C_Mem_ISR_IT+0x248>)
 8002964:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	2bff      	cmp	r3, #255	; 0xff
 800296e:	d910      	bls.n	8002992 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	b299      	uxth	r1, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	b2da      	uxtb	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f001 f906 	bl	8003b9c <I2C_TransferConfig>
 8002990:	e011      	b.n	80029b6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	b299      	uxth	r1, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f001 f8f3 	bl	8003b9c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80029ca:	6939      	ldr	r1, [r7, #16]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fd0b 	bl	80033e8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	80002000 	.word	0x80002000
 80029e8:	80002400 	.word	0x80002400

080029ec <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <I2C_Slave_ISR_IT+0x24>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0e2      	b.n	8002bd6 <I2C_Slave_ISR_IT+0x1ea>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a2c:	6939      	ldr	r1, [r7, #16]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fda2 	bl	8003578 <I2C_ITSlaveCplt>
 8002a34:	e0ca      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d04b      	beq.n	8002ad8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d046      	beq.n	8002ad8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d128      	bne.n	8002aa6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b28      	cmp	r3, #40	; 0x28
 8002a5e:	d108      	bne.n	8002a72 <I2C_Slave_ISR_IT+0x86>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a66:	d104      	bne.n	8002a72 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a68:	6939      	ldr	r1, [r7, #16]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fee8 	bl	8003840 <I2C_ITListenCplt>
 8002a70:	e031      	b.n	8002ad6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b29      	cmp	r3, #41	; 0x29
 8002a7c:	d10e      	bne.n	8002a9c <I2C_Slave_ISR_IT+0xb0>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a84:	d00a      	beq.n	8002a9c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f001 f841 	bl	8003b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fc4b 	bl	8003330 <I2C_ITSlaveSeqCplt>
 8002a9a:	e01c      	b.n	8002ad6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002aa4:	e08f      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <I2C_Slave_ISR_IT+0xdc>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac6:	d17e      	bne.n	8002bc6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	4619      	mov	r1, r3
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 ff0a 	bl	80038e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ad4:	e077      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1da>
 8002ad6:	e076      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02f      	beq.n	8002b42 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02a      	beq.n	8002b42 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d018      	beq.n	8002b28 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14b      	bne.n	8002bca <I2C_Slave_ISR_IT+0x1de>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b38:	d047      	beq.n	8002bca <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fbf8 	bl	8003330 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b40:	e043      	b.n	8002bca <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b56:	6939      	ldr	r1, [r7, #16]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fb28 	bl	80031ae <I2C_ITAddrCplt>
 8002b5e:	e035      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d030      	beq.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02b      	beq.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d018      	beq.n	8002bb0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
 8002bae:	e00d      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb6:	d002      	beq.n	8002bbe <I2C_Slave_ISR_IT+0x1d2>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fbb6 	bl	8003330 <I2C_ITSlaveSeqCplt>
 8002bc4:	e002      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002bca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <I2C_Master_ISR_DMA+0x1a>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0d9      	b.n	8002dac <I2C_Master_ISR_DMA+0x1ce>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d011      	beq.n	8002c38 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c28:	2120      	movs	r1, #32
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 ffe8 	bl	8003c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 ff70 	bl	8003b16 <I2C_Flush_TXDR>
 8002c36:	e0b4      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d071      	beq.n	8002d26 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d06c      	beq.n	8002d26 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04e      	beq.n	8002d04 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c72:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d906      	bls.n	8002c8c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e010      	b.n	8002cae <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c9e:	d003      	beq.n	8002ca8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e002      	b.n	8002cae <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cac:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8a79      	ldrh	r1, [r7, #18]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 ff6d 	bl	8003b9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b22      	cmp	r3, #34	; 0x22
 8002cde:	d108      	bne.n	8002cf2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cf0:	e057      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d02:	e04e      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d12:	d003      	beq.n	8002d1c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 face 	bl	80032b6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002d1a:	e042      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fde2 	bl	80038e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002d24:	e03d      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d028      	beq.n	8002d82 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d023      	beq.n	8002d82 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d119      	bne.n	8002d78 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d52:	d025      	beq.n	8002da0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002d6e:	e017      	b.n	8002da0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 faa0 	bl	80032b6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002d76:	e013      	b.n	8002da0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fdb4 	bl	80038e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d80:	e00e      	b.n	8002da0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fb25 	bl	80033e8 <I2C_ITMasterCplt>
 8002d9e:	e000      	b.n	8002da2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002da0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002dc0:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <I2C_Mem_ISR_DMA+0x244>)
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <I2C_Mem_ISR_DMA+0x1e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e10e      	b.n	8002ff0 <I2C_Mem_ISR_DMA+0x23c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d011      	beq.n	8002e12 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2210      	movs	r2, #16
 8002df4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e02:	2120      	movs	r1, #32
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fefb 	bl	8003c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fe83 	bl	8003b16 <I2C_Flush_TXDR>
 8002e10:	e0e9      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50
 8002e38:	e0d5      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05f      	beq.n	8002f04 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d05a      	beq.n	8002f04 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 ff59 	bl	8003d08 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e56:	2110      	movs	r1, #16
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fed1 	bl	8003c00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d048      	beq.n	8002efa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2bff      	cmp	r3, #255	; 0xff
 8002e70:	d910      	bls.n	8002e94 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	b299      	uxth	r1, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fe85 	bl	8003b9c <I2C_TransferConfig>
 8002e92:	e011      	b.n	8002eb8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	b299      	uxth	r1, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fe72 	bl	8003b9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d108      	bne.n	8002ee8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ee6:	e07e      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ef6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ef8:	e075      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fcf3 	bl	80038e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f02:	e070      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d05d      	beq.n	8002fca <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d058      	beq.n	8002fca <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fef4 	bl	8003d08 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f20:	2110      	movs	r1, #16
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fe6c 	bl	8003c00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b22      	cmp	r3, #34	; 0x22
 8002f32:	d101      	bne.n	8002f38 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <I2C_Mem_ISR_DMA+0x248>)
 8002f36:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	d910      	bls.n	8002f64 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	22ff      	movs	r2, #255	; 0xff
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fe1d 	bl	8003b9c <I2C_TransferConfig>
 8002f62:	e011      	b.n	8002f88 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	b299      	uxth	r1, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fe0a 	bl	8003b9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b22      	cmp	r3, #34	; 0x22
 8002fa4:	d108      	bne.n	8002fb8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fb6:	e016      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fc8:	e00d      	b.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa01 	bl	80033e8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	80002000 	.word	0x80002000
 8002ffc:	80002400 	.word	0x80002400

08003000 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <I2C_Slave_ISR_DMA+0x24>
 8003020:	2302      	movs	r3, #2
 8003022:	e0c0      	b.n	80031a6 <I2C_Slave_ISR_DMA+0x1a6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fa98 	bl	8003578 <I2C_ITSlaveCplt>
 8003048:	e0a8      	b.n	800319c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8095 	beq.w	8003180 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 808f 	beq.w	8003180 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003072:	2b00      	cmp	r3, #0
 8003074:	d07d      	beq.n	8003172 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00c      	beq.n	80030ba <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d128      	bne.n	8003112 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b28      	cmp	r3, #40	; 0x28
 80030ca:	d108      	bne.n	80030de <I2C_Slave_ISR_DMA+0xde>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d2:	d104      	bne.n	80030de <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fbb2 	bl	8003840 <I2C_ITListenCplt>
 80030dc:	e048      	b.n	8003170 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b29      	cmp	r3, #41	; 0x29
 80030e8:	d10e      	bne.n	8003108 <I2C_Slave_ISR_DMA+0x108>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f0:	d00a      	beq.n	8003108 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2210      	movs	r2, #16
 80030f8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fd0b 	bl	8003b16 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f915 	bl	8003330 <I2C_ITSlaveSeqCplt>
 8003106:	e033      	b.n	8003170 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003110:	e034      	b.n	800317c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <I2C_Slave_ISR_DMA+0x13c>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313a:	d11f      	bne.n	800317c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b21      	cmp	r3, #33	; 0x21
 8003140:	d002      	beq.n	8003148 <I2C_Slave_ISR_DMA+0x148>
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b29      	cmp	r3, #41	; 0x29
 8003146:	d103      	bne.n	8003150 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
 800314e:	e008      	b.n	8003162 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b22      	cmp	r3, #34	; 0x22
 8003154:	d002      	beq.n	800315c <I2C_Slave_ISR_DMA+0x15c>
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b2a      	cmp	r3, #42	; 0x2a
 800315a:	d102      	bne.n	8003162 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2222      	movs	r2, #34	; 0x22
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4619      	mov	r1, r3
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fbbd 	bl	80038e8 <I2C_ITError>
      if (treatdmanack == 1U)
 800316e:	e005      	b.n	800317c <I2C_Slave_ISR_DMA+0x17c>
 8003170:	e004      	b.n	800317c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800317a:	e00f      	b.n	800319c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800317c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800317e:	e00d      	b.n	800319c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f809 	bl	80031ae <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031c4:	2b28      	cmp	r3, #40	; 0x28
 80031c6:	d16a      	bne.n	800329e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031e6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003202:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d138      	bne.n	800327e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800320c:	897b      	ldrh	r3, [r7, #10]
 800320e:	09db      	lsrs	r3, r3, #7
 8003210:	b29a      	uxth	r2, r3
 8003212:	89bb      	ldrh	r3, [r7, #12]
 8003214:	4053      	eors	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0306 	and.w	r3, r3, #6
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11c      	bne.n	800325a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003232:	2b02      	cmp	r3, #2
 8003234:	d13b      	bne.n	80032ae <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2208      	movs	r2, #8
 8003242:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800324c:	89ba      	ldrh	r2, [r7, #12]
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fa63 	bl	800271e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003258:	e029      	b.n	80032ae <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800325a:	893b      	ldrh	r3, [r7, #8]
 800325c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800325e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fd50 	bl	8003d08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003270:	89ba      	ldrh	r2, [r7, #12]
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fa51 	bl	800271e <HAL_I2C_AddrCallback>
}
 800327c:	e017      	b.n	80032ae <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800327e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fd40 	bl	8003d08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003290:	89ba      	ldrh	r2, [r7, #12]
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fa41 	bl	800271e <HAL_I2C_AddrCallback>
}
 800329c:	e007      	b.n	80032ae <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2208      	movs	r2, #8
 80032a4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b21      	cmp	r3, #33	; 0x21
 80032d0:	d115      	bne.n	80032fe <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2211      	movs	r2, #17
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032e6:	2101      	movs	r1, #1
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fd0d 	bl	8003d08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff f9e9 	bl	80026ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032fc:	e014      	b.n	8003328 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2212      	movs	r2, #18
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003312:	2102      	movs	r1, #2
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fcf7 	bl	8003d08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff f9dd 	bl	80026e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e00c      	b.n	800337e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800337c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b29      	cmp	r3, #41	; 0x29
 8003388:	d112      	bne.n	80033b0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2228      	movs	r2, #40	; 0x28
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2221      	movs	r2, #33	; 0x21
 8003396:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003398:	2101      	movs	r1, #1
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fcb4 	bl	8003d08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff f9a4 	bl	80026f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033ae:	e017      	b.n	80033e0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ba:	d111      	bne.n	80033e0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2228      	movs	r2, #40	; 0x28
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2222      	movs	r2, #34	; 0x22
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033ca:	2102      	movs	r1, #2
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fc9b 	bl	8003d08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff f995 	bl	800270a <HAL_I2C_SlaveRxCpltCallback>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b21      	cmp	r3, #33	; 0x21
 8003408:	d107      	bne.n	800341a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800340a:	2101      	movs	r1, #1
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fc7b 	bl	8003d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2211      	movs	r2, #17
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	e00c      	b.n	8003434 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b22      	cmp	r3, #34	; 0x22
 8003424:	d106      	bne.n	8003434 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003426:	2102      	movs	r1, #2
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fc6d 	bl	8003d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2212      	movs	r2, #18
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <I2C_ITMasterCplt+0x188>)
 8003440:	400b      	ands	r3, r1
 8003442:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <I2C_ITMasterCplt+0x18c>)
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0204 	orr.w	r2, r3, #4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b60      	cmp	r3, #96	; 0x60
 8003478:	d10a      	bne.n	8003490 <I2C_ITMasterCplt+0xa8>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800348e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb40 	bl	8003b16 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d002      	beq.n	80034ae <I2C_ITMasterCplt+0xc6>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa17 	bl	80038e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034ba:	e054      	b.n	8003566 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b21      	cmp	r3, #33	; 0x21
 80034c6:	d124      	bne.n	8003512 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d10b      	bne.n	80034fa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff f92b 	bl	800274e <HAL_I2C_MemTxCpltCallback>
}
 80034f8:	e035      	b.n	8003566 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff f8df 	bl	80026ce <HAL_I2C_MasterTxCpltCallback>
}
 8003510:	e029      	b.n	8003566 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b22      	cmp	r3, #34	; 0x22
 800351c:	d123      	bne.n	8003566 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d10b      	bne.n	8003550 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff f90a 	bl	8002762 <HAL_I2C_MemRxCpltCallback>
}
 800354e:	e00a      	b.n	8003566 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff f8be 	bl	80026e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	fe00e800 	.word	0xfe00e800
 8003574:	ffff0000 	.word	0xffff0000

08003578 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	2b21      	cmp	r3, #33	; 0x21
 80035a8:	d002      	beq.n	80035b0 <I2C_ITSlaveCplt+0x38>
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	2b29      	cmp	r3, #41	; 0x29
 80035ae:	d108      	bne.n	80035c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80035b0:	f248 0101 	movw	r1, #32769	; 0x8001
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fba7 	bl	8003d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2221      	movs	r2, #33	; 0x21
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
 80035c0:	e019      	b.n	80035f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	2b22      	cmp	r3, #34	; 0x22
 80035c6:	d002      	beq.n	80035ce <I2C_ITSlaveCplt+0x56>
 80035c8:	7afb      	ldrb	r3, [r7, #11]
 80035ca:	2b2a      	cmp	r3, #42	; 0x2a
 80035cc:	d108      	bne.n	80035e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035ce:	f248 0102 	movw	r1, #32770	; 0x8002
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fb98 	bl	8003d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2222      	movs	r2, #34	; 0x22
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
 80035de:	e00a      	b.n	80035f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	2b28      	cmp	r3, #40	; 0x28
 80035e4:	d107      	bne.n	80035f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80035e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fb8c 	bl	8003d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003604:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b89      	ldr	r3, [pc, #548]	; (8003838 <I2C_ITSlaveCplt+0x2c0>)
 8003612:	400b      	ands	r3, r1
 8003614:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa7d 	bl	8003b16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d013      	beq.n	800364e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003634:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01f      	beq.n	800367e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e017      	b.n	800367e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003666:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0204 	orr.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d049      	beq.n	800377e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d044      	beq.n	800377e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d128      	bne.n	8003750 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b28      	cmp	r3, #40	; 0x28
 8003708:	d108      	bne.n	800371c <I2C_ITSlaveCplt+0x1a4>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003710:	d104      	bne.n	800371c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f893 	bl	8003840 <I2C_ITListenCplt>
 800371a:	e030      	b.n	800377e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b29      	cmp	r3, #41	; 0x29
 8003726:	d10e      	bne.n	8003746 <I2C_ITSlaveCplt+0x1ce>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372e:	d00a      	beq.n	8003746 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f9ec 	bl	8003b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fdf6 	bl	8003330 <I2C_ITSlaveSeqCplt>
 8003744:	e01b      	b.n	800377e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	e016      	b.n	800377e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2210      	movs	r2, #16
 8003756:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <I2C_ITSlaveCplt+0x1fa>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003770:	d105      	bne.n	800377e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8b5 	bl	80038e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8a4 	bl	80038e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b28      	cmp	r3, #40	; 0x28
 80037aa:	d141      	bne.n	8003830 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80037ac:	6979      	ldr	r1, [r7, #20]
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f846 	bl	8003840 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037b4:	e03c      	b.n	8003830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037be:	d014      	beq.n	80037ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fdb5 	bl	8003330 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <I2C_ITSlaveCplt+0x2c4>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe ffa9 	bl	800273a <HAL_I2C_ListenCpltCallback>
}
 80037e8:	e022      	b.n	8003830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b22      	cmp	r3, #34	; 0x22
 80037f4:	d10e      	bne.n	8003814 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fe ff7c 	bl	800270a <HAL_I2C_SlaveRxCpltCallback>
}
 8003812:	e00d      	b.n	8003830 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe ff63 	bl	80026f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	fe00e800 	.word	0xfe00e800
 800383c:	ffff0000 	.word	0xffff0000

08003840 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <I2C_ITListenCplt+0xa4>)
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d012      	beq.n	80038bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa21 	bl	8003d08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2210      	movs	r2, #16
 80038cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe ff2f 	bl	800273a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a6d      	ldr	r2, [pc, #436]	; (8003abc <I2C_ITError+0x1d4>)
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b28      	cmp	r3, #40	; 0x28
 800391e:	d005      	beq.n	800392c <I2C_ITError+0x44>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b29      	cmp	r3, #41	; 0x29
 8003924:	d002      	beq.n	800392c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b2a      	cmp	r3, #42	; 0x2a
 800392a:	d10b      	bne.n	8003944 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800392c:	2103      	movs	r1, #3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9ea 	bl	8003d08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2228      	movs	r2, #40	; 0x28
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a60      	ldr	r2, [pc, #384]	; (8003ac0 <I2C_ITError+0x1d8>)
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
 8003942:	e030      	b.n	80039a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003944:	f248 0103 	movw	r1, #32771	; 0x8003
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9dd 	bl	8003d08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8e1 	bl	8003b16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b60      	cmp	r3, #96	; 0x60
 800395e:	d01f      	beq.n	80039a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d114      	bne.n	80039a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b10      	cmp	r3, #16
 8003982:	d109      	bne.n	8003998 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2220      	movs	r2, #32
 800399e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d039      	beq.n	8003a28 <I2C_ITError+0x140>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b11      	cmp	r3, #17
 80039b8:	d002      	beq.n	80039c0 <I2C_ITError+0xd8>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b21      	cmp	r3, #33	; 0x21
 80039be:	d133      	bne.n	8003a28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ce:	d107      	bne.n	80039e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe f9cd 	bl	8001d84 <HAL_DMA_GetState>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d017      	beq.n	8003a20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	4a33      	ldr	r2, [pc, #204]	; (8003ac4 <I2C_ITError+0x1dc>)
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe f8a7 	bl	8001b58 <HAL_DMA_Abort_IT>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d04d      	beq.n	8003aac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a1e:	e045      	b.n	8003aac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f851 	bl	8003ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a26:	e041      	b.n	8003aac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d039      	beq.n	8003aa4 <I2C_ITError+0x1bc>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b12      	cmp	r3, #18
 8003a34:	d002      	beq.n	8003a3c <I2C_ITError+0x154>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b22      	cmp	r3, #34	; 0x22
 8003a3a:	d133      	bne.n	8003aa4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d107      	bne.n	8003a5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe f98f 	bl	8001d84 <HAL_DMA_GetState>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d017      	beq.n	8003a9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <I2C_ITError+0x1dc>)
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f869 	bl	8001b58 <HAL_DMA_Abort_IT>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d011      	beq.n	8003ab0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a96:	4610      	mov	r0, r2
 8003a98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a9a:	e009      	b.n	8003ab0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f813 	bl	8003ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aa2:	e005      	b.n	8003ab0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f80f 	bl	8003ac8 <I2C_TreatErrorCallback>
  }
}
 8003aaa:	e002      	b.n	8003ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab0:	bf00      	nop
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	ffff0000 	.word	0xffff0000
 8003ac0:	080029ed 	.word	0x080029ed
 8003ac4:	08003b5f 	.word	0x08003b5f

08003ac8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d10e      	bne.n	8003afa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe fe49 	bl	800278a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003af8:	e009      	b.n	8003b0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fe fe34 	bl	8002776 <HAL_I2C_ErrorCallback>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d103      	bne.n	8003b34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d007      	beq.n	8003b52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	619a      	str	r2, [r3, #24]
  }
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	2200      	movs	r2, #0
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff9b 	bl	8003ac8 <I2C_TreatErrorCallback>
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	4613      	mov	r3, r2
 8003bac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb4:	7a7b      	ldrb	r3, [r7, #9]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	0d5b      	lsrs	r3, r3, #21
 8003bd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <I2C_TransferConfig+0x60>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	43db      	mvns	r3, r3
 8003be0:	ea02 0103 	and.w	r1, r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	03ff63ff 	.word	0x03ff63ff

08003c00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	4a39      	ldr	r2, [pc, #228]	; (8003cfc <I2C_Enable_IRQ+0xfc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d032      	beq.n	8003c80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c1e:	4a38      	ldr	r2, [pc, #224]	; (8003d00 <I2C_Enable_IRQ+0x100>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d02d      	beq.n	8003c80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c28:	4a36      	ldr	r2, [pc, #216]	; (8003d04 <I2C_Enable_IRQ+0x104>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d028      	beq.n	8003c80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da03      	bge.n	8003c3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d103      	bne.n	8003c70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d133      	bne.n	8003cde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f043 0320 	orr.w	r3, r3, #32
 8003c7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c7e:	e02e      	b.n	8003cde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da03      	bge.n	8003c90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003ca0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003cb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d103      	bne.n	8003cc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d103      	bne.n	8003cd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d103      	bne.n	8003cde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	08002bdf 	.word	0x08002bdf
 8003d00:	08003001 	.word	0x08003001
 8003d04:	08002db5 	.word	0x08002db5

08003d08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00f      	beq.n	8003d42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d36:	2b28      	cmp	r3, #40	; 0x28
 8003d38:	d003      	beq.n	8003d42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00f      	beq.n	8003d6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d60:	2b28      	cmp	r3, #40	; 0x28
 8003d62:	d003      	beq.n	8003d6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da03      	bge.n	8003d7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d103      	bne.n	8003d8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d103      	bne.n	8003d98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f043 0320 	orr.w	r3, r3, #32
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d103      	bne.n	8003da6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43da      	mvns	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d138      	bne.n	8003e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e032      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d139      	bne.n	8003ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e033      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	; 0x24
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d141      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d131      	bne.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f10:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f28:	4a41      	ldr	r2, [pc, #260]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2232      	movs	r2, #50	; 0x32
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	0c9b      	lsrs	r3, r3, #18
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f46:	e002      	b.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f4e:	4b38      	ldr	r3, [pc, #224]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d102      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f2      	bne.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d158      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e057      	b.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f74:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f84:	e04d      	b.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d141      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d131      	bne.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa2:	4a23      	ldr	r2, [pc, #140]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2232      	movs	r2, #50	; 0x32
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	0c9b      	lsrs	r3, r3, #18
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd2:	e002      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d102      	bne.n	8003fee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f2      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d112      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e011      	b.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004010:	e007      	b.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004020:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40007000 	.word	0x40007000
 8004034:	200002e4 	.word	0x200002e4
 8004038:	431bde83 	.word	0x431bde83

0800403c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404a:	6093      	str	r3, [r2, #8]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40007000 	.word	0x40007000

0800405c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e2fe      	b.n	800466c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d075      	beq.n	8004166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407a:	4b97      	ldr	r3, [pc, #604]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d102      	bne.n	800409a <HAL_RCC_OscConfig+0x3e>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_OscConfig+0x44>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05b      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d157      	bne.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e2d9      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x74>
 80040c2:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a84      	ldr	r2, [pc, #528]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7e      	ldr	r2, [pc, #504]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7b      	ldr	r2, [pc, #492]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040f4:	4b78      	ldr	r3, [pc, #480]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a77      	ldr	r2, [pc, #476]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b75      	ldr	r3, [pc, #468]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a74      	ldr	r2, [pc, #464]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd fa66 	bl	80015e4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fd fa62 	bl	80015e4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e29e      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412e:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xc0>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd fa52 	bl	80015e4 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fd fa4e 	bl	80015e4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e28a      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004156:	4b60      	ldr	r3, [pc, #384]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d075      	beq.n	800425e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004172:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417c:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b0c      	cmp	r3, #12
 800418a:	d102      	bne.n	8004192 <HAL_RCC_OscConfig+0x136>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d002      	beq.n	8004198 <HAL_RCC_OscConfig+0x13c>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d11f      	bne.n	80041d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_OscConfig+0x154>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e25d      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	4946      	ldr	r1, [pc, #280]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <HAL_RCC_OscConfig+0x280>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd f9bf 	bl	800154c <HAL_InitTick>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d043      	beq.n	800425c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e249      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd f9fa 	bl	80015e4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fd f9f6 	bl	80015e4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e232      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	492d      	ldr	r1, [pc, #180]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
 8004226:	e01a      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800422e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd f9d6 	bl	80015e4 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423c:	f7fd f9d2 	bl	80015e4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e20e      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1e0>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d041      	beq.n	80042ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01c      	beq.n	80042ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f7fd f9af 	bl	80015e4 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428a:	f7fd f9ab 	bl	80015e4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e1e7      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ef      	beq.n	800428a <HAL_RCC_OscConfig+0x22e>
 80042aa:	e020      	b.n	80042ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd f992 	bl	80015e4 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c2:	e00d      	b.n	80042e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fd f98e 	bl	80015e4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d906      	bls.n	80042e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1ca      	b.n	800466c <HAL_RCC_OscConfig+0x610>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	200002e8 	.word	0x200002e8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e0:	4b8c      	ldr	r3, [pc, #560]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ea      	bne.n	80042c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80a6 	beq.w	8004448 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004300:	4b84      	ldr	r3, [pc, #528]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x2b4>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x2b6>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a7e      	ldr	r2, [pc, #504]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
 8004322:	4b7c      	ldr	r3, [pc, #496]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004332:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_RCC_OscConfig+0x4bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433e:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCC_OscConfig+0x4bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a75      	ldr	r2, [pc, #468]	; (8004518 <HAL_RCC_OscConfig+0x4bc>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fd f94b 	bl	80015e4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fd f947 	bl	80015e4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e183      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004364:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <HAL_RCC_OscConfig+0x4bc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d108      	bne.n	800438a <HAL_RCC_OscConfig+0x32e>
 8004378:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a65      	ldr	r2, [pc, #404]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004388:	e024      	b.n	80043d4 <HAL_RCC_OscConfig+0x378>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d110      	bne.n	80043b4 <HAL_RCC_OscConfig+0x358>
 8004392:	4b60      	ldr	r3, [pc, #384]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	4a5a      	ldr	r2, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b2:	e00f      	b.n	80043d4 <HAL_RCC_OscConfig+0x378>
 80043b4:	4b57      	ldr	r3, [pc, #348]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a56      	ldr	r2, [pc, #344]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c4:	4b53      	ldr	r3, [pc, #332]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd f902 	bl	80015e4 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd f8fe 	bl	80015e4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e138      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fa:	4b46      	ldr	r3, [pc, #280]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ed      	beq.n	80043e4 <HAL_RCC_OscConfig+0x388>
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd f8eb 	bl	80015e4 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd f8e7 	bl	80015e4 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e121      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004428:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1ed      	bne.n	8004412 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	4a34      	ldr	r2, [pc, #208]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01c      	beq.n	8004496 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800445c:	4b2d      	ldr	r3, [pc, #180]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800445e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004462:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd f8ba 	bl	80015e4 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004474:	f7fd f8b6 	bl	80015e4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0f2      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <HAL_RCC_OscConfig+0x418>
 8004494:	e01b      	b.n	80044ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004496:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 8004498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fd f89d 	bl	80015e4 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ae:	f7fd f899 	bl	80015e4 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0d5      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ef      	bne.n	80044ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80c9 	beq.w	800466a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	f000 8083 	beq.w	80045ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d15e      	bne.n	80045ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fd f873 	bl	80015e4 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004500:	e00c      	b.n	800451c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd f86f 	bl	80015e4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d905      	bls.n	800451c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0ab      	b.n	800466c <HAL_RCC_OscConfig+0x610>
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	4b55      	ldr	r3, [pc, #340]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ec      	bne.n	8004502 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004528:	4b52      	ldr	r3, [pc, #328]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4b52      	ldr	r3, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x61c>)
 800452e:	4013      	ands	r3, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6a11      	ldr	r1, [r2, #32]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004538:	3a01      	subs	r2, #1
 800453a:	0112      	lsls	r2, r2, #4
 800453c:	4311      	orrs	r1, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004542:	0212      	lsls	r2, r2, #8
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800454a:	0852      	lsrs	r2, r2, #1
 800454c:	3a01      	subs	r2, #1
 800454e:	0552      	lsls	r2, r2, #21
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004556:	0852      	lsrs	r2, r2, #1
 8004558:	3a01      	subs	r2, #1
 800455a:	0652      	lsls	r2, r2, #25
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004562:	06d2      	lsls	r2, r2, #27
 8004564:	430a      	orrs	r2, r1
 8004566:	4943      	ldr	r1, [pc, #268]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004568:	4313      	orrs	r3, r2
 800456a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a40      	ldr	r2, [pc, #256]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004576:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004578:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a3d      	ldr	r2, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004582:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f82e 	bl	80015e4 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd f82a 	bl	80015e4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e066      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	4b35      	ldr	r3, [pc, #212]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x530>
 80045aa:	e05e      	b.n	800466a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd f814 	bl	80015e4 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fd f810 	bl	80015e4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04c      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	4924      	ldr	r1, [pc, #144]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_OscConfig+0x620>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	60cb      	str	r3, [r1, #12]
 80045ea:	e03e      	b.n	800466a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e039      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0203 	and.w	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d12c      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	3b01      	subs	r3, #1
 8004618:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d123      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d11b      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d113      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d109      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	019f800c 	.word	0x019f800c
 800467c:	feeefffc 	.word	0xfeeefffc

08004680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e11e      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004698:	4b91      	ldr	r3, [pc, #580]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d910      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b8e      	ldr	r3, [pc, #568]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 020f 	bic.w	r2, r3, #15
 80046ae:	498c      	ldr	r1, [pc, #560]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b8a      	ldr	r3, [pc, #552]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e106      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d073      	beq.n	80047bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d129      	bne.n	8004730 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046dc:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0f4      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046ec:	f000 f99e 	bl	8004a2c <RCC_GetSysClockFreqFromPLLSource>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4a7c      	ldr	r2, [pc, #496]	; (80048e8 <HAL_RCC_ClockConfig+0x268>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d93f      	bls.n	800477a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046fa:	4b7a      	ldr	r3, [pc, #488]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800470e:	2b00      	cmp	r3, #0
 8004710:	d033      	beq.n	800477a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004716:	2b00      	cmp	r3, #0
 8004718:	d12f      	bne.n	800477a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471a:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	4a70      	ldr	r2, [pc, #448]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	e024      	b.n	800477a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004738:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0c6      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0be      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004758:	f000 f8ce 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 800475c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4a61      	ldr	r2, [pc, #388]	; (80048e8 <HAL_RCC_ClockConfig+0x268>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d909      	bls.n	800477a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004766:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476e:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4957      	ldr	r1, [pc, #348]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fc ff2a 	bl	80015e4 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fc ff26 	bl	80015e4 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e095      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047ec:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f4:	4a3b      	ldr	r2, [pc, #236]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4936      	ldr	r1, [pc, #216]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
 800480e:	e008      	b.n	8004822 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d105      	bne.n	8004822 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4a32      	ldr	r2, [pc, #200]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800481c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004820:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004822:	4b2f      	ldr	r3, [pc, #188]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d21d      	bcs.n	800486c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 020f 	bic.w	r2, r3, #15
 8004838:	4929      	ldr	r1, [pc, #164]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004840:	f7fc fed0 	bl	80015e4 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fc fecc 	bl	80015e4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e03b      	b.n	80048d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_RCC_ClockConfig+0x260>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d1ed      	bne.n	8004848 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4917      	ldr	r1, [pc, #92]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490f      	ldr	r1, [pc, #60]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048aa:	f000 f825 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_RCC_ClockConfig+0x264>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490c      	ldr	r1, [pc, #48]	; (80048ec <HAL_RCC_ClockConfig+0x26c>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <HAL_RCC_ClockConfig+0x270>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x274>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc fe3c 	bl	800154c <HAL_InitTick>
 80048d4:	4603      	mov	r3, r0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40021000 	.word	0x40021000
 80048e8:	04c4b400 	.word	0x04c4b400
 80048ec:	080069c0 	.word	0x080069c0
 80048f0:	200002e4 	.word	0x200002e4
 80048f4:	200002e8 	.word	0x200002e8

080048f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048fe:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b04      	cmp	r3, #4
 8004908:	d102      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490a:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e047      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004910:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b08      	cmp	r3, #8
 800491a:	d102      	bne.n	8004922 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e03e      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b0c      	cmp	r3, #12
 800492c:	d136      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3301      	adds	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	0a12      	lsrs	r2, r2, #8
 800495a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	617b      	str	r3, [r7, #20]
      break;
 8004964:	e00c      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004966:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
      break;
 800497e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e001      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049a0:	693b      	ldr	r3, [r7, #16]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	016e3600 	.word	0x016e3600

080049bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	200002e4 	.word	0x200002e4

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049d8:	f7ff fff0 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	080069d0 	.word	0x080069d0

08004a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a04:	f7ff ffda 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0adb      	lsrs	r3, r3, #11
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4904      	ldr	r1, [pc, #16]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	080069d0 	.word	0x080069d0

08004a2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d10c      	bne.n	8004a6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a5a:	68d2      	ldr	r2, [r2, #12]
 8004a5c:	0a12      	lsrs	r2, r2, #8
 8004a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	617b      	str	r3, [r7, #20]
    break;
 8004a68:	e00c      	b.n	8004a84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	0a12      	lsrs	r2, r2, #8
 8004a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    break;
 8004a82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0e5b      	lsrs	r3, r3, #25
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a9e:	687b      	ldr	r3, [r7, #4]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	016e3600 	.word	0x016e3600
 8004ab4:	00f42400 	.word	0x00f42400

08004ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8098 	beq.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ada:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
 8004af2:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afe:	2301      	movs	r3, #1
 8004b00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b02:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a39      	ldr	r2, [pc, #228]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0e:	f7fc fd69 	bl	80015e4 <HAL_GetTick>
 8004b12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b14:	e009      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fc fd65 	bl	80015e4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	74fb      	strb	r3, [r7, #19]
        break;
 8004b28:	e005      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b2a:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ef      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d159      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d019      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b84:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fc fd25 	bl	80015e4 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fc fd21 	bl	80015e4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d902      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ec      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bc4:	7cfb      	ldrb	r3, [r7, #19]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be0:	e008      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	74bb      	strb	r3, [r7, #18]
 8004be6:	e005      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	7c7b      	ldrb	r3, [r7, #17]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4ba7      	ldr	r3, [pc, #668]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4aa6      	ldr	r2, [pc, #664]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c12:	4ba1      	ldr	r3, [pc, #644]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 0203 	bic.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	499d      	ldr	r1, [pc, #628]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c34:	4b98      	ldr	r3, [pc, #608]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 020c 	bic.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4995      	ldr	r1, [pc, #596]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c56:	4b90      	ldr	r3, [pc, #576]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	498c      	ldr	r1, [pc, #560]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c78:	4b87      	ldr	r3, [pc, #540]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4984      	ldr	r1, [pc, #528]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	497b      	ldr	r1, [pc, #492]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbc:	4b76      	ldr	r3, [pc, #472]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	4973      	ldr	r1, [pc, #460]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cde:	4b6e      	ldr	r3, [pc, #440]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	496a      	ldr	r1, [pc, #424]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d00:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4962      	ldr	r1, [pc, #392]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d22:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	4959      	ldr	r1, [pc, #356]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d44:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	4951      	ldr	r1, [pc, #324]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d66:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4948      	ldr	r1, [pc, #288]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d015      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d88:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4940      	ldr	r1, [pc, #256]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da6:	d105      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4a3a      	ldr	r2, [pc, #232]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d015      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc0:	4b35      	ldr	r3, [pc, #212]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	4932      	ldr	r1, [pc, #200]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dde:	d105      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	4924      	ldr	r1, [pc, #144]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e16:	d105      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e18:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	4916      	ldr	r1, [pc, #88]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d019      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4908      	ldr	r1, [pc, #32]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a02      	ldr	r2, [pc, #8]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e92:	60d3      	str	r3, [r2, #12]
 8004e94:	e002      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	4926      	ldr	r1, [pc, #152]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eee:	4918      	ldr	r1, [pc, #96]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d105      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f00:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	490a      	ldr	r1, [pc, #40]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f44:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e042      	b.n	8004fec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc f89d 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2224      	movs	r2, #36	; 0x24
 8004f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 ff56 	bl	8005e50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fc57 	bl	8005858 <UART_SetConfig>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01b      	b.n	8004fec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 ffd5 	bl	8005f94 <UART_CheckIdleState>
 8004fea:	4603      	mov	r3, r0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	2b20      	cmp	r3, #32
 800500c:	d17b      	bne.n	8005106 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Transmit+0x26>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e074      	b.n	8005108 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2221      	movs	r2, #33	; 0x21
 800502a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502e:	f7fc fad9 	bl	80015e4 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d108      	bne.n	8005060 <HAL_UART_Transmit+0x6c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e003      	b.n	8005068 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005068:	e030      	b.n	80050cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	2180      	movs	r1, #128	; 0x80
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f001 f837 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e03d      	b.n	8005108 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3302      	adds	r3, #2
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e007      	b.n	80050ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1c8      	bne.n	800506a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f001 f800 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e006      	b.n	8005108 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	2b20      	cmp	r3, #32
 8005126:	d137      	bne.n	8005198 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Receive_DMA+0x24>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e030      	b.n	800519a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <HAL_UART_Receive_DMA+0x94>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d01f      	beq.n	8005188 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d018      	beq.n	8005188 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	613b      	str	r3, [r7, #16]
   return(result);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69f9      	ldr	r1, [r7, #28]
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	61bb      	str	r3, [r7, #24]
   return(result);
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	461a      	mov	r2, r3
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f001 f818 	bl	80061c4 <UART_Start_Receive_DMA>
 8005194:	4603      	mov	r3, r0
 8005196:	e000      	b.n	800519a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005198:	2302      	movs	r3, #2
  }
}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40008000 	.word	0x40008000

080051a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b0ba      	sub	sp, #232	; 0xe8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80051d6:	4013      	ands	r3, r2
 80051d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11b      	bne.n	800521c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 82e3 	beq.w	80057d8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
      }
      return;
 800521a:	e2dd      	b.n	80057d8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800521c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8123 	beq.w	800546c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800522a:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <HAL_UART_IRQHandler+0x2b8>)
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005236:	4b8b      	ldr	r3, [pc, #556]	; (8005464 <HAL_UART_IRQHandler+0x2bc>)
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8116 	beq.w	800546c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_UART_IRQHandler+0xc8>
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2201      	movs	r2, #1
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d011      	beq.n	80052a0 <HAL_UART_IRQHandler+0xf8>
 800527c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2202      	movs	r2, #2
 800528e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d011      	beq.n	80052d0 <HAL_UART_IRQHandler+0x128>
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2204      	movs	r2, #4
 80052be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d017      	beq.n	800530c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052ec:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_UART_IRQHandler+0x2b8>)
 80052ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2208      	movs	r2, #8
 80052fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <HAL_UART_IRQHandler+0x196>
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800532c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8249 	beq.w	80057dc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800539a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d054      	beq.n	800544c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fff5 	bl	8006392 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d146      	bne.n	8005444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1d9      	bne.n	80053b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <HAL_UART_IRQHandler+0x2c0>)
 8005414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	4618      	mov	r0, r3
 800541e:	f7fc fb9b 	bl	8001b58 <HAL_DMA_Abort_IT>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d019      	beq.n	800545c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005436:	4610      	mov	r0, r2
 8005438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	e00f      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f9f5 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005442:	e00b      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9f1 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544a:	e007      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f9ed 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800545a:	e1bf      	b.n	80057dc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	bf00      	nop
    return;
 800545e:	e1bd      	b.n	80057dc <HAL_UART_IRQHandler+0x634>
 8005460:	10000001 	.word	0x10000001
 8005464:	04000120 	.word	0x04000120
 8005468:	08006649 	.word	0x08006649

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 8153 	bne.w	800571c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 814c 	beq.w	800571c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8145 	beq.w	800571c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2210      	movs	r2, #16
 8005498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	f040 80bb 	bne.w	8005620 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 818f 	beq.w	80057e0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054cc:	429a      	cmp	r2, r3
 80054ce:	f080 8187 	bcs.w	80057e0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 8087 	bne.w	80055fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800551a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800551e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1da      	bne.n	80054f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800554a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005562:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800559a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800559c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055cc:	f023 0310 	bic.w	r3, r3, #16
 80055d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055de:	65bb      	str	r3, [r7, #88]	; 0x58
 80055e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e4      	bne.n	80055bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fc fa54 	bl	8001aa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f911 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561e:	e0df      	b.n	80057e0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80cc 	beq.w	80057e4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800566e:	647b      	str	r3, [r7, #68]	; 0x44
 8005670:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e4      	bne.n	800564c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056aa:	633a      	str	r2, [r7, #48]	; 0x30
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e1      	bne.n	8005682 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	617b      	str	r3, [r7, #20]
   return(result);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e4      	bne.n	80056d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800570e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f893 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800571a:	e063      	b.n	80057e4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <HAL_UART_IRQHandler+0x59e>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800573c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 ffc3 	bl	80066ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005744:	e051      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800575e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d03a      	beq.n	80057e8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
    }
    return;
 800577a:	e035      	b.n	80057e8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_UART_IRQHandler+0x5f4>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 ff6d 	bl	8006674 <UART_EndTransmit_IT>
    return;
 800579a:	e026      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_UART_IRQHandler+0x614>
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 ff9c 	bl	80066f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ba:	e016      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_UART_IRQHandler+0x642>
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da0c      	bge.n	80057ea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 ff84 	bl	80066de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d6:	e008      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057d8:	bf00      	nop
 80057da:	e006      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
    return;
 80057dc:	bf00      	nop
 80057de:	e004      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057e0:	bf00      	nop
 80057e2:	e002      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
    return;
 80057e8:	bf00      	nop
  }
}
 80057ea:	37e8      	adds	r7, #232	; 0xe8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b08c      	sub	sp, #48	; 0x30
 800585e:	af00      	add	r7, sp, #0
 8005860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	431a      	orrs	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	431a      	orrs	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	4313      	orrs	r3, r2
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4baa      	ldr	r3, [pc, #680]	; (8005b30 <UART_SetConfig+0x2d8>)
 8005888:	4013      	ands	r3, r2
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005890:	430b      	orrs	r3, r1
 8005892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a9f      	ldr	r2, [pc, #636]	; (8005b34 <UART_SetConfig+0x2dc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c0:	4313      	orrs	r3, r2
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058d8:	430b      	orrs	r3, r1
 80058da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f023 010f 	bic.w	r1, r3, #15
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a90      	ldr	r2, [pc, #576]	; (8005b38 <UART_SetConfig+0x2e0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d125      	bne.n	8005948 <UART_SetConfig+0xf0>
 80058fc:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <UART_SetConfig+0x2e4>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d81a      	bhi.n	8005940 <UART_SetConfig+0xe8>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0xb8>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	08005931 	.word	0x08005931
 8005918:	08005929 	.word	0x08005929
 800591c:	08005939 	.word	0x08005939
 8005920:	2301      	movs	r3, #1
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e116      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005928:	2302      	movs	r3, #2
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e112      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e10e      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593e:	e10a      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005946:	e106      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <UART_SetConfig+0x2e8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d138      	bne.n	80059c4 <UART_SetConfig+0x16c>
 8005952:	4b7a      	ldr	r3, [pc, #488]	; (8005b3c <UART_SetConfig+0x2e4>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b0c      	cmp	r3, #12
 800595e:	d82d      	bhi.n	80059bc <UART_SetConfig+0x164>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <UART_SetConfig+0x110>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	0800599d 	.word	0x0800599d
 800596c:	080059bd 	.word	0x080059bd
 8005970:	080059bd 	.word	0x080059bd
 8005974:	080059bd 	.word	0x080059bd
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059bd 	.word	0x080059bd
 8005980:	080059bd 	.word	0x080059bd
 8005984:	080059bd 	.word	0x080059bd
 8005988:	080059a5 	.word	0x080059a5
 800598c:	080059bd 	.word	0x080059bd
 8005990:	080059bd 	.word	0x080059bd
 8005994:	080059bd 	.word	0x080059bd
 8005998:	080059b5 	.word	0x080059b5
 800599c:	2300      	movs	r3, #0
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e0d8      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e0d4      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e0d0      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ba:	e0cc      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c2:	e0c8      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5e      	ldr	r2, [pc, #376]	; (8005b44 <UART_SetConfig+0x2ec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d125      	bne.n	8005a1a <UART_SetConfig+0x1c2>
 80059ce:	4b5b      	ldr	r3, [pc, #364]	; (8005b3c <UART_SetConfig+0x2e4>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059d8:	2b30      	cmp	r3, #48	; 0x30
 80059da:	d016      	beq.n	8005a0a <UART_SetConfig+0x1b2>
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	d818      	bhi.n	8005a12 <UART_SetConfig+0x1ba>
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d00a      	beq.n	80059fa <UART_SetConfig+0x1a2>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d814      	bhi.n	8005a12 <UART_SetConfig+0x1ba>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <UART_SetConfig+0x19a>
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d008      	beq.n	8005a02 <UART_SetConfig+0x1aa>
 80059f0:	e00f      	b.n	8005a12 <UART_SetConfig+0x1ba>
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f8:	e0ad      	b.n	8005b56 <UART_SetConfig+0x2fe>
 80059fa:	2302      	movs	r3, #2
 80059fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a00:	e0a9      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a02:	2304      	movs	r3, #4
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a08:	e0a5      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a10:	e0a1      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a12:	2310      	movs	r3, #16
 8005a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a18:	e09d      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4a      	ldr	r2, [pc, #296]	; (8005b48 <UART_SetConfig+0x2f0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d125      	bne.n	8005a70 <UART_SetConfig+0x218>
 8005a24:	4b45      	ldr	r3, [pc, #276]	; (8005b3c <UART_SetConfig+0x2e4>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a30:	d016      	beq.n	8005a60 <UART_SetConfig+0x208>
 8005a32:	2bc0      	cmp	r3, #192	; 0xc0
 8005a34:	d818      	bhi.n	8005a68 <UART_SetConfig+0x210>
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d00a      	beq.n	8005a50 <UART_SetConfig+0x1f8>
 8005a3a:	2b80      	cmp	r3, #128	; 0x80
 8005a3c:	d814      	bhi.n	8005a68 <UART_SetConfig+0x210>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <UART_SetConfig+0x1f0>
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d008      	beq.n	8005a58 <UART_SetConfig+0x200>
 8005a46:	e00f      	b.n	8005a68 <UART_SetConfig+0x210>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e082      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a50:	2302      	movs	r3, #2
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e07e      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	e07a      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e076      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e072      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <UART_SetConfig+0x2f4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d12a      	bne.n	8005ad0 <UART_SetConfig+0x278>
 8005a7a:	4b30      	ldr	r3, [pc, #192]	; (8005b3c <UART_SetConfig+0x2e4>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a88:	d01a      	beq.n	8005ac0 <UART_SetConfig+0x268>
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8e:	d81b      	bhi.n	8005ac8 <UART_SetConfig+0x270>
 8005a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a94:	d00c      	beq.n	8005ab0 <UART_SetConfig+0x258>
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d815      	bhi.n	8005ac8 <UART_SetConfig+0x270>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <UART_SetConfig+0x250>
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa4:	d008      	beq.n	8005ab8 <UART_SetConfig+0x260>
 8005aa6:	e00f      	b.n	8005ac8 <UART_SetConfig+0x270>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e052      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab6:	e04e      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005abe:	e04a      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac6:	e046      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ace:	e042      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <UART_SetConfig+0x2dc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d13a      	bne.n	8005b50 <UART_SetConfig+0x2f8>
 8005ada:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <UART_SetConfig+0x2e4>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae8:	d01a      	beq.n	8005b20 <UART_SetConfig+0x2c8>
 8005aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aee:	d81b      	bhi.n	8005b28 <UART_SetConfig+0x2d0>
 8005af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af4:	d00c      	beq.n	8005b10 <UART_SetConfig+0x2b8>
 8005af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005afa:	d815      	bhi.n	8005b28 <UART_SetConfig+0x2d0>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <UART_SetConfig+0x2b0>
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0x2c0>
 8005b06:	e00f      	b.n	8005b28 <UART_SetConfig+0x2d0>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	e022      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005b10:	2302      	movs	r3, #2
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b16:	e01e      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	e01a      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b26:	e016      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	e012      	b.n	8005b56 <UART_SetConfig+0x2fe>
 8005b30:	cfff69f3 	.word	0xcfff69f3
 8005b34:	40008000 	.word	0x40008000
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40004400 	.word	0x40004400
 8005b44:	40004800 	.word	0x40004800
 8005b48:	40004c00 	.word	0x40004c00
 8005b4c:	40005000 	.word	0x40005000
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4aae      	ldr	r2, [pc, #696]	; (8005e14 <UART_SetConfig+0x5bc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 8097 	bne.w	8005c90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d823      	bhi.n	8005bb2 <UART_SetConfig+0x35a>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x318>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005bb3 	.word	0x08005bb3
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005bb3 	.word	0x08005bb3
 8005b80:	08005ba3 	.word	0x08005ba3
 8005b84:	08005bb3 	.word	0x08005bb3
 8005b88:	08005bb3 	.word	0x08005bb3
 8005b8c:	08005bb3 	.word	0x08005bb3
 8005b90:	08005bab 	.word	0x08005bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fe ff1e 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b9a:	e010      	b.n	8005bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b9c:	4b9e      	ldr	r3, [pc, #632]	; (8005e18 <UART_SetConfig+0x5c0>)
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba0:	e00d      	b.n	8005bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba2:	f7fe fea9 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba8:	e009      	b.n	8005bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bb0:	e005      	b.n	8005bbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8130 	beq.w	8005e26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	4a94      	ldr	r2, [pc, #592]	; (8005e1c <UART_SetConfig+0x5c4>)
 8005bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d305      	bcc.n	8005bf6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d903      	bls.n	8005bfe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bfc:	e113      	b.n	8005e26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2200      	movs	r2, #0
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	60fa      	str	r2, [r7, #12]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	4a84      	ldr	r2, [pc, #528]	; (8005e1c <UART_SetConfig+0x5c4>)
 8005c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2200      	movs	r2, #0
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c20:	f7fa fb02 	bl	8000228 <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	020b      	lsls	r3, r1, #8
 8005c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c3a:	0202      	lsls	r2, r0, #8
 8005c3c:	6979      	ldr	r1, [r7, #20]
 8005c3e:	6849      	ldr	r1, [r1, #4]
 8005c40:	0849      	lsrs	r1, r1, #1
 8005c42:	2000      	movs	r0, #0
 8005c44:	460c      	mov	r4, r1
 8005c46:	4605      	mov	r5, r0
 8005c48:	eb12 0804 	adds.w	r8, r2, r4
 8005c4c:	eb43 0905 	adc.w	r9, r3, r5
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	469a      	mov	sl, r3
 8005c58:	4693      	mov	fp, r2
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	465b      	mov	r3, fp
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	f7fa fae1 	bl	8000228 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c74:	d308      	bcc.n	8005c88 <UART_SetConfig+0x430>
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7c:	d204      	bcs.n	8005c88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	e0ce      	b.n	8005e26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c8e:	e0ca      	b.n	8005e26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c98:	d166      	bne.n	8005d68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d827      	bhi.n	8005cf2 <UART_SetConfig+0x49a>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x450>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	08005cf3 	.word	0x08005cf3
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005cf3 	.word	0x08005cf3
 8005cc0:	08005cf3 	.word	0x08005cf3
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	08005ceb 	.word	0x08005ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fe fe82 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8005cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd2:	e014      	b.n	8005cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd4:	f7fe fe94 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cda:	e010      	b.n	8005cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cdc:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <UART_SetConfig+0x5c0>)
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ce0:	e00d      	b.n	8005cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce2:	f7fe fe09 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce8:	e009      	b.n	8005cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cf0:	e005      	b.n	8005cfe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8090 	beq.w	8005e26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <UART_SetConfig+0x5c4>)
 8005d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d18:	005a      	lsls	r2, r3, #1
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	441a      	add	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b0f      	cmp	r3, #15
 8005d30:	d916      	bls.n	8005d60 <UART_SetConfig+0x508>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d212      	bcs.n	8005d60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f023 030f 	bic.w	r3, r3, #15
 8005d42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	8bfb      	ldrh	r3, [r7, #30]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	8bfa      	ldrh	r2, [r7, #30]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	e062      	b.n	8005e26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d66:	e05e      	b.n	8005e26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d828      	bhi.n	8005dc2 <UART_SetConfig+0x56a>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0x520>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dc3 	.word	0x08005dc3
 8005d88:	08005db3 	.word	0x08005db3
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005dc3 	.word	0x08005dc3
 8005d94:	08005dc3 	.word	0x08005dc3
 8005d98:	08005dbb 	.word	0x08005dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d9c:	f7fe fe1a 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da2:	e014      	b.n	8005dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7fe fe2c 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 8005da8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005daa:	e010      	b.n	8005dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dac:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <UART_SetConfig+0x5c0>)
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db0:	e00d      	b.n	8005dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db2:	f7fe fda1 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db8:	e009      	b.n	8005dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dc0:	e005      	b.n	8005dce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d028      	beq.n	8005e26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <UART_SetConfig+0x5c4>)
 8005dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	441a      	add	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d910      	bls.n	8005e20 <UART_SetConfig+0x5c8>
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d20c      	bcs.n	8005e20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e009      	b.n	8005e26 <UART_SetConfig+0x5ce>
 8005e12:	bf00      	nop
 8005e14:	40008000 	.word	0x40008000
 8005e18:	00f42400 	.word	0x00f42400
 8005e1c:	080069d8 	.word	0x080069d8
      }
      else
      {
        ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3730      	adds	r7, #48	; 0x30
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4e:	d10a      	bne.n	8005f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b098      	sub	sp, #96	; 0x60
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fa4:	f7fb fb1e 	bl	80015e4 <HAL_GetTick>
 8005fa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d12f      	bne.n	8006018 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f88e 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d022      	beq.n	8006018 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e6      	bne.n	8005fd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e063      	b.n	80060e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b04      	cmp	r3, #4
 8006024:	d149      	bne.n	80060ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006026:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602e:	2200      	movs	r2, #0
 8006030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f857 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d03c      	beq.n	80060ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	623b      	str	r3, [r7, #32]
   return(result);
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
 8006060:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	60fb      	str	r3, [r7, #12]
   return(result);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	64bb      	str	r3, [r7, #72]	; 0x48
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006092:	61fa      	str	r2, [r7, #28]
 8006094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	69b9      	ldr	r1, [r7, #24]
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	617b      	str	r3, [r7, #20]
   return(result);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e012      	b.n	80060e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3758      	adds	r7, #88	; 0x58
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f8:	e04f      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d04b      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006102:	f7fb fa6f 	bl	80015e4 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	429a      	cmp	r2, r3
 8006110:	d302      	bcc.n	8006118 <UART_WaitOnFlagUntilTimeout+0x30>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e04e      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d037      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d034      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d031      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b08      	cmp	r3, #8
 8006142:	d110      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f920 	bl	8006392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2208      	movs	r2, #8
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e029      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006174:	d111      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800617e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f906 	bl	8006392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e00f      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4013      	ands	r3, r2
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	bf0c      	ite	eq
 80061aa:	2301      	moveq	r3, #1
 80061ac:	2300      	movne	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d0a0      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b096      	sub	sp, #88	; 0x58
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2222      	movs	r2, #34	; 0x22
 80061ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02d      	beq.n	8006256 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006200:	4a40      	ldr	r2, [pc, #256]	; (8006304 <UART_Start_Receive_DMA+0x140>)
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620a:	4a3f      	ldr	r2, [pc, #252]	; (8006308 <UART_Start_Receive_DMA+0x144>)
 800620c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006214:	4a3d      	ldr	r2, [pc, #244]	; (800630c <UART_Start_Receive_DMA+0x148>)
 8006216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621e:	2200      	movs	r2, #0
 8006220:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	4619      	mov	r1, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	461a      	mov	r2, r3
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	f7fb fbba 	bl	80019b0 <HAL_DMA_Start_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2210      	movs	r2, #16
 8006246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e051      	b.n	80062fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627c:	64bb      	str	r3, [r7, #72]	; 0x48
 800627e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062b0:	637a      	str	r2, [r7, #52]	; 0x34
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e5      	bne.n	8006290 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	613b      	str	r3, [r7, #16]
   return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3308      	adds	r3, #8
 80062e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062e4:	623a      	str	r2, [r7, #32]
 80062e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	69f9      	ldr	r1, [r7, #28]
 80062ea:	6a3a      	ldr	r2, [r7, #32]
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e5      	bne.n	80062c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3758      	adds	r7, #88	; 0x58
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	0800645f 	.word	0x0800645f
 8006308:	0800658b 	.word	0x0800658b
 800630c:	080065c9 	.word	0x080065c9

08006310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b08f      	sub	sp, #60	; 0x3c
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	61fb      	str	r3, [r7, #28]
   return(result);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006338:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e6      	bne.n	8006318 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	60bb      	str	r3, [r7, #8]
   return(result);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006360:	633b      	str	r3, [r7, #48]	; 0x30
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	61ba      	str	r2, [r7, #24]
 800636c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	613b      	str	r3, [r7, #16]
   return(result);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006386:	bf00      	nop
 8006388:	373c      	adds	r7, #60	; 0x3c
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006392:	b480      	push	{r7}
 8006394:	b095      	sub	sp, #84	; 0x54
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	61fb      	str	r3, [r7, #28]
   return(result);
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e3      	bne.n	80063cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d118      	bne.n	800643e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	60bb      	str	r3, [r7, #8]
   return(result);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f023 0310 	bic.w	r3, r3, #16
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	613b      	str	r3, [r7, #16]
   return(result);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e6      	bne.n	800640c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006452:	bf00      	nop
 8006454:	3754      	adds	r7, #84	; 0x54
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b09c      	sub	sp, #112	; 0x70
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d171      	bne.n	800655e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006496:	66bb      	str	r3, [r7, #104]	; 0x68
 8006498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	667b      	str	r3, [r7, #100]	; 0x64
 80064cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064d4:	647a      	str	r2, [r7, #68]	; 0x44
 80064d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	623b      	str	r3, [r7, #32]
   return(result);
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006508:	633a      	str	r2, [r7, #48]	; 0x30
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800650e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d118      	bne.n	800655e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	60fb      	str	r3, [r7, #12]
   return(result);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	617b      	str	r3, [r7, #20]
   return(result);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006560:	2200      	movs	r2, #0
 8006562:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d107      	bne.n	800657c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006572:	4619      	mov	r1, r3
 8006574:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006576:	f7ff f963 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800657a:	e002      	b.n	8006582 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800657c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800657e:	f7ff f941 	bl	8005804 <HAL_UART_RxCpltCallback>
}
 8006582:	bf00      	nop
 8006584:	3770      	adds	r7, #112	; 0x70
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d109      	bne.n	80065ba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff f944 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065b8:	e002      	b.n	80065c0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff f92c 	bl	8005818 <HAL_UART_RxHalfCpltCallback>
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d109      	bne.n	8006608 <UART_DMAError+0x40>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b21      	cmp	r3, #33	; 0x21
 80065f8:	d106      	bne.n	8006608 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006602:	6978      	ldr	r0, [r7, #20]
 8006604:	f7ff fe84 	bl	8006310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d109      	bne.n	800662a <UART_DMAError+0x62>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b22      	cmp	r3, #34	; 0x22
 800661a:	d106      	bne.n	800662a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2200      	movs	r2, #0
 8006620:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006624:	6978      	ldr	r0, [r7, #20]
 8006626:	f7ff feb4 	bl	8006392 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006630:	f043 0210 	orr.w	r2, r3, #16
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800663a:	6978      	ldr	r0, [r7, #20]
 800663c:	f7ff f8f6 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff f8e0 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	60bb      	str	r3, [r7, #8]
   return(result);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	613b      	str	r3, [r7, #16]
   return(result);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff f897 	bl	80057f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c2:	bf00      	nop
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_UARTEx_DisableFifoMode+0x16>
 8006718:	2302      	movs	r3, #2
 800671a:	e027      	b.n	800676c <HAL_UARTEx_DisableFifoMode+0x66>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	; 0x24
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800674a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e02d      	b.n	80067ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f84f 	bl	8006870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006808:	2302      	movs	r3, #2
 800680a:	e02d      	b.n	8006868 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2224      	movs	r2, #36	; 0x24
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f811 	bl	8006870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687c:	2b00      	cmp	r3, #0
 800687e:	d108      	bne.n	8006892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006890:	e031      	b.n	80068f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006892:	2308      	movs	r3, #8
 8006894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006896:	2308      	movs	r3, #8
 8006898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	0e5b      	lsrs	r3, r3, #25
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	0f5b      	lsrs	r3, r3, #29
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	7b3a      	ldrb	r2, [r7, #12]
 80068be:	4911      	ldr	r1, [pc, #68]	; (8006904 <UARTEx_SetNbDataToProcess+0x94>)
 80068c0:	5c8a      	ldrb	r2, [r1, r2]
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068c6:	7b3a      	ldrb	r2, [r7, #12]
 80068c8:	490f      	ldr	r1, [pc, #60]	; (8006908 <UARTEx_SetNbDataToProcess+0x98>)
 80068ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	7b7a      	ldrb	r2, [r7, #13]
 80068dc:	4909      	ldr	r1, [pc, #36]	; (8006904 <UARTEx_SetNbDataToProcess+0x94>)
 80068de:	5c8a      	ldrb	r2, [r1, r2]
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068e4:	7b7a      	ldrb	r2, [r7, #13]
 80068e6:	4908      	ldr	r1, [pc, #32]	; (8006908 <UARTEx_SetNbDataToProcess+0x98>)
 80068e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	080069f0 	.word	0x080069f0
 8006908:	080069f8 	.word	0x080069f8

0800690c <memset>:
 800690c:	4402      	add	r2, r0
 800690e:	4603      	mov	r3, r0
 8006910:	4293      	cmp	r3, r2
 8006912:	d100      	bne.n	8006916 <memset+0xa>
 8006914:	4770      	bx	lr
 8006916:	f803 1b01 	strb.w	r1, [r3], #1
 800691a:	e7f9      	b.n	8006910 <memset+0x4>

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4d0d      	ldr	r5, [pc, #52]	; (8006954 <__libc_init_array+0x38>)
 8006920:	4c0d      	ldr	r4, [pc, #52]	; (8006958 <__libc_init_array+0x3c>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	2600      	movs	r6, #0
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	4d0b      	ldr	r5, [pc, #44]	; (800695c <__libc_init_array+0x40>)
 800692e:	4c0c      	ldr	r4, [pc, #48]	; (8006960 <__libc_init_array+0x44>)
 8006930:	f000 f818 	bl	8006964 <_init>
 8006934:	1b64      	subs	r4, r4, r5
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	2600      	movs	r6, #0
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	08006a08 	.word	0x08006a08
 8006958:	08006a08 	.word	0x08006a08
 800695c:	08006a08 	.word	0x08006a08
 8006960:	08006a0c 	.word	0x08006a0c

08006964 <_init>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	bf00      	nop
 8006968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696a:	bc08      	pop	{r3}
 800696c:	469e      	mov	lr, r3
 800696e:	4770      	bx	lr

08006970 <_fini>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr
