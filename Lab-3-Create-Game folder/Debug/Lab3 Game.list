
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000208  0800694c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800694c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e19  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  00031094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a61  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253ea  00000000  00000000  00034a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114dc  00000000  00000000  00059e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec2ca  00000000  00000000  0006b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036d8  00000000  00000000  00157624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015acfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000208 	.word	0x20000208
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080066b4 	.word	0x080066b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000020c 	.word	0x2000020c
 8000214:	080066b4 	.word	0x080066b4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fe9f 	bl	800126a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f9a6 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fb0c 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fac8 	bl	8000ac8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 fa2c 	bl	8000994 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 f9ea 	bl	8000914 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fa74 	bl	8000a2c <MX_USART1_UART_Init>

    /* USER CODE BEGIN 3 */
	  // STM32 Part //

//	  TxSend();
	  Dummy();
 8000544:	f000 fbc8 	bl	8000cd8 <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 8000548:	2202      	movs	r2, #2
 800054a:	499a      	ldr	r1, [pc, #616]	; (80007b4 <main+0x290>)
 800054c:	489a      	ldr	r0, [pc, #616]	; (80007b8 <main+0x294>)
 800054e:	f004 fc87 	bl	8004e60 <HAL_UART_Receive_DMA>
	if(A==8){
 8000552:	4b9a      	ldr	r3, [pc, #616]	; (80007bc <main+0x298>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b08      	cmp	r3, #8
 8000558:	d11c      	bne.n	8000594 <main+0x70>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 800055a:	4899      	ldr	r0, [pc, #612]	; (80007c0 <main+0x29c>)
 800055c:	f7ff fe5c 	bl	8000218 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	2304      	movs	r3, #4
 8000566:	4996      	ldr	r1, [pc, #600]	; (80007c0 <main+0x29c>)
 8000568:	4893      	ldr	r0, [pc, #588]	; (80007b8 <main+0x294>)
 800056a:	f004 fbeb 	bl	8004d44 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 800056e:	2308      	movs	r3, #8
 8000570:	221b      	movs	r2, #27
 8000572:	4994      	ldr	r1, [pc, #592]	; (80007c4 <main+0x2a0>)
 8000574:	4890      	ldr	r0, [pc, #576]	; (80007b8 <main+0x294>)
 8000576:	f004 fbe5 	bl	8004d44 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,Lx, strlen(Lx), 4);
 800057a:	4893      	ldr	r0, [pc, #588]	; (80007c8 <main+0x2a4>)
 800057c:	f7ff fe4c 	bl	8000218 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	2304      	movs	r3, #4
 8000586:	4990      	ldr	r1, [pc, #576]	; (80007c8 <main+0x2a4>)
 8000588:	488b      	ldr	r0, [pc, #556]	; (80007b8 <main+0x294>)
 800058a:	f004 fbdb 	bl	8004d44 <HAL_UART_Transmit>
	  A=1;
 800058e:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <main+0x298>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000594:	4b89      	ldr	r3, [pc, #548]	; (80007bc <main+0x298>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d115      	bne.n	80005c8 <main+0xa4>
			HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fed4 	bl	800134c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 80005a4:	230a      	movs	r3, #10
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	4988      	ldr	r1, [pc, #544]	; (80007cc <main+0x2a8>)
 80005aa:	4883      	ldr	r0, [pc, #524]	; (80007b8 <main+0x294>)
 80005ac:	f004 fbca 	bl	8004d44 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 80005b0:	230a      	movs	r3, #10
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	4986      	ldr	r1, [pc, #536]	; (80007d0 <main+0x2ac>)
 80005b6:	4880      	ldr	r0, [pc, #512]	; (80007b8 <main+0x294>)
 80005b8:	f004 fbc4 	bl	8004d44 <HAL_UART_Transmit>
			A = 0;
 80005bc:	4b7f      	ldr	r3, [pc, #508]	; (80007bc <main+0x298>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005c2:	4b84      	ldr	r3, [pc, #528]	; (80007d4 <main+0x2b0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005c8:	4b82      	ldr	r3, [pc, #520]	; (80007d4 <main+0x2b0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d145      	bne.n	800065c <main+0x138>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005d0:	4b78      	ldr	r3, [pc, #480]	; (80007b4 <main+0x290>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b79      	cmp	r3, #121	; 0x79
 80005d6:	d120      	bne.n	800061a <main+0xf6>
 80005d8:	4b76      	ldr	r3, [pc, #472]	; (80007b4 <main+0x290>)
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	2b0d      	cmp	r3, #13
 80005de:	d11c      	bne.n	800061a <main+0xf6>
 80005e0:	4b7c      	ldr	r3, [pc, #496]	; (80007d4 <main+0x2b0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d118      	bne.n	800061a <main+0xf6>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005e8:	230a      	movs	r3, #10
 80005ea:	221e      	movs	r2, #30
 80005ec:	497a      	ldr	r1, [pc, #488]	; (80007d8 <main+0x2b4>)
 80005ee:	4872      	ldr	r0, [pc, #456]	; (80007b8 <main+0x294>)
 80005f0:	f004 fba8 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005f4:	2308      	movs	r3, #8
 80005f6:	220c      	movs	r2, #12
 80005f8:	4978      	ldr	r1, [pc, #480]	; (80007dc <main+0x2b8>)
 80005fa:	486f      	ldr	r0, [pc, #444]	; (80007b8 <main+0x294>)
 80005fc:	f004 fba2 	bl	8004d44 <HAL_UART_Transmit>
				score =+ 1;
 8000600:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x2bc>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
				A = 2;
 8000606:	4b6d      	ldr	r3, [pc, #436]	; (80007bc <main+0x298>)
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800060c:	4b69      	ldr	r3, [pc, #420]	; (80007b4 <main+0x290>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000612:	4b68      	ldr	r3, [pc, #416]	; (80007b4 <main+0x290>)
 8000614:	2200      	movs	r2, #0
 8000616:	705a      	strb	r2, [r3, #1]
 8000618:	e020      	b.n	800065c <main+0x138>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 800061a:	4b66      	ldr	r3, [pc, #408]	; (80007b4 <main+0x290>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b6e      	cmp	r3, #110	; 0x6e
 8000620:	d11c      	bne.n	800065c <main+0x138>
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <main+0x290>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	2b0d      	cmp	r3, #13
 8000628:	d118      	bne.n	800065c <main+0x138>
 800062a:	4b6a      	ldr	r3, [pc, #424]	; (80007d4 <main+0x2b0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d114      	bne.n	800065c <main+0x138>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000632:	230a      	movs	r3, #10
 8000634:	221e      	movs	r2, #30
 8000636:	496b      	ldr	r1, [pc, #428]	; (80007e4 <main+0x2c0>)
 8000638:	485f      	ldr	r0, [pc, #380]	; (80007b8 <main+0x294>)
 800063a:	f004 fb83 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 800063e:	2308      	movs	r3, #8
 8000640:	220c      	movs	r2, #12
 8000642:	4966      	ldr	r1, [pc, #408]	; (80007dc <main+0x2b8>)
 8000644:	485c      	ldr	r0, [pc, #368]	; (80007b8 <main+0x294>)
 8000646:	f004 fb7d 	bl	8004d44 <HAL_UART_Transmit>
				A = 2;
 800064a:	4b5c      	ldr	r3, [pc, #368]	; (80007bc <main+0x298>)
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000650:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <main+0x290>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000656:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <main+0x290>)
 8000658:	2200      	movs	r2, #0
 800065a:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <main+0x298>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d115      	bne.n	8000690 <main+0x16c>
			HAL_Delay(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000668:	f000 fe70 	bl	800134c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 800066c:	230a      	movs	r3, #10
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	495d      	ldr	r1, [pc, #372]	; (80007e8 <main+0x2c4>)
 8000672:	4851      	ldr	r0, [pc, #324]	; (80007b8 <main+0x294>)
 8000674:	f004 fb66 	bl	8004d44 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000678:	230a      	movs	r3, #10
 800067a:	2228      	movs	r2, #40	; 0x28
 800067c:	4954      	ldr	r1, [pc, #336]	; (80007d0 <main+0x2ac>)
 800067e:	484e      	ldr	r0, [pc, #312]	; (80007b8 <main+0x294>)
 8000680:	f004 fb60 	bl	8004d44 <HAL_UART_Transmit>
			A = 0;
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <main+0x298>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			mode = 2;
 800068a:	4b52      	ldr	r3, [pc, #328]	; (80007d4 <main+0x2b0>)
 800068c:	2202      	movs	r2, #2
 800068e:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 8000690:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <main+0x2b0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d147      	bne.n	8000728 <main+0x204>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <main+0x290>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b79      	cmp	r3, #121	; 0x79
 800069e:	d11d      	bne.n	80006dc <main+0x1b8>
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <main+0x290>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	2b0d      	cmp	r3, #13
 80006a6:	d119      	bne.n	80006dc <main+0x1b8>
 80006a8:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <main+0x2b0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d115      	bne.n	80006dc <main+0x1b8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80006b0:	230a      	movs	r3, #10
 80006b2:	221e      	movs	r2, #30
 80006b4:	4948      	ldr	r1, [pc, #288]	; (80007d8 <main+0x2b4>)
 80006b6:	4840      	ldr	r0, [pc, #256]	; (80007b8 <main+0x294>)
 80006b8:	f004 fb44 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006bc:	2308      	movs	r3, #8
 80006be:	220c      	movs	r2, #12
 80006c0:	4946      	ldr	r1, [pc, #280]	; (80007dc <main+0x2b8>)
 80006c2:	483d      	ldr	r0, [pc, #244]	; (80007b8 <main+0x294>)
 80006c4:	f004 fb3e 	bl	8004d44 <HAL_UART_Transmit>
				A = 3;
 80006c8:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <main+0x298>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006ce:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <main+0x290>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006d4:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <main+0x290>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	705a      	strb	r2, [r3, #1]
 80006da:	e025      	b.n	8000728 <main+0x204>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <main+0x290>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b6e      	cmp	r3, #110	; 0x6e
 80006e2:	d121      	bne.n	8000728 <main+0x204>
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <main+0x290>)
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	2b0d      	cmp	r3, #13
 80006ea:	d11d      	bne.n	8000728 <main+0x204>
 80006ec:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <main+0x2b0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d119      	bne.n	8000728 <main+0x204>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006f4:	230a      	movs	r3, #10
 80006f6:	221e      	movs	r2, #30
 80006f8:	493a      	ldr	r1, [pc, #232]	; (80007e4 <main+0x2c0>)
 80006fa:	482f      	ldr	r0, [pc, #188]	; (80007b8 <main+0x294>)
 80006fc:	f004 fb22 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000700:	2308      	movs	r3, #8
 8000702:	220c      	movs	r2, #12
 8000704:	4935      	ldr	r1, [pc, #212]	; (80007dc <main+0x2b8>)
 8000706:	482c      	ldr	r0, [pc, #176]	; (80007b8 <main+0x294>)
 8000708:	f004 fb1c 	bl	8004d44 <HAL_UART_Transmit>
				score = score + 1;
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <main+0x2bc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a33      	ldr	r2, [pc, #204]	; (80007e0 <main+0x2bc>)
 8000714:	6013      	str	r3, [r2, #0]
				A = 3;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0x298>)
 8000718:	2203      	movs	r2, #3
 800071a:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <main+0x290>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <main+0x290>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <main+0x298>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d115      	bne.n	800075c <main+0x238>
			HAL_Delay(500);
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f000 fe0a 	bl	800134c <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000738:	230a      	movs	r3, #10
 800073a:	2264      	movs	r2, #100	; 0x64
 800073c:	492b      	ldr	r1, [pc, #172]	; (80007ec <main+0x2c8>)
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <main+0x294>)
 8000740:	f004 fb00 	bl	8004d44 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000744:	230a      	movs	r3, #10
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	4921      	ldr	r1, [pc, #132]	; (80007d0 <main+0x2ac>)
 800074a:	481b      	ldr	r0, [pc, #108]	; (80007b8 <main+0x294>)
 800074c:	f004 fafa 	bl	8004d44 <HAL_UART_Transmit>
			A = 0;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <main+0x298>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <main+0x2b0>)
 8000758:	2203      	movs	r2, #3
 800075a:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0x2b0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d166      	bne.n	8000832 <main+0x30e>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <main+0x290>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b79      	cmp	r3, #121	; 0x79
 800076a:	d141      	bne.n	80007f0 <main+0x2cc>
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <main+0x290>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	2b0d      	cmp	r3, #13
 8000772:	d13d      	bne.n	80007f0 <main+0x2cc>
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <main+0x2b0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d139      	bne.n	80007f0 <main+0x2cc>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800077c:	230a      	movs	r3, #10
 800077e:	221e      	movs	r2, #30
 8000780:	4915      	ldr	r1, [pc, #84]	; (80007d8 <main+0x2b4>)
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x294>)
 8000784:	f004 fade 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000788:	2308      	movs	r3, #8
 800078a:	220c      	movs	r2, #12
 800078c:	4913      	ldr	r1, [pc, #76]	; (80007dc <main+0x2b8>)
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x294>)
 8000790:	f004 fad8 	bl	8004d44 <HAL_UART_Transmit>
				score = score + 1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <main+0x2bc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <main+0x2bc>)
 800079c:	6013      	str	r3, [r2, #0]
				A = 4;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <main+0x298>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <main+0x290>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80007aa:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <main+0x290>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
 80007b0:	e03f      	b.n	8000832 <main+0x30e>
 80007b2:	bf00      	nop
 80007b4:	20000520 	.word	0x20000520
 80007b8:	20000278 	.word	0x20000278
 80007bc:	200001f8 	.word	0x200001f8
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080066cc 	.word	0x080066cc
 80007c8:	20000020 	.word	0x20000020
 80007cc:	20000040 	.word	0x20000040
 80007d0:	2000016c 	.word	0x2000016c
 80007d4:	20000528 	.word	0x20000528
 80007d8:	20000194 	.word	0x20000194
 80007dc:	080066e8 	.word	0x080066e8
 80007e0:	20000524 	.word	0x20000524
 80007e4:	200001b4 	.word	0x200001b4
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	20000108 	.word	0x20000108
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <main+0x338>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b6e      	cmp	r3, #110	; 0x6e
 80007f6:	d11c      	bne.n	8000832 <main+0x30e>
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <main+0x338>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	2b0d      	cmp	r3, #13
 80007fe:	d118      	bne.n	8000832 <main+0x30e>
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <main+0x33c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d114      	bne.n	8000832 <main+0x30e>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000808:	230a      	movs	r3, #10
 800080a:	221e      	movs	r2, #30
 800080c:	4915      	ldr	r1, [pc, #84]	; (8000864 <main+0x340>)
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <main+0x344>)
 8000810:	f004 fa98 	bl	8004d44 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000814:	2308      	movs	r3, #8
 8000816:	220c      	movs	r2, #12
 8000818:	4914      	ldr	r1, [pc, #80]	; (800086c <main+0x348>)
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <main+0x344>)
 800081c:	f004 fa92 	bl	8004d44 <HAL_UART_Transmit>
				A = 4;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <main+0x34c>)
 8000822:	2204      	movs	r2, #4
 8000824:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <main+0x338>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <main+0x338>)
 800082e:	2200      	movs	r2, #0
 8000830:	705a      	strb	r2, [r3, #1]
			}
		}

		if(A == 4){
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <main+0x34c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d108      	bne.n	800084c <main+0x328>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	221e      	movs	r2, #30
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <main+0x350>)
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x344>)
 8000842:	f004 fa7f 	bl	8004d44 <HAL_UART_Transmit>
			A=0;
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <main+0x34c>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
		}

	  // I2C part //
	  EEPROMWriteExample();
 800084c:	f000 f9ec 	bl	8000c28 <EEPROMWriteExample>
	  EEPROMReadExample(eepromDataReadBack, 4);
 8000850:	2104      	movs	r1, #4
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <main+0x354>)
 8000854:	f000 fa1a 	bl	8000c8c <EEPROMReadExample>
	  Dummy();
 8000858:	e674      	b.n	8000544 <main+0x20>
 800085a:	bf00      	nop
 800085c:	20000520 	.word	0x20000520
 8000860:	20000528 	.word	0x20000528
 8000864:	200001b4 	.word	0x200001b4
 8000868:	20000278 	.word	0x20000278
 800086c:	080066e8 	.word	0x080066e8
 8000870:	200001f8 	.word	0x200001f8
 8000874:	200001d4 	.word	0x200001d4
 8000878:	20000530 	.word	0x20000530

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	2238      	movs	r2, #56	; 0x38
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fee6 	bl	800665c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800089e:	2000      	movs	r0, #0
 80008a0:	f003 f9d0 	bl	8003c44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008be:	2355      	movs	r3, #85	; 0x55
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fa6a 	bl	8003dac <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008de:	f000 fa13 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2303      	movs	r3, #3
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2104      	movs	r1, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fd68 	bl	80043d0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000906:	f000 f9ff 	bl	8000d08 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	; 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_I2C1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_I2C1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_I2C1_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <MX_I2C1_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_I2C1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_I2C1_Init+0x74>)
 8000950:	f001 fb45 	bl	8001fde <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 f9d5 	bl	8000d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_I2C1_Init+0x74>)
 8000962:	f003 f8d7 	bl	8003b14 <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f9cc 	bl	8000d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_I2C1_Init+0x74>)
 8000974:	f003 f919 	bl	8003baa <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f9c3 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000224 	.word	0x20000224
 800098c:	40005400 	.word	0x40005400
 8000990:	30a0a7fb 	.word	0x30a0a7fb

08000994 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <MX_LPUART1_UART_Init+0x94>)
 800099c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009dc:	f004 f962 	bl	8004ca4 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009e6:	f000 f98f 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009ee:	f005 fd6b 	bl	80064c8 <HAL_UARTEx_SetTxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009f8:	f000 f986 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 8000a00:	f005 fda0 	bl	8006544 <HAL_UARTEx_SetRxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000a0a:	f000 f97d 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 8000a10:	f005 fd21 	bl	8006456 <HAL_UARTEx_DisableFifoMode>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000a1a:	f000 f975 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000278 	.word	0x20000278
 8000a28:	40008000 	.word	0x40008000

08000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <MX_USART1_UART_Init+0x98>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a44:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a7a:	f004 f913 	bl	8004ca4 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 f940 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a8c:	f005 fd1c 	bl	80064c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 f937 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a9e:	f005 fd51 	bl	8006544 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000aa8:	f000 f92e 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000aae:	f005 fcd2 	bl	8006456 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 f926 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000030c 	.word	0x2000030c
 8000ac4:	40013800 	.word	0x40013800

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_DMA_Init+0x80>)
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <MX_DMA_Init+0x80>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6493      	str	r3, [r2, #72]	; 0x48
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_DMA_Init+0x80>)
 8000adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_DMA_Init+0x80>)
 8000ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <MX_DMA_Init+0x80>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6493      	str	r3, [r2, #72]	; 0x48
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_DMA_Init+0x80>)
 8000af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	200b      	movs	r0, #11
 8000b04:	f000 fd1f 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b08:	200b      	movs	r0, #11
 8000b0a:	f000 fd36 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	200c      	movs	r0, #12
 8000b14:	f000 fd17 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b18:	200c      	movs	r0, #12
 8000b1a:	f000 fd2e 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	200d      	movs	r0, #13
 8000b24:	f000 fd0f 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b28:	200d      	movs	r0, #13
 8000b2a:	f000 fd26 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200e      	movs	r0, #14
 8000b34:	f000 fd07 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b38:	200e      	movs	r0, #14
 8000b3a:	f000 fd1e 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0320 	and.w	r3, r3, #32
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f001 f9b3 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000be6:	f001 f823 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f001 f814 	bl	8001c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f000 fc9a 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f000 fcb1 	bl	800157a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000800 	.word	0x48000800

08000c28 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <EEPROMWriteExample+0x54>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d01f      	beq.n	8000c76 <EEPROMWriteExample+0x4e>
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <EEPROMWriteExample+0x58>)
 8000c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b20      	cmp	r3, #32
 8000c40:	d119      	bne.n	8000c76 <EEPROMWriteExample+0x4e>
	static uint8_t data[4];
	 data[0]=Rx[0];
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <EEPROMWriteExample+0x5c>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <EEPROMWriteExample+0x60>)
 8000c48:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <EEPROMWriteExample+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <EEPROMWriteExample+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <EEPROMWriteExample+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <EEPROMWriteExample+0x60>)
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2302      	movs	r3, #2
 8000c66:	222c      	movs	r2, #44	; 0x2c
 8000c68:	21a0      	movs	r1, #160	; 0xa0
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <EEPROMWriteExample+0x58>)
 8000c6c:	f001 fa52 	bl	8002114 <HAL_I2C_Mem_Write_IT>

		eepromExampleWriteFlag = 0;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <EEPROMWriteExample+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	}
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000052c 	.word	0x2000052c
 8000c80:	20000224 	.word	0x20000224
 8000c84:	200001f4 	.word	0x200001f4
 8000c88:	20000534 	.word	0x20000534

08000c8c <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <EEPROMReadExample+0x44>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d012      	beq.n	8000cc6 <EEPROMReadExample+0x3a>
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <EEPROMReadExample+0x48>)
 8000ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b20      	cmp	r3, #32
 8000caa:	d10c      	bne.n	8000cc6 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	222c      	movs	r2, #44	; 0x2c
 8000cb8:	21a0      	movs	r1, #160	; 0xa0
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <EEPROMReadExample+0x48>)
 8000cbc:	f001 fab4 	bl	8002228 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <EEPROMReadExample+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000052d 	.word	0x2000052d
 8000cd4:	20000224 	.word	0x20000224

08000cd8 <Dummy>:



// For LD2 Test //
void Dummy(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000cdc:	f000 fb2a 	bl	8001334 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <Dummy+0x2c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d30a      	bcc.n	8000d00 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000cea:	f000 fb23 	bl	8001334 <HAL_GetTick>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	3364      	adds	r3, #100	; 0x64
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <Dummy+0x2c>)
 8000cf4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f001 f932 	bl	8001f64 <HAL_GPIO_TogglePin>
	}
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000538 	.word	0x20000538

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x44>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x44>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d4a:	f003 f81f 	bl	8003d8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09e      	sub	sp, #120	; 0x78
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2254      	movs	r2, #84	; 0x54
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fc6d 	bl	800665c <memset>
  if(hi2c->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d146      	bne.n	8000e1a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fd35 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff ffb0 	bl	8000d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <HAL_I2C_MspInit+0xd0>)
 8000dde:	f000 ff27 	bl	8001c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	201f      	movs	r0, #31
 8000e00:	f000 fba1 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e04:	201f      	movs	r0, #31
 8000e06:	f000 fbb8 	bl	800157a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2020      	movs	r0, #32
 8000e10:	f000 fb99 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e14:	2020      	movs	r0, #32
 8000e16:	f000 fbb0 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3778      	adds	r7, #120	; 0x78
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005400 	.word	0x40005400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0a0      	sub	sp, #128	; 0x80
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	2254      	movs	r2, #84	; 0x54
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fc03 	bl	800665c <memset>
  if(huart->Instance==LPUART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a99      	ldr	r2, [pc, #612]	; (80010c0 <HAL_UART_MspInit+0x290>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f040 8093 	bne.w	8000f88 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e62:	2320      	movs	r3, #32
 8000e64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fcca 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e7a:	f7ff ff45 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e7e:	4b91      	ldr	r3, [pc, #580]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e82:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e8a:	4b8e      	ldr	r3, [pc, #568]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b8b      	ldr	r3, [pc, #556]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a8a      	ldr	r2, [pc, #552]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 feb0 	bl	8001c30 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8000ed0:	4b7d      	ldr	r3, [pc, #500]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	; (80010cc <HAL_UART_MspInit+0x29c>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ed8:	2223      	movs	r2, #35	; 0x23
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000edc:	4b7a      	ldr	r3, [pc, #488]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee2:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eee:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef4:	4b74      	ldr	r3, [pc, #464]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f00:	4b71      	ldr	r3, [pc, #452]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f06:	4870      	ldr	r0, [pc, #448]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000f08:	f000 fb52 	bl	80015b0 <HAL_DMA_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f12:	f7ff fef9 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a6b      	ldr	r2, [pc, #428]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000f1a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f1c:	4a6a      	ldr	r2, [pc, #424]	; (80010c8 <HAL_UART_MspInit+0x298>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000f22:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f24:	4a6b      	ldr	r2, [pc, #428]	; (80010d4 <HAL_UART_MspInit+0x2a4>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000f28:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f2a:	2222      	movs	r2, #34	; 0x22
 8000f2c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2e:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f34:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f40:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f46:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f4c:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f4e:	2220      	movs	r2, #32
 8000f50:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f58:	485d      	ldr	r0, [pc, #372]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f5a:	f000 fb29 	bl	80015b0 <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000f64:	f7ff fed0 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f70:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <HAL_UART_MspInit+0x2a0>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	205b      	movs	r0, #91	; 0x5b
 8000f7c:	f000 fae3 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000f80:	205b      	movs	r0, #91	; 0x5b
 8000f82:	f000 fafa 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f86:	e096      	b.n	80010b6 <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_UART_MspInit+0x2a8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	f040 8091 	bne.w	80010b6 <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fc31 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000fac:	f7ff feac 	bl	8000d08 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb0:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_UART_MspInit+0x294>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fe0:	2330      	movs	r3, #48	; 0x30
 8000fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4838      	ldr	r0, [pc, #224]	; (80010dc <HAL_UART_MspInit+0x2ac>)
 8000ffc:	f000 fe18 	bl	8001c30 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HAL_UART_MspInit+0x2b4>)
 8001004:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001008:	2218      	movs	r2, #24
 800100a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 800102c:	2220      	movs	r2, #32
 800102e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001036:	482a      	ldr	r0, [pc, #168]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001038:	f000 faba 	bl	80015b0 <HAL_DMA_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8001042:	f7ff fe61 	bl	8000d08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 800104a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_UART_MspInit+0x2b0>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_UART_MspInit+0x2bc>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 800105c:	2219      	movs	r2, #25
 800105e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001062:	2210      	movs	r2, #16
 8001064:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 800108c:	f000 fa90 	bl	80015b0 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001096:	f7ff fe37 	bl	8000d08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 800109e:	67da      	str	r2, [r3, #124]	; 0x7c
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x2b8>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2025      	movs	r0, #37	; 0x25
 80010ac:	f000 fa4b 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b0:	2025      	movs	r0, #37	; 0x25
 80010b2:	f000 fa62 	bl	800157a <HAL_NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3780      	adds	r7, #128	; 0x80
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40008000 	.word	0x40008000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	200003a0 	.word	0x200003a0
 80010cc:	40020008 	.word	0x40020008
 80010d0:	20000400 	.word	0x20000400
 80010d4:	4002001c 	.word	0x4002001c
 80010d8:	40013800 	.word	0x40013800
 80010dc:	48000800 	.word	0x48000800
 80010e0:	20000460 	.word	0x20000460
 80010e4:	40020030 	.word	0x40020030
 80010e8:	200004c0 	.word	0x200004c0
 80010ec:	40020044 	.word	0x40020044

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 f8e8 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA1_Channel1_IRQHandler+0x10>)
 800114a:	f000 fc14 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003a0 	.word	0x200003a0

08001158 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Channel2_IRQHandler+0x10>)
 800115e:	f000 fc0a 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000400 	.word	0x20000400

0800116c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Channel3_IRQHandler+0x10>)
 8001172:	f000 fc00 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000460 	.word	0x20000460

08001180 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA1_Channel4_IRQHandler+0x10>)
 8001186:	f000 fbf6 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200004c0 	.word	0x200004c0

08001194 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <I2C1_EV_IRQHandler+0x10>)
 800119a:	f001 f8cb 	bl	8002334 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000224 	.word	0x20000224

080011a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <I2C1_ER_IRQHandler+0x10>)
 80011ae:	f001 f8db 	bl	8002368 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000224 	.word	0x20000224

080011bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART1_IRQHandler+0x10>)
 80011c2:	f003 fe99 	bl	8004ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000030c 	.word	0x2000030c

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f000 fede 	bl	8001f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <LPUART1_IRQHandler+0x10>)
 80011e6:	f003 fe87 	bl	8004ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000278 	.word	0x20000278

080011f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800121c:	f7ff ffea 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <LoopForever+0x6>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <LoopForever+0xe>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	; (8001264 <LoopForever+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f005 fa11 	bl	800666c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124a:	f7ff f96b 	bl	8000524 <main>

0800124e <LoopForever>:

LoopForever:
    b LoopForever
 800124e:	e7fe      	b.n	800124e <LoopForever>
  ldr   r0, =_estack
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800125c:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 8001260:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001264:	20000540 	.word	0x20000540

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>

0800126a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f95b 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f80e 	bl	800129c <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e001      	b.n	8001290 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800128c:	f7ff fd42 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001290:	79fb      	ldrb	r3, [r7, #7]

}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_InitTick+0x68>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d022      	beq.n	80012f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_InitTick+0x6c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_InitTick+0x68>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f966 	bl	8001596 <HAL_SYSTICK_Config>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d809      	bhi.n	80012ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d6:	2200      	movs	r2, #0
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	f04f 30ff 	mov.w	r0, #4294967295
 80012de:	f000 f932 	bl	8001546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_InitTick+0x70>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e007      	b.n	80012fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e004      	b.n	80012fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000204 	.word	0x20000204
 8001308:	200001fc 	.word	0x200001fc
 800130c:	20000200 	.word	0x20000200

08001310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x1c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x20>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_IncTick+0x1c>)
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	2000053c 	.word	0x2000053c
 8001330:	20000204 	.word	0x20000204

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000053c 	.word	0x2000053c

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d004      	beq.n	8001370 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001370:	bf00      	nop
 8001372:	f7ff ffdf 	bl	8001334 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d8f7      	bhi.n	8001372 <HAL_Delay+0x26>
  {
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000204 	.word	0x20000204

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff40 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff33 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa4 	bl	80014ec <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e08d      	b.n	80016de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_DMA_Init+0x138>)
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d80f      	bhi.n	80015ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_DMA_Init+0x13c>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <HAL_DMA_Init+0x140>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	009a      	lsls	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a42      	ldr	r2, [pc, #264]	; (80016f4 <HAL_DMA_Init+0x144>)
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
 80015ec:	e00e      	b.n	800160c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_DMA_Init+0x148>)
 80015f6:	4413      	add	r3, r2
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_DMA_Init+0x140>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	009a      	lsls	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <HAL_DMA_Init+0x14c>)
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fa84 	bl	8001b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800166c:	d102      	bne.n	8001674 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001688:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d010      	beq.n	80016b4 <HAL_DMA_Init+0x104>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d80c      	bhi.n	80016b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 faa4 	bl	8001be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	e008      	b.n	80016c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40020407 	.word	0x40020407
 80016ec:	bffdfff8 	.word	0xbffdfff8
 80016f0:	cccccccd 	.word	0xcccccccd
 80016f4:	40020000 	.word	0x40020000
 80016f8:	bffdfbf8 	.word	0xbffdfbf8
 80016fc:	40020400 	.word	0x40020400

08001700 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_DMA_Start_IT+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e066      	b.n	80017ee <HAL_DMA_Start_IT+0xee>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d155      	bne.n	80017e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f9c9 	bl	8001af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 020e 	orr.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e00f      	b.n	8001798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 020a 	orr.w	r2, r2, #10
 8001796:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e005      	b.n	80017ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017e8:	2302      	movs	r3, #2
 80017ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d005      	beq.n	800181a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e037      	b.n	800188a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 020e 	bic.w	r2, r2, #14
 8001828:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001838:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001866:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001888:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d00d      	beq.n	80018dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e047      	b.n	800196c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 020e 	bic.w	r2, r2, #14
 80018ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800190a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001928:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800194a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    }
  }
  return status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2204      	movs	r2, #4
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d026      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x7a>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d021      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0204 	bic.w	r2, r2, #4
 80019c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f003 021f 	and.w	r2, r3, #31
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2104      	movs	r1, #4
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d071      	beq.n	8001aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019ee:	e06c      	b.n	8001aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2202      	movs	r2, #2
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d02e      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d029      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020a 	bic.w	r2, r2, #10
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2102      	movs	r1, #2
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d038      	beq.n	8001aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a60:	e033      	b.n	8001aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02a      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d025      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020e 	bic.w	r2, r2, #14
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
}
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 021f 	and.w	r2, r3, #31
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d108      	bne.n	8001b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b4e:	e007      	b.n	8001b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d802      	bhi.n	8001b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e001      	b.n	8001b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3b08      	subs	r3, #8
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4413      	add	r3, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020820 	.word	0x40020820
 8001be0:	cccccccd 	.word	0xcccccccd
 8001be4:	40020880 	.word	0x40020880

08001be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	1000823f 	.word	0x1000823f
 8001c2c:	40020940 	.word	0x40020940

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c3e:	e15a      	b.n	8001ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 814c 	beq.w	8001ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a6 	beq.w	8001ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da4:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	4a5a      	ldr	r2, [pc, #360]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6613      	str	r3, [r2, #96]	; 0x60
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbc:	4a56      	ldr	r2, [pc, #344]	; (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de6:	d01f      	beq.n	8001e28 <HAL_GPIO_Init+0x1f8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x2ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d019      	beq.n	8001e24 <HAL_GPIO_Init+0x1f4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_GPIO_Init+0x1f0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_GPIO_Init+0x2f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_GPIO_Init+0x1ec>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_GPIO_Init+0x2f8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <HAL_GPIO_Init+0x1e8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_GPIO_Init+0x2fc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_GPIO_Init+0x1e4>
 8001e10:	2305      	movs	r3, #5
 8001e12:	e00a      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e14:	2306      	movs	r3, #6
 8001e16:	e008      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e006      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e004      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	4093      	lsls	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3a:	4937      	ldr	r1, [pc, #220]	; (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e96:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae9d 	bne.w	8001c40 <HAL_GPIO_Init+0x10>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	48000800 	.word	0x48000800
 8001f24:	48000c00 	.word	0x48000c00
 8001f28:	48001000 	.word	0x48001000
 8001f2c:	48001400 	.word	0x48001400
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43d9      	mvns	r1, r3
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	400b      	ands	r3, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f806 	bl	8001fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e08d      	b.n	800210c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe fea9 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2224      	movs	r2, #36	; 0x24
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800202e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	e006      	b.n	8002066 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002064:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d108      	bne.n	8002080 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e007      	b.n	8002090 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69d9      	ldr	r1, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	4608      	mov	r0, r1
 800211e:	4611      	mov	r1, r2
 8002120:	461a      	mov	r2, r3
 8002122:	4603      	mov	r3, r0
 8002124:	817b      	strh	r3, [r7, #10]
 8002126:	460b      	mov	r3, r1
 8002128:	813b      	strh	r3, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d16a      	bne.n	8002210 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_I2C_Mem_Write_IT+0x32>
 8002140:	8bbb      	ldrh	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e05f      	b.n	8002212 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	e055      	b.n	8002212 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2C_Mem_Write_IT+0x60>
 8002170:	2302      	movs	r3, #2
 8002172:	e04e      	b.n	8002212 <HAL_I2C_Mem_Write_IT+0xfe>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8bba      	ldrh	r2, [r7, #28]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_I2C_Mem_Write_IT+0x108>)
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_I2C_Mem_Write_IT+0x10c>)
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80021b0:	897a      	ldrh	r2, [r7, #10]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d109      	bne.n	80021d0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	651a      	str	r2, [r3, #80]	; 0x50
 80021ce:	e00b      	b.n	80021e8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	8979      	ldrh	r1, [r7, #10]
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_I2C_Mem_Write_IT+0x110>)
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f001 fb78 	bl	80038ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002204:	2101      	movs	r1, #1
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f001 fba2 	bl	8003950 <I2C_Enable_IRQ>

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	ffff0000 	.word	0xffff0000
 8002220:	080024f1 	.word	0x080024f1
 8002224:	80002000 	.word	0x80002000

08002228 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	d166      	bne.n	800231c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_I2C_Mem_Read_IT+0x32>
 8002254:	8bbb      	ldrh	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e05b      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002274:	d101      	bne.n	800227a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	e051      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_Mem_Read_IT+0x60>
 8002284:	2302      	movs	r3, #2
 8002286:	e04a      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xf6>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2222      	movs	r2, #34	; 0x22
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8bba      	ldrh	r2, [r7, #28]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_I2C_Mem_Read_IT+0x100>)
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_I2C_Mem_Read_IT+0x104>)
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80022be:	897a      	ldrh	r2, [r7, #10]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d109      	bne.n	80022de <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	651a      	str	r2, [r3, #80]	; 0x50
 80022dc:	e00b      	b.n	80022f6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022de:	893b      	ldrh	r3, [r7, #8]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	8979      	ldrh	r1, [r7, #10]
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_I2C_Mem_Read_IT+0x108>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2300      	movs	r3, #0
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f001 faf2 	bl	80038ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002310:	2101      	movs	r1, #1
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f001 fb1c 	bl	8003950 <I2C_Enable_IRQ>

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	ffff0000 	.word	0xffff0000
 800232c:	080024f1 	.word	0x080024f1
 8002330:	80002000 	.word	0x80002000

08002334 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
  }
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00f      	beq.n	80023aa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00f      	beq.n	80023d4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0208 	orr.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f043 0202 	orr.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 030b 	and.w	r3, r3, #11
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f001 f911 	bl	8003638 <I2C_ITError>
  }
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
 800247a:	4613      	mov	r3, r2
 800247c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <I2C_Mem_ISR_IT+0x244>)
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <I2C_Mem_ISR_IT+0x22>
 800250e:	2302      	movs	r3, #2
 8002510:	e10c      	b.n	800272c <I2C_Mem_ISR_IT+0x23c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2210      	movs	r2, #16
 8002534:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 f98f 	bl	8003866 <I2C_Flush_TXDR>
 8002548:	e0dd      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d022      	beq.n	800259a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01d      	beq.n	800259a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002598:	e0b5      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02c      	beq.n	80025fe <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d027      	beq.n	80025fe <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d118      	bne.n	80025ea <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80025e8:	e08d      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80025fc:	e083      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800260e:	2b00      	cmp	r3, #0
 8002610:	d037      	beq.n	8002682 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02c      	beq.n	8002676 <I2C_Mem_ISR_IT+0x186>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d128      	bne.n	8002676 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d910      	bls.n	8002650 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	b299      	uxth	r1, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f001 f94f 	bl	80038ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264e:	e017      	b.n	8002680 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	b299      	uxth	r1, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f001 f93c 	bl	80038ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002674:	e004      	b.n	8002680 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 ffdd 	bl	8003638 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800267e:	e042      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
 8002680:	e041      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03c      	beq.n	8002706 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002692:	2b00      	cmp	r3, #0
 8002694:	d037      	beq.n	8002706 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002696:	2101      	movs	r1, #1
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f001 f9dd 	bl	8003a58 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800269e:	2102      	movs	r1, #2
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f001 f955 	bl	8003950 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b22      	cmp	r3, #34	; 0x22
 80026b0:	d101      	bne.n	80026b6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <I2C_Mem_ISR_IT+0x248>)
 80026b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2bff      	cmp	r3, #255	; 0xff
 80026be:	d910      	bls.n	80026e2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	b299      	uxth	r1, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 f906 	bl	80038ec <I2C_TransferConfig>
 80026e0:	e011      	b.n	8002706 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	b299      	uxth	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 f8f3 	bl	80038ec <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800271a:	6939      	ldr	r1, [r7, #16]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fd0b 	bl	8003138 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	80002000 	.word	0x80002000
 8002738:	80002400 	.word	0x80002400

0800273c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <I2C_Slave_ISR_IT+0x24>
 800275c:	2302      	movs	r3, #2
 800275e:	e0e2      	b.n	8002926 <I2C_Slave_ISR_IT+0x1ea>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fda2 	bl	80032c8 <I2C_ITSlaveCplt>
 8002784:	e0ca      	b.n	800291c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d04b      	beq.n	8002828 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002796:	2b00      	cmp	r3, #0
 8002798:	d046      	beq.n	8002828 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d128      	bne.n	80027f6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b28      	cmp	r3, #40	; 0x28
 80027ae:	d108      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x86>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b6:	d104      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027b8:	6939      	ldr	r1, [r7, #16]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fee8 	bl	8003590 <I2C_ITListenCplt>
 80027c0:	e031      	b.n	8002826 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b29      	cmp	r3, #41	; 0x29
 80027cc:	d10e      	bne.n	80027ec <I2C_Slave_ISR_IT+0xb0>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d4:	d00a      	beq.n	80027ec <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2210      	movs	r2, #16
 80027dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f001 f841 	bl	8003866 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fc4b 	bl	8003080 <I2C_ITSlaveSeqCplt>
 80027ea:	e01c      	b.n	8002826 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027f4:	e08f      	b.n	8002916 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2210      	movs	r2, #16
 80027fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <I2C_Slave_ISR_IT+0xdc>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002816:	d17e      	bne.n	8002916 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	4619      	mov	r1, r3
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 ff0a 	bl	8003638 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002824:	e077      	b.n	8002916 <I2C_Slave_ISR_IT+0x1da>
 8002826:	e076      	b.n	8002916 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02f      	beq.n	8002892 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02a      	beq.n	8002892 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d14b      	bne.n	800291a <I2C_Slave_ISR_IT+0x1de>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002888:	d047      	beq.n	800291a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fbf8 	bl	8003080 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002890:	e043      	b.n	800291a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028a6:	6939      	ldr	r1, [r7, #16]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fb28 	bl	8002efe <I2C_ITAddrCplt>
 80028ae:	e035      	b.n	800291c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d030      	beq.n	800291c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02b      	beq.n	800291c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d018      	beq.n	8002900 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80028fe:	e00d      	b.n	800291c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002906:	d002      	beq.n	800290e <I2C_Slave_ISR_IT+0x1d2>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fbb6 	bl	8003080 <I2C_ITSlaveSeqCplt>
 8002914:	e002      	b.n	800291c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800291a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b088      	sub	sp, #32
 8002932:	af02      	add	r7, sp, #8
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <I2C_Master_ISR_DMA+0x1a>
 8002944:	2302      	movs	r3, #2
 8002946:	e0d9      	b.n	8002afc <I2C_Master_ISR_DMA+0x1ce>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002960:	2b00      	cmp	r3, #0
 8002962:	d011      	beq.n	8002988 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002978:	2120      	movs	r1, #32
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 ffe8 	bl	8003950 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 ff70 	bl	8003866 <I2C_Flush_TXDR>
 8002986:	e0b4      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d071      	beq.n	8002a76 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002998:	2b00      	cmp	r3, #0
 800299a:	d06c      	beq.n	8002a76 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029aa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04e      	beq.n	8002a54 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2bff      	cmp	r3, #255	; 0xff
 80029cc:	d906      	bls.n	80029dc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80029d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e010      	b.n	80029fe <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029ee:	d003      	beq.n	80029f8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	e002      	b.n	80029fe <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80029f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	8a79      	ldrh	r1, [r7, #18]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 ff6d 	bl	80038ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b22      	cmp	r3, #34	; 0x22
 8002a2e:	d108      	bne.n	8002a42 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a40:	e057      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a50:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a52:	e04e      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a62:	d003      	beq.n	8002a6c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 face 	bl	8003006 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002a6a:	e042      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fde2 	bl	8003638 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a74:	e03d      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d028      	beq.n	8002ad2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d023      	beq.n	8002ad2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d119      	bne.n	8002ac8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aa2:	d025      	beq.n	8002af0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002abc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002abe:	e017      	b.n	8002af0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 faa0 	bl	8003006 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002ac6:	e013      	b.n	8002af0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fdb4 	bl	8003638 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ad0:	e00e      	b.n	8002af0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb25 	bl	8003138 <I2C_ITMasterCplt>
 8002aee:	e000      	b.n	8002af2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002af0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b10:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <I2C_Mem_ISR_DMA+0x244>)
 8002b12:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <I2C_Mem_ISR_DMA+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e10e      	b.n	8002d40 <I2C_Mem_ISR_DMA+0x23c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d016      	beq.n	8002b62 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d011      	beq.n	8002b62 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2210      	movs	r2, #16
 8002b44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b52:	2120      	movs	r1, #32
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fefb 	bl	8003950 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fe83 	bl	8003866 <I2C_Flush_TXDR>
 8002b60:	e0e9      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00e      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f04f 32ff 	mov.w	r2, #4294967295
 8002b86:	651a      	str	r2, [r3, #80]	; 0x50
 8002b88:	e0d5      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05f      	beq.n	8002c54 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d05a      	beq.n	8002c54 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 ff59 	bl	8003a58 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fed1 	bl	8003950 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d048      	beq.n	8002c4a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2bff      	cmp	r3, #255	; 0xff
 8002bc0:	d910      	bls.n	8002be4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	b299      	uxth	r1, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fe85 	bl	80038ec <I2C_TransferConfig>
 8002be2:	e011      	b.n	8002c08 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	b299      	uxth	r1, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fe72 	bl	80038ec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	d108      	bne.n	8002c38 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c36:	e07e      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c48:	e075      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fcf3 	bl	8003638 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c52:	e070      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d05d      	beq.n	8002d1a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d058      	beq.n	8002d1a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fef4 	bl	8003a58 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c70:	2110      	movs	r1, #16
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fe6c 	bl	8003950 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b22      	cmp	r3, #34	; 0x22
 8002c82:	d101      	bne.n	8002c88 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <I2C_Mem_ISR_DMA+0x248>)
 8002c86:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d910      	bls.n	8002cb4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fe1d 	bl	80038ec <I2C_TransferConfig>
 8002cb2:	e011      	b.n	8002cd8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fe0a 	bl	80038ec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b22      	cmp	r3, #34	; 0x22
 8002cf4:	d108      	bne.n	8002d08 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d04:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d06:	e016      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d16:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d18:	e00d      	b.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fa01 	bl	8003138 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	80002000 	.word	0x80002000
 8002d4c:	80002400 	.word	0x80002400

08002d50 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <I2C_Slave_ISR_DMA+0x24>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0c0      	b.n	8002ef6 <I2C_Slave_ISR_DMA+0x1a6>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa98 	bl	80032c8 <I2C_ITSlaveCplt>
 8002d98:	e0a8      	b.n	8002eec <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8095 	beq.w	8002ed0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 808f 	beq.w	8002ed0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07d      	beq.n	8002ec2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d128      	bne.n	8002e62 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b28      	cmp	r3, #40	; 0x28
 8002e1a:	d108      	bne.n	8002e2e <I2C_Slave_ISR_DMA+0xde>
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e22:	d104      	bne.n	8002e2e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fbb2 	bl	8003590 <I2C_ITListenCplt>
 8002e2c:	e048      	b.n	8002ec0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b29      	cmp	r3, #41	; 0x29
 8002e38:	d10e      	bne.n	8002e58 <I2C_Slave_ISR_DMA+0x108>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e40:	d00a      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2210      	movs	r2, #16
 8002e48:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fd0b 	bl	8003866 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f915 	bl	8003080 <I2C_ITSlaveSeqCplt>
 8002e56:	e033      	b.n	8002ec0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e60:	e034      	b.n	8002ecc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2210      	movs	r2, #16
 8002e68:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <I2C_Slave_ISR_DMA+0x13c>
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8a:	d11f      	bne.n	8002ecc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b21      	cmp	r3, #33	; 0x21
 8002e90:	d002      	beq.n	8002e98 <I2C_Slave_ISR_DMA+0x148>
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b29      	cmp	r3, #41	; 0x29
 8002e96:	d103      	bne.n	8002ea0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2221      	movs	r2, #33	; 0x21
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e9e:	e008      	b.n	8002eb2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b22      	cmp	r3, #34	; 0x22
 8002ea4:	d002      	beq.n	8002eac <I2C_Slave_ISR_DMA+0x15c>
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eaa:	d102      	bne.n	8002eb2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2222      	movs	r2, #34	; 0x22
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fbbd 	bl	8003638 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ebe:	e005      	b.n	8002ecc <I2C_Slave_ISR_DMA+0x17c>
 8002ec0:	e004      	b.n	8002ecc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002eca:	e00f      	b.n	8002eec <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002ecc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ece:	e00d      	b.n	8002eec <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f809 	bl	8002efe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f14:	2b28      	cmp	r3, #40	; 0x28
 8002f16:	d16a      	bne.n	8002fee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d138      	bne.n	8002fce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	09db      	lsrs	r3, r3, #7
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	89bb      	ldrh	r3, [r7, #12]
 8002f64:	4053      	eors	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f003 0306 	and.w	r3, r3, #6
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11c      	bne.n	8002faa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d13b      	bne.n	8002ffe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f9c:	89ba      	ldrh	r2, [r7, #12]
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fa63 	bl	800246e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fa8:	e029      	b.n	8002ffe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fd50 	bl	8003a58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fc0:	89ba      	ldrh	r2, [r7, #12]
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fa51 	bl	800246e <HAL_I2C_AddrCallback>
}
 8002fcc:	e017      	b.n	8002ffe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fd40 	bl	8003a58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fe0:	89ba      	ldrh	r2, [r7, #12]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fa41 	bl	800246e <HAL_I2C_AddrCallback>
}
 8002fec:	e007      	b.n	8002ffe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b21      	cmp	r3, #33	; 0x21
 8003020:	d115      	bne.n	800304e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2211      	movs	r2, #17
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003036:	2101      	movs	r1, #1
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fd0d 	bl	8003a58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff f9e9 	bl	800241e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800304c:	e014      	b.n	8003078 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2212      	movs	r2, #18
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003062:	2102      	movs	r1, #2
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fcf7 	bl	8003a58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff f9dd 	bl	8002432 <HAL_I2C_MasterRxCpltCallback>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e00c      	b.n	80030ce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b29      	cmp	r3, #41	; 0x29
 80030d8:	d112      	bne.n	8003100 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2228      	movs	r2, #40	; 0x28
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030e8:	2101      	movs	r1, #1
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fcb4 	bl	8003a58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff f9a4 	bl	8002446 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030fe:	e017      	b.n	8003130 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b2a      	cmp	r3, #42	; 0x2a
 800310a:	d111      	bne.n	8003130 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2228      	movs	r2, #40	; 0x28
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2222      	movs	r2, #34	; 0x22
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800311a:	2102      	movs	r1, #2
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fc9b 	bl	8003a58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff f995 	bl	800245a <HAL_I2C_SlaveRxCpltCallback>
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2220      	movs	r2, #32
 800314c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b21      	cmp	r3, #33	; 0x21
 8003158:	d107      	bne.n	800316a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800315a:	2101      	movs	r1, #1
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fc7b 	bl	8003a58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2211      	movs	r2, #17
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
 8003168:	e00c      	b.n	8003184 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	d106      	bne.n	8003184 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003176:	2102      	movs	r1, #2
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fc6d 	bl	8003a58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2212      	movs	r2, #18
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <I2C_ITMasterCplt+0x188>)
 8003190:	400b      	ands	r3, r1
 8003192:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a49      	ldr	r2, [pc, #292]	; (80032c4 <I2C_ITMasterCplt+0x18c>)
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2210      	movs	r2, #16
 80031b0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b60      	cmp	r3, #96	; 0x60
 80031c8:	d10a      	bne.n	80031e0 <I2C_ITMasterCplt+0xa8>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80031de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fb40 	bl	8003866 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d002      	beq.n	80031fe <I2C_ITMasterCplt+0xc6>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fa17 	bl	8003638 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800320a:	e054      	b.n	80032b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b21      	cmp	r3, #33	; 0x21
 8003216:	d124      	bne.n	8003262 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10b      	bne.n	800324a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff f92b 	bl	800249e <HAL_I2C_MemTxCpltCallback>
}
 8003248:	e035      	b.n	80032b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff f8df 	bl	800241e <HAL_I2C_MasterTxCpltCallback>
}
 8003260:	e029      	b.n	80032b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b22      	cmp	r3, #34	; 0x22
 800326c:	d123      	bne.n	80032b6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d10b      	bne.n	80032a0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff f90a 	bl	80024b2 <HAL_I2C_MemRxCpltCallback>
}
 800329e:	e00a      	b.n	80032b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff f8be 	bl	8002432 <HAL_I2C_MasterRxCpltCallback>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	fe00e800 	.word	0xfe00e800
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2220      	movs	r2, #32
 80032f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	2b21      	cmp	r3, #33	; 0x21
 80032f8:	d002      	beq.n	8003300 <I2C_ITSlaveCplt+0x38>
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	2b29      	cmp	r3, #41	; 0x29
 80032fe:	d108      	bne.n	8003312 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003300:	f248 0101 	movw	r1, #32769	; 0x8001
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fba7 	bl	8003a58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2221      	movs	r2, #33	; 0x21
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
 8003310:	e019      	b.n	8003346 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	2b22      	cmp	r3, #34	; 0x22
 8003316:	d002      	beq.n	800331e <I2C_ITSlaveCplt+0x56>
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	2b2a      	cmp	r3, #42	; 0x2a
 800331c:	d108      	bne.n	8003330 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800331e:	f248 0102 	movw	r1, #32770	; 0x8002
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fb98 	bl	8003a58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2222      	movs	r2, #34	; 0x22
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
 800332e:	e00a      	b.n	8003346 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	2b28      	cmp	r3, #40	; 0x28
 8003334:	d107      	bne.n	8003346 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003336:	f248 0103 	movw	r1, #32771	; 0x8003
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fb8c 	bl	8003a58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003354:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b89      	ldr	r3, [pc, #548]	; (8003588 <I2C_ITSlaveCplt+0x2c0>)
 8003362:	400b      	ands	r3, r1
 8003364:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa7d 	bl	8003866 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d013      	beq.n	800339e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003384:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01f      	beq.n	80033ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800339c:	e017      	b.n	80033ce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d049      	beq.n	80034ce <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003440:	2b00      	cmp	r3, #0
 8003442:	d044      	beq.n	80034ce <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d128      	bne.n	80034a0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b28      	cmp	r3, #40	; 0x28
 8003458:	d108      	bne.n	800346c <I2C_ITSlaveCplt+0x1a4>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003460:	d104      	bne.n	800346c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f893 	bl	8003590 <I2C_ITListenCplt>
 800346a:	e030      	b.n	80034ce <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b29      	cmp	r3, #41	; 0x29
 8003476:	d10e      	bne.n	8003496 <I2C_ITSlaveCplt+0x1ce>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800347e:	d00a      	beq.n	8003496 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f9ec 	bl	8003866 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fdf6 	bl	8003080 <I2C_ITSlaveSeqCplt>
 8003494:	e01b      	b.n	80034ce <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2210      	movs	r2, #16
 800349c:	61da      	str	r2, [r3, #28]
 800349e:	e016      	b.n	80034ce <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2210      	movs	r2, #16
 80034a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <I2C_ITSlaveCplt+0x1fa>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d105      	bne.n	80034ce <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8b5 	bl	8003638 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8a4 	bl	8003638 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b28      	cmp	r3, #40	; 0x28
 80034fa:	d141      	bne.n	8003580 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f846 	bl	8003590 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003504:	e03c      	b.n	8003580 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350e:	d014      	beq.n	800353a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fdb5 	bl	8003080 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <I2C_ITSlaveCplt+0x2c4>)
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe ffa9 	bl	800248a <HAL_I2C_ListenCpltCallback>
}
 8003538:	e022      	b.n	8003580 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b22      	cmp	r3, #34	; 0x22
 8003544:	d10e      	bne.n	8003564 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fe ff7c 	bl	800245a <HAL_I2C_SlaveRxCpltCallback>
}
 8003562:	e00d      	b.n	8003580 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe ff63 	bl	8002446 <HAL_I2C_SlaveTxCpltCallback>
}
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fe00e800 	.word	0xfe00e800
 800358c:	ffff0000 	.word	0xffff0000

08003590 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <I2C_ITListenCplt+0xa4>)
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d022      	beq.n	800360c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800360c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa21 	bl	8003a58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2210      	movs	r2, #16
 800361c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe ff2f 	bl	800248a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	ffff0000 	.word	0xffff0000

08003638 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003648:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a6d      	ldr	r2, [pc, #436]	; (800380c <I2C_ITError+0x1d4>)
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b28      	cmp	r3, #40	; 0x28
 800366e:	d005      	beq.n	800367c <I2C_ITError+0x44>
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b29      	cmp	r3, #41	; 0x29
 8003674:	d002      	beq.n	800367c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b2a      	cmp	r3, #42	; 0x2a
 800367a:	d10b      	bne.n	8003694 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800367c:	2103      	movs	r1, #3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9ea 	bl	8003a58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2228      	movs	r2, #40	; 0x28
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a60      	ldr	r2, [pc, #384]	; (8003810 <I2C_ITError+0x1d8>)
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
 8003692:	e030      	b.n	80036f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003694:	f248 0103 	movw	r1, #32771	; 0x8003
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f9dd 	bl	8003a58 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8e1 	bl	8003866 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d01f      	beq.n	80036f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d114      	bne.n	80036f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d109      	bne.n	80036e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2220      	movs	r2, #32
 80036ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d039      	beq.n	8003778 <I2C_ITError+0x140>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b11      	cmp	r3, #17
 8003708:	d002      	beq.n	8003710 <I2C_ITError+0xd8>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d133      	bne.n	8003778 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371e:	d107      	bne.n	8003730 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800372e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe f9cd 	bl	8001ad4 <HAL_DMA_GetState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d017      	beq.n	8003770 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4a33      	ldr	r2, [pc, #204]	; (8003814 <I2C_ITError+0x1dc>)
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe f8a7 	bl	80018a8 <HAL_DMA_Abort_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d04d      	beq.n	80037fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800376a:	4610      	mov	r0, r2
 800376c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800376e:	e045      	b.n	80037fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f851 	bl	8003818 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003776:	e041      	b.n	80037fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d039      	beq.n	80037f4 <I2C_ITError+0x1bc>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b12      	cmp	r3, #18
 8003784:	d002      	beq.n	800378c <I2C_ITError+0x154>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b22      	cmp	r3, #34	; 0x22
 800378a:	d133      	bne.n	80037f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379a:	d107      	bne.n	80037ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe f98f 	bl	8001ad4 <HAL_DMA_GetState>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d017      	beq.n	80037ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <I2C_ITError+0x1dc>)
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe f869 	bl	80018a8 <HAL_DMA_Abort_IT>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037e6:	4610      	mov	r0, r2
 80037e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037ea:	e009      	b.n	8003800 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f813 	bl	8003818 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037f2:	e005      	b.n	8003800 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f80f 	bl	8003818 <I2C_TreatErrorCallback>
  }
}
 80037fa:	e002      	b.n	8003802 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003800:	bf00      	nop
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	ffff0000 	.word	0xffff0000
 8003810:	0800273d 	.word	0x0800273d
 8003814:	080038af 	.word	0x080038af

08003818 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d10e      	bne.n	800384a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fe49 	bl	80024da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003848:	e009      	b.n	800385e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe fe34 	bl	80024c6 <HAL_I2C_ErrorCallback>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d103      	bne.n	8003884 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d007      	beq.n	80038a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	619a      	str	r2, [r3, #24]
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2200      	movs	r2, #0
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2200      	movs	r2, #0
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff ff9b 	bl	8003818 <I2C_TreatErrorCallback>
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	4613      	mov	r3, r2
 80038fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003904:	7a7b      	ldrb	r3, [r7, #9]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	4313      	orrs	r3, r2
 8003916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800391a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	0d5b      	lsrs	r3, r3, #21
 8003926:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <I2C_TransferConfig+0x60>)
 800392c:	430b      	orrs	r3, r1
 800392e:	43db      	mvns	r3, r3
 8003930:	ea02 0103 	and.w	r1, r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	03ff63ff 	.word	0x03ff63ff

08003950 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <I2C_Enable_IRQ+0xfc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d032      	beq.n	80039d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800396e:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <I2C_Enable_IRQ+0x100>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d02d      	beq.n	80039d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003978:	4a36      	ldr	r2, [pc, #216]	; (8003a54 <I2C_Enable_IRQ+0x104>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d028      	beq.n	80039d0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800397e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da03      	bge.n	800398e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800398c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800399e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80039b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d103      	bne.n	80039c0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d133      	bne.n	8003a2e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f043 0320 	orr.w	r3, r3, #32
 80039cc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039ce:	e02e      	b.n	8003a2e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da03      	bge.n	80039e0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039de:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80039f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039f2:	887b      	ldrh	r3, [r7, #2]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d103      	bne.n	8003a12 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d103      	bne.n	8003a20 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d103      	bne.n	8003a2e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	0800292f 	.word	0x0800292f
 8003a50:	08002d51 	.word	0x08002d51
 8003a54:	08002b05 	.word	0x08002b05

08003a58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00f      	beq.n	8003a92 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003a78:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a86:	2b28      	cmp	r3, #40	; 0x28
 8003a88:	d003      	beq.n	8003a92 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003a90:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00f      	beq.n	8003abc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003aa2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab0:	2b28      	cmp	r3, #40	; 0x28
 8003ab2:	d003      	beq.n	8003abc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003aba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da03      	bge.n	8003acc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d103      	bne.n	8003ada <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d103      	bne.n	8003ae8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f043 0320 	orr.w	r3, r3, #32
 8003ae6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d103      	bne.n	8003af6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d138      	bne.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e032      	b.n	8003b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d139      	bne.n	8003c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e033      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	; 0x24
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d141      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5e:	d131      	bne.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c60:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c66:	4a46      	ldr	r2, [pc, #280]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c78:	4a41      	ldr	r2, [pc, #260]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c80:	4b40      	ldr	r3, [pc, #256]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2232      	movs	r2, #50	; 0x32
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c96:	e002      	b.n	8003c9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d102      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f2      	bne.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d158      	bne.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e057      	b.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cd4:	e04d      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d141      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d131      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2232      	movs	r2, #50	; 0x32
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	0c9b      	lsrs	r3, r3, #18
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d22:	e002      	b.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d102      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f2      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d112      	bne.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e011      	b.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d60:	e007      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40007000 	.word	0x40007000
 8003d84:	200001fc 	.word	0x200001fc
 8003d88:	431bde83 	.word	0x431bde83

08003d8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9a:	6093      	str	r3, [r2, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e2fe      	b.n	80043bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d075      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dca:	4b97      	ldr	r3, [pc, #604]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd4:	4b94      	ldr	r3, [pc, #592]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d102      	bne.n	8003dea <HAL_RCC_OscConfig+0x3e>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d002      	beq.n	8003df0 <HAL_RCC_OscConfig+0x44>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05b      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x108>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d157      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e2d9      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_OscConfig+0x74>
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a84      	ldr	r2, [pc, #528]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e01d      	b.n	8003e5c <HAL_RCC_OscConfig+0xb0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x98>
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b7c      	ldr	r3, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7b      	ldr	r2, [pc, #492]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0xb0>
 8003e44:	4b78      	ldr	r3, [pc, #480]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a77      	ldr	r2, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b75      	ldr	r3, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a74      	ldr	r2, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fa66 	bl	8001334 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fa62 	bl	8001334 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e29e      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0xc0>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fa52 	bl	8001334 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fd fa4e 	bl	8001334 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e28a      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ea6:	4b60      	ldr	r3, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0xe8>
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d075      	beq.n	8003fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ecc:	4b56      	ldr	r3, [pc, #344]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d102      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x136>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x13c>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11f      	bne.n	8003f28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_OscConfig+0x154>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e25d      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	4946      	ldr	r1, [pc, #280]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd f9bf 	bl	800129c <HAL_InitTick>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d043      	beq.n	8003fac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e249      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f9fa 	bl	8001334 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fd f9f6 	bl	8001334 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e232      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f56:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	492d      	ldr	r1, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
 8003f76:	e01a      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd f9d6 	bl	8001334 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fd f9d2 	bl	8001334 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e20e      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x1e0>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d041      	beq.n	800403e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd f9af 	bl	8001334 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd f9ab 	bl	8001334 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1e7      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ef      	beq.n	8003fda <HAL_RCC_OscConfig+0x22e>
 8003ffa:	e020      	b.n	800403e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_OscConfig+0x27c>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd f992 	bl	8001334 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004012:	e00d      	b.n	8004030 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004014:	f7fd f98e 	bl	8001334 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d906      	bls.n	8004030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1ca      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	20000200 	.word	0x20000200
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ea      	bne.n	8004014 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004050:	4b84      	ldr	r3, [pc, #528]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x2b4>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x2b6>
 8004060:	2300      	movs	r3, #0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	4a7e      	ldr	r2, [pc, #504]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
 8004072:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004082:	4b79      	ldr	r3, [pc, #484]	; (8004268 <HAL_RCC_OscConfig+0x4bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408e:	4b76      	ldr	r3, [pc, #472]	; (8004268 <HAL_RCC_OscConfig+0x4bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a75      	ldr	r2, [pc, #468]	; (8004268 <HAL_RCC_OscConfig+0x4bc>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409a:	f7fd f94b 	bl	8001334 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fd f947 	bl	8001334 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e183      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <HAL_RCC_OscConfig+0x4bc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d108      	bne.n	80040da <HAL_RCC_OscConfig+0x32e>
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d8:	e024      	b.n	8004124 <HAL_RCC_OscConfig+0x378>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d110      	bne.n	8004104 <HAL_RCC_OscConfig+0x358>
 80040e2:	4b60      	ldr	r3, [pc, #384]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	4a5e      	ldr	r2, [pc, #376]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x378>
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a56      	ldr	r2, [pc, #344]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd f902 	bl	8001334 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd f8fe 	bl	8001334 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e138      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x388>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fd f8eb 	bl	8001334 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd f8e7 	bl	8001334 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e121      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a34      	ldr	r2, [pc, #208]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03c      	beq.n	800421e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd f8ba 	bl	8001334 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c4:	f7fd f8b6 	bl	8001334 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0f2      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <HAL_RCC_OscConfig+0x418>
 80041e4:	e01b      	b.n	800421e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd f89d 	bl	8001334 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fe:	f7fd f899 	bl	8001334 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0d5      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80c9 	beq.w	80043ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b0c      	cmp	r3, #12
 8004232:	f000 8083 	beq.w	800433c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d15e      	bne.n	80042fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_RCC_OscConfig+0x4b8>)
 8004244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd f873 	bl	8001334 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	e00c      	b.n	800426c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd f86f 	bl	8001334 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d905      	bls.n	800426c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0ab      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ec      	bne.n	8004252 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4b52      	ldr	r3, [pc, #328]	; (80043c8 <HAL_RCC_OscConfig+0x61c>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6a11      	ldr	r1, [r2, #32]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004288:	3a01      	subs	r2, #1
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004292:	0212      	lsls	r2, r2, #8
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800429a:	0852      	lsrs	r2, r2, #1
 800429c:	3a01      	subs	r2, #1
 800429e:	0552      	lsls	r2, r2, #21
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042b2:	06d2      	lsls	r2, r2, #27
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4943      	ldr	r1, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd f82e 	bl	8001334 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd f82a 	bl	8001334 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e066      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x530>
 80042fa:	e05e      	b.n	80043ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd f814 	bl	8001334 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd f810 	bl	8001334 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e04c      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	4924      	ldr	r1, [pc, #144]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_RCC_OscConfig+0x620>)
 8004336:	4013      	ands	r3, r2
 8004338:	60cb      	str	r3, [r1, #12]
 800433a:	e03e      	b.n	80043ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e039      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_OscConfig+0x618>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0203 	and.w	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	429a      	cmp	r2, r3
 800435a:	d12c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	3b01      	subs	r3, #1
 8004368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d123      	bne.n	80043b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11b      	bne.n	80043b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d113      	bne.n	80043b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	3b01      	subs	r3, #1
 800439c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	019f800c 	.word	0x019f800c
 80043cc:	feeefffc 	.word	0xfeeefffc

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e11e      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b91      	ldr	r3, [pc, #580]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d910      	bls.n	8004418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b8e      	ldr	r3, [pc, #568]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 020f 	bic.w	r2, r3, #15
 80043fe:	498c      	ldr	r1, [pc, #560]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e106      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d073      	beq.n	800450c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d129      	bne.n	8004480 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442c:	4b81      	ldr	r3, [pc, #516]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0f4      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800443c:	f000 f99e 	bl	800477c <RCC_GetSysClockFreqFromPLLSource>
 8004440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4a7c      	ldr	r2, [pc, #496]	; (8004638 <HAL_RCC_ClockConfig+0x268>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d93f      	bls.n	80044ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d033      	beq.n	80044ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004466:	2b00      	cmp	r3, #0
 8004468:	d12f      	bne.n	80044ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800446a:	4b72      	ldr	r3, [pc, #456]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004472:	4a70      	ldr	r2, [pc, #448]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 8004474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004478:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e024      	b.n	80044ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d107      	bne.n	8004498 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0c6      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004498:	4b66      	ldr	r3, [pc, #408]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0be      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044a8:	f000 f8ce 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4a61      	ldr	r2, [pc, #388]	; (8004638 <HAL_RCC_ClockConfig+0x268>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d909      	bls.n	80044ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	4a5d      	ldr	r2, [pc, #372]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b5a      	ldr	r3, [pc, #360]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4957      	ldr	r1, [pc, #348]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044dc:	f7fc ff2a 	bl	8001334 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fc ff26 	bl	8001334 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e095      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b4e      	ldr	r3, [pc, #312]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d023      	beq.n	8004560 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a42      	ldr	r2, [pc, #264]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800452a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800452e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800453c:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004544:	4a3b      	ldr	r2, [pc, #236]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 8004546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800454a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b39      	ldr	r3, [pc, #228]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4936      	ldr	r1, [pc, #216]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
 800455e:	e008      	b.n	8004572 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d105      	bne.n	8004572 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004566:	4b33      	ldr	r3, [pc, #204]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 800456c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004570:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004572:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d21d      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 020f 	bic.w	r2, r3, #15
 8004588:	4929      	ldr	r1, [pc, #164]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004590:	f7fc fed0 	bl	8001334 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fc fecc 	bl	8001334 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e03b      	b.n	8004626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1ed      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4917      	ldr	r1, [pc, #92]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	490f      	ldr	r1, [pc, #60]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045fa:	f000 f825 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_ClockConfig+0x264>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490c      	ldr	r1, [pc, #48]	; (800463c <HAL_RCC_ClockConfig+0x26c>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x270>)
 8004618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x274>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fe3c 	bl	800129c <HAL_InitTick>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40022000 	.word	0x40022000
 8004634:	40021000 	.word	0x40021000
 8004638:	04c4b400 	.word	0x04c4b400
 800463c:	080066f4 	.word	0x080066f4
 8004640:	200001fc 	.word	0x200001fc
 8004644:	20000200 	.word	0x20000200

08004648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d102      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800465a:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_RCC_GetSysClockFreq+0xbc>)
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e047      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d102      	bne.n	8004672 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	e03e      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d136      	bne.n	80046ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	3301      	adds	r3, #1
 8004694:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800469c:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	4a16      	ldr	r2, [pc, #88]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a6:	68d2      	ldr	r2, [r2, #12]
 80046a8:	0a12      	lsrs	r2, r2, #8
 80046aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	617b      	str	r3, [r7, #20]
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	0a12      	lsrs	r2, r2, #8
 80046c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
      break;
 80046ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	0e5b      	lsrs	r3, r3, #25
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	3301      	adds	r3, #1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	e001      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046f0:	693b      	ldr	r3, [r7, #16]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	00f42400 	.word	0x00f42400
 8004708:	016e3600 	.word	0x016e3600

0800470c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCC_GetHCLKFreq+0x14>)
 8004712:	681b      	ldr	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	200001fc 	.word	0x200001fc

08004724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004728:	f7ff fff0 	bl	800470c <HAL_RCC_GetHCLKFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	4904      	ldr	r1, [pc, #16]	; (800474c <HAL_RCC_GetPCLK1Freq+0x28>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000
 800474c:	08006704 	.word	0x08006704

08004750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004754:	f7ff ffda 	bl	800470c <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0adb      	lsrs	r3, r3, #11
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	08006704 	.word	0x08006704

0800477c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d10c      	bne.n	80047ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047aa:	68d2      	ldr	r2, [r2, #12]
 80047ac:	0a12      	lsrs	r2, r2, #8
 80047ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	617b      	str	r3, [r7, #20]
    break;
 80047b8:	e00c      	b.n	80047d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ba:	4a12      	ldr	r2, [pc, #72]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	0a12      	lsrs	r2, r2, #8
 80047c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
    break;
 80047d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0e5b      	lsrs	r3, r3, #25
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	3301      	adds	r3, #1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047ee:	687b      	ldr	r3, [r7, #4]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40021000 	.word	0x40021000
 8004800:	016e3600 	.word	0x016e3600
 8004804:	00f42400 	.word	0x00f42400

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004814:	2300      	movs	r3, #0
 8004816:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8098 	beq.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482a:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	4a3f      	ldr	r2, [pc, #252]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6593      	str	r3, [r2, #88]	; 0x58
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484e:	2301      	movs	r3, #1
 8004850:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004852:	4b3a      	ldr	r3, [pc, #232]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a39      	ldr	r2, [pc, #228]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485e:	f7fc fd69 	bl	8001334 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004864:	e009      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fc fd65 	bl	8001334 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d902      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	74fb      	strb	r3, [r7, #19]
        break;
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ef      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d159      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01e      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d019      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048a8:	4b23      	ldr	r3, [pc, #140]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b4:	4b20      	ldr	r3, [pc, #128]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fc fd25 	bl	8001334 <HAL_GetTick>
 80048ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ec:	e00b      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fc fd21 	bl	8001334 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d902      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	74fb      	strb	r3, [r7, #19]
            break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ec      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004930:	e008      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
 8004936:	e005      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004938:	40021000 	.word	0x40021000
 800493c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004944:	7c7b      	ldrb	r3, [r7, #17]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d105      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494a:	4ba7      	ldr	r3, [pc, #668]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	4aa6      	ldr	r2, [pc, #664]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004962:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f023 0203 	bic.w	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	499d      	ldr	r1, [pc, #628]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004984:	4b98      	ldr	r3, [pc, #608]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f023 020c 	bic.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	4995      	ldr	r1, [pc, #596]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a6:	4b90      	ldr	r3, [pc, #576]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	498c      	ldr	r1, [pc, #560]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c8:	4b87      	ldr	r3, [pc, #540]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	4984      	ldr	r1, [pc, #528]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ea:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	497b      	ldr	r1, [pc, #492]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a0c:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	4973      	ldr	r1, [pc, #460]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a2e:	4b6e      	ldr	r3, [pc, #440]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	496a      	ldr	r1, [pc, #424]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a50:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4962      	ldr	r1, [pc, #392]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a72:	4b5d      	ldr	r3, [pc, #372]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	4959      	ldr	r1, [pc, #356]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a94:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	4951      	ldr	r1, [pc, #324]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab6:	4b4c      	ldr	r3, [pc, #304]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4948      	ldr	r1, [pc, #288]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d015      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4940      	ldr	r1, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d105      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	4932      	ldr	r1, [pc, #200]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b48:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	4924      	ldr	r1, [pc, #144]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b68:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	4916      	ldr	r1, [pc, #88]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4908      	ldr	r1, [pc, #32]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd6:	d109      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a02      	ldr	r2, [pc, #8]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bf8:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4926      	ldr	r1, [pc, #152]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c16:	d105      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c18:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3e:	4918      	ldr	r1, [pc, #96]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c86:	d105      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e042      	b.n	8004d3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fc f8b1 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2224      	movs	r2, #36	; 0x24
 8004cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 ff56 	bl	8005ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc57 	bl	80055a8 <UART_SetConfig>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e01b      	b.n	8004d3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 ffd5 	bl	8005ce4 <UART_CheckIdleState>
 8004d3a:	4603      	mov	r3, r0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d17b      	bne.n	8004e56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_Transmit+0x26>
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e074      	b.n	8004e58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7e:	f7fc fad9 	bl	8001334 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d108      	bne.n	8004db0 <HAL_UART_Transmit+0x6c>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	e003      	b.n	8004db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db8:	e030      	b.n	8004e1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f001 f837 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e03d      	b.n	8004e58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3302      	adds	r3, #2
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e007      	b.n	8004e0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1c8      	bne.n	8004dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f001 f800 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e006      	b.n	8004e58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d137      	bne.n	8004ee8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Receive_DMA+0x24>
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e030      	b.n	8004eea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_UART_Receive_DMA+0x94>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d01f      	beq.n	8004ed8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	69f9      	ldr	r1, [r7, #28]
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f001 f818 	bl	8005f14 <UART_Start_Receive_DMA>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	e000      	b.n	8004eea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40008000 	.word	0x40008000

08004ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b0ba      	sub	sp, #232	; 0xe8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f26:	4013      	ands	r3, r2
 8004f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11b      	bne.n	8004f6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 82e3 	beq.w	8005528 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
      }
      return;
 8004f6a:	e2dd      	b.n	8005528 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8123 	beq.w	80051bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f7a:	4b8d      	ldr	r3, [pc, #564]	; (80051b0 <HAL_UART_IRQHandler+0x2b8>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f86:	4b8b      	ldr	r3, [pc, #556]	; (80051b4 <HAL_UART_IRQHandler+0x2bc>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8116 	beq.w	80051bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xc8>
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xf8>
 8004fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0x128>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2204      	movs	r2, #4
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f043 0202 	orr.w	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005038:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800503c:	4b5c      	ldr	r3, [pc, #368]	; (80051b0 <HAL_UART_IRQHandler+0x2b8>)
 800503e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2208      	movs	r2, #8
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <HAL_UART_IRQHandler+0x196>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800507c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8249 	beq.w	800552c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d013      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d054      	beq.n	800519c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fff5 	bl	80060e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d146      	bne.n	8005194 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800511c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800513e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800514a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1d9      	bne.n	8005106 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_UART_IRQHandler+0x2c0>)
 8005164:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc fb9b 	bl	80018a8 <HAL_DMA_Abort_IT>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d019      	beq.n	80051ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005186:	4610      	mov	r0, r2
 8005188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	e00f      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9f5 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005192:	e00b      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9f1 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	e007      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f9ed 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80051aa:	e1bf      	b.n	800552c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	bf00      	nop
    return;
 80051ae:	e1bd      	b.n	800552c <HAL_UART_IRQHandler+0x634>
 80051b0:	10000001 	.word	0x10000001
 80051b4:	04000120 	.word	0x04000120
 80051b8:	08006399 	.word	0x08006399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 8153 	bne.w	800546c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 814c 	beq.w	800546c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8145 	beq.w	800546c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	f040 80bb 	bne.w	8005370 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 818f 	beq.w	8005530 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800521c:	429a      	cmp	r2, r3
 800521e:	f080 8187 	bcs.w	8005530 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8087 	bne.w	800534e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800526a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800526e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1da      	bne.n	8005240 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e1      	bne.n	800528a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800532e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800533c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e4      	bne.n	800530c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005348:	4618      	mov	r0, r3
 800534a:	f7fc fa54 	bl	80017f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005360:	b29b      	uxth	r3, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f911 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800536e:	e0df      	b.n	8005530 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80d1 	beq.w	8005534 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80cc 	beq.w	8005534 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e4      	bne.n	800539c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053fa:	633a      	str	r2, [r7, #48]	; 0x30
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e1      	bne.n	80053d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	617b      	str	r3, [r7, #20]
   return(result);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e4      	bne.n	8005422 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f893 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800546a:	e063      	b.n	8005534 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <HAL_UART_IRQHandler+0x59e>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800548c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 ffc3 	bl	800641a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005494:	e051      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d014      	beq.n	80054cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03a      	beq.n	8005538 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
    }
    return;
 80054ca:	e035      	b.n	8005538 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_UART_IRQHandler+0x5f4>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 ff6d 	bl	80063c4 <UART_EndTransmit_IT>
    return;
 80054ea:	e026      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_UART_IRQHandler+0x614>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 ff9c 	bl	8006442 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800550a:	e016      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_UART_IRQHandler+0x642>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	2b00      	cmp	r3, #0
 800551e:	da0c      	bge.n	800553a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 ff84 	bl	800642e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005526:	e008      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005528:	bf00      	nop
 800552a:	e006      	b.n	800553a <HAL_UART_IRQHandler+0x642>
    return;
 800552c:	bf00      	nop
 800552e:	e004      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_UART_IRQHandler+0x642>
    return;
 8005538:	bf00      	nop
  }
}
 800553a:	37e8      	adds	r7, #232	; 0xe8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ac:	b08c      	sub	sp, #48	; 0x30
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4baa      	ldr	r3, [pc, #680]	; (8005880 <UART_SetConfig+0x2d8>)
 80055d8:	4013      	ands	r3, r2
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a9f      	ldr	r2, [pc, #636]	; (8005884 <UART_SetConfig+0x2dc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	4313      	orrs	r3, r2
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800561e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005628:	430b      	orrs	r3, r1
 800562a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	f023 010f 	bic.w	r1, r3, #15
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a90      	ldr	r2, [pc, #576]	; (8005888 <UART_SetConfig+0x2e0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d125      	bne.n	8005698 <UART_SetConfig+0xf0>
 800564c:	4b8f      	ldr	r3, [pc, #572]	; (800588c <UART_SetConfig+0x2e4>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b03      	cmp	r3, #3
 8005658:	d81a      	bhi.n	8005690 <UART_SetConfig+0xe8>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0xb8>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	08005679 	.word	0x08005679
 800566c:	08005689 	.word	0x08005689
 8005670:	2301      	movs	r3, #1
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005676:	e116      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005678:	2302      	movs	r3, #2
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567e:	e112      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e10e      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e10a      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e106      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a7c      	ldr	r2, [pc, #496]	; (8005890 <UART_SetConfig+0x2e8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d138      	bne.n	8005714 <UART_SetConfig+0x16c>
 80056a2:	4b7a      	ldr	r3, [pc, #488]	; (800588c <UART_SetConfig+0x2e4>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d82d      	bhi.n	800570c <UART_SetConfig+0x164>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x110>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	0800570d 	.word	0x0800570d
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	0800570d 	.word	0x0800570d
 80056d4:	0800570d 	.word	0x0800570d
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005705 	.word	0x08005705
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f2:	e0d8      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fa:	e0d4      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005702:	e0d0      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570a:	e0cc      	b.n	80058a6 <UART_SetConfig+0x2fe>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005712:	e0c8      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a5e      	ldr	r2, [pc, #376]	; (8005894 <UART_SetConfig+0x2ec>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d125      	bne.n	800576a <UART_SetConfig+0x1c2>
 800571e:	4b5b      	ldr	r3, [pc, #364]	; (800588c <UART_SetConfig+0x2e4>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005728:	2b30      	cmp	r3, #48	; 0x30
 800572a:	d016      	beq.n	800575a <UART_SetConfig+0x1b2>
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d818      	bhi.n	8005762 <UART_SetConfig+0x1ba>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d00a      	beq.n	800574a <UART_SetConfig+0x1a2>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d814      	bhi.n	8005762 <UART_SetConfig+0x1ba>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <UART_SetConfig+0x19a>
 800573c:	2b10      	cmp	r3, #16
 800573e:	d008      	beq.n	8005752 <UART_SetConfig+0x1aa>
 8005740:	e00f      	b.n	8005762 <UART_SetConfig+0x1ba>
 8005742:	2300      	movs	r3, #0
 8005744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005748:	e0ad      	b.n	80058a6 <UART_SetConfig+0x2fe>
 800574a:	2302      	movs	r3, #2
 800574c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005750:	e0a9      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005752:	2304      	movs	r3, #4
 8005754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005758:	e0a5      	b.n	80058a6 <UART_SetConfig+0x2fe>
 800575a:	2308      	movs	r3, #8
 800575c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005760:	e0a1      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005762:	2310      	movs	r3, #16
 8005764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005768:	e09d      	b.n	80058a6 <UART_SetConfig+0x2fe>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <UART_SetConfig+0x2f0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d125      	bne.n	80057c0 <UART_SetConfig+0x218>
 8005774:	4b45      	ldr	r3, [pc, #276]	; (800588c <UART_SetConfig+0x2e4>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800577e:	2bc0      	cmp	r3, #192	; 0xc0
 8005780:	d016      	beq.n	80057b0 <UART_SetConfig+0x208>
 8005782:	2bc0      	cmp	r3, #192	; 0xc0
 8005784:	d818      	bhi.n	80057b8 <UART_SetConfig+0x210>
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d00a      	beq.n	80057a0 <UART_SetConfig+0x1f8>
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d814      	bhi.n	80057b8 <UART_SetConfig+0x210>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <UART_SetConfig+0x1f0>
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d008      	beq.n	80057a8 <UART_SetConfig+0x200>
 8005796:	e00f      	b.n	80057b8 <UART_SetConfig+0x210>
 8005798:	2300      	movs	r3, #0
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e082      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e07e      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e07a      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e076      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e072      	b.n	80058a6 <UART_SetConfig+0x2fe>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a35      	ldr	r2, [pc, #212]	; (800589c <UART_SetConfig+0x2f4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d12a      	bne.n	8005820 <UART_SetConfig+0x278>
 80057ca:	4b30      	ldr	r3, [pc, #192]	; (800588c <UART_SetConfig+0x2e4>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d8:	d01a      	beq.n	8005810 <UART_SetConfig+0x268>
 80057da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057de:	d81b      	bhi.n	8005818 <UART_SetConfig+0x270>
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d00c      	beq.n	8005800 <UART_SetConfig+0x258>
 80057e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ea:	d815      	bhi.n	8005818 <UART_SetConfig+0x270>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <UART_SetConfig+0x250>
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f4:	d008      	beq.n	8005808 <UART_SetConfig+0x260>
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x270>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e052      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e04e      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580e:	e04a      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e046      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e042      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <UART_SetConfig+0x2dc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d13a      	bne.n	80058a0 <UART_SetConfig+0x2f8>
 800582a:	4b18      	ldr	r3, [pc, #96]	; (800588c <UART_SetConfig+0x2e4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005838:	d01a      	beq.n	8005870 <UART_SetConfig+0x2c8>
 800583a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800583e:	d81b      	bhi.n	8005878 <UART_SetConfig+0x2d0>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005844:	d00c      	beq.n	8005860 <UART_SetConfig+0x2b8>
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584a:	d815      	bhi.n	8005878 <UART_SetConfig+0x2d0>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <UART_SetConfig+0x2b0>
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005854:	d008      	beq.n	8005868 <UART_SetConfig+0x2c0>
 8005856:	e00f      	b.n	8005878 <UART_SetConfig+0x2d0>
 8005858:	2300      	movs	r3, #0
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e022      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e01e      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e01a      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e016      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587e:	e012      	b.n	80058a6 <UART_SetConfig+0x2fe>
 8005880:	cfff69f3 	.word	0xcfff69f3
 8005884:	40008000 	.word	0x40008000
 8005888:	40013800 	.word	0x40013800
 800588c:	40021000 	.word	0x40021000
 8005890:	40004400 	.word	0x40004400
 8005894:	40004800 	.word	0x40004800
 8005898:	40004c00 	.word	0x40004c00
 800589c:	40005000 	.word	0x40005000
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4aae      	ldr	r2, [pc, #696]	; (8005b64 <UART_SetConfig+0x5bc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f040 8097 	bne.w	80059e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d823      	bhi.n	8005902 <UART_SetConfig+0x35a>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x318>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	08005903 	.word	0x08005903
 80058d0:	080058f3 	.word	0x080058f3
 80058d4:	08005903 	.word	0x08005903
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005903 	.word	0x08005903
 80058e0:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fe ff1e 	bl	8004724 <HAL_RCC_GetPCLK1Freq>
 80058e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b9e      	ldr	r3, [pc, #632]	; (8005b68 <UART_SetConfig+0x5c0>)
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe fea9 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 80058f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800590c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8130 	beq.w	8005b76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4a94      	ldr	r2, [pc, #592]	; (8005b6c <UART_SetConfig+0x5c4>)
 800591c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005920:	461a      	mov	r2, r3
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	fbb3 f3f2 	udiv	r3, r3, r2
 8005928:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d305      	bcc.n	8005946 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	429a      	cmp	r2, r3
 8005944:	d903      	bls.n	800594e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800594c:	e113      	b.n	8005b76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2200      	movs	r2, #0
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	60fa      	str	r2, [r7, #12]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	4a84      	ldr	r2, [pc, #528]	; (8005b6c <UART_SetConfig+0x5c4>)
 800595c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005960:	b29b      	uxth	r3, r3
 8005962:	2200      	movs	r2, #0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005970:	f7fa fc5a 	bl	8000228 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	020b      	lsls	r3, r1, #8
 8005986:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800598a:	0202      	lsls	r2, r0, #8
 800598c:	6979      	ldr	r1, [r7, #20]
 800598e:	6849      	ldr	r1, [r1, #4]
 8005990:	0849      	lsrs	r1, r1, #1
 8005992:	2000      	movs	r0, #0
 8005994:	460c      	mov	r4, r1
 8005996:	4605      	mov	r5, r0
 8005998:	eb12 0804 	adds.w	r8, r2, r4
 800599c:	eb43 0905 	adc.w	r9, r3, r5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	469a      	mov	sl, r3
 80059a8:	4693      	mov	fp, r2
 80059aa:	4652      	mov	r2, sl
 80059ac:	465b      	mov	r3, fp
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fc39 	bl	8000228 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4613      	mov	r3, r2
 80059bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c4:	d308      	bcc.n	80059d8 <UART_SetConfig+0x430>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059cc:	d204      	bcs.n	80059d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e0ce      	b.n	8005b76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059de:	e0ca      	b.n	8005b76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e8:	d166      	bne.n	8005ab8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d827      	bhi.n	8005a42 <UART_SetConfig+0x49a>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0x450>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a25 	.word	0x08005a25
 8005a00:	08005a2d 	.word	0x08005a2d
 8005a04:	08005a43 	.word	0x08005a43
 8005a08:	08005a33 	.word	0x08005a33
 8005a0c:	08005a43 	.word	0x08005a43
 8005a10:	08005a43 	.word	0x08005a43
 8005a14:	08005a43 	.word	0x08005a43
 8005a18:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7fe fe82 	bl	8004724 <HAL_RCC_GetPCLK1Freq>
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a22:	e014      	b.n	8005a4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe fe94 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8005a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a2a:	e010      	b.n	8005a4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b4e      	ldr	r3, [pc, #312]	; (8005b68 <UART_SetConfig+0x5c0>)
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe fe09 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a38:	e009      	b.n	8005a4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a40:	e005      	b.n	8005a4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8090 	beq.w	8005b76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <UART_SetConfig+0x5c4>)
 8005a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a60:	461a      	mov	r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a68:	005a      	lsls	r2, r3, #1
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	441a      	add	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	d916      	bls.n	8005ab0 <UART_SetConfig+0x508>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a88:	d212      	bcs.n	8005ab0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f023 030f 	bic.w	r3, r3, #15
 8005a92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	8bfb      	ldrh	r3, [r7, #30]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	8bfa      	ldrh	r2, [r7, #30]
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	e062      	b.n	8005b76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ab6:	e05e      	b.n	8005b76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d828      	bhi.n	8005b12 <UART_SetConfig+0x56a>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x520>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fe1a 	bl	8004724 <HAL_RCC_GetPCLK1Freq>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005af2:	e014      	b.n	8005b1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fe fe2c 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005afa:	e010      	b.n	8005b1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <UART_SetConfig+0x5c0>)
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b00:	e00d      	b.n	8005b1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fe fda1 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b08:	e009      	b.n	8005b1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b10:	e005      	b.n	8005b1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d028      	beq.n	8005b76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <UART_SetConfig+0x5c4>)
 8005b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	441a      	add	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b0f      	cmp	r3, #15
 8005b4c:	d910      	bls.n	8005b70 <UART_SetConfig+0x5c8>
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d20c      	bcs.n	8005b70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e009      	b.n	8005b76 <UART_SetConfig+0x5ce>
 8005b62:	bf00      	nop
 8005b64:	40008000 	.word	0x40008000
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	0800670c 	.word	0x0800670c
      }
      else
      {
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d10a      	bne.n	8005cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b098      	sub	sp, #96	; 0x60
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fb fb1e 	bl	8001334 <HAL_GetTick>
 8005cf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d12f      	bne.n	8005d68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f88e 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d022      	beq.n	8005d68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d36:	653b      	str	r3, [r7, #80]	; 0x50
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
 8005d42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e063      	b.n	8005e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d149      	bne.n	8005e0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f857 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d03c      	beq.n	8005e0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
 8005db0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de2:	61fa      	str	r2, [r7, #28]
 8005de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	69b9      	ldr	r1, [r7, #24]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	617b      	str	r3, [r7, #20]
   return(result);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e012      	b.n	8005e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3758      	adds	r7, #88	; 0x58
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e48:	e04f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d04b      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e52:	f7fb fa6f 	bl	8001334 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e04e      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d037      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d034      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d031      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d110      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f920 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2208      	movs	r2, #8
 8005ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e029      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	d111      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f906 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e00f      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	bf0c      	ite	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	2300      	movne	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d0a0      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b096      	sub	sp, #88	; 0x58
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	88fa      	ldrh	r2, [r7, #6]
 8005f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2222      	movs	r2, #34	; 0x22
 8005f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02d      	beq.n	8005fa6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f50:	4a40      	ldr	r2, [pc, #256]	; (8006054 <UART_Start_Receive_DMA+0x140>)
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f5a:	4a3f      	ldr	r2, [pc, #252]	; (8006058 <UART_Start_Receive_DMA+0x144>)
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f64:	4a3d      	ldr	r2, [pc, #244]	; (800605c <UART_Start_Receive_DMA+0x148>)
 8005f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6e:	2200      	movs	r2, #0
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3324      	adds	r3, #36	; 0x24
 8005f7e:	4619      	mov	r1, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	461a      	mov	r2, r3
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	f7fb fbba 	bl	8001700 <HAL_DMA_Start_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2210      	movs	r2, #16
 8005f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e051      	b.n	800604a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d018      	beq.n	8005fe0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006000:	637a      	str	r2, [r7, #52]	; 0x34
 8006002:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	613b      	str	r3, [r7, #16]
   return(result);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006034:	623a      	str	r2, [r7, #32]
 8006036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69f9      	ldr	r1, [r7, #28]
 800603a:	6a3a      	ldr	r2, [r7, #32]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	61bb      	str	r3, [r7, #24]
   return(result);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3758      	adds	r7, #88	; 0x58
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	080061af 	.word	0x080061af
 8006058:	080062db 	.word	0x080062db
 800605c:	08006319 	.word	0x08006319

08006060 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b08f      	sub	sp, #60	; 0x3c
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	61fb      	str	r3, [r7, #28]
   return(result);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006088:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e6      	bne.n	8006068 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6979      	ldr	r1, [r7, #20]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80060d6:	bf00      	nop
 80060d8:	373c      	adds	r7, #60	; 0x3c
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b095      	sub	sp, #84	; 0x54
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
 800610a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800610e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e6      	bne.n	80060ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	61fb      	str	r3, [r7, #28]
   return(result);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	64bb      	str	r3, [r7, #72]	; 0x48
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e3      	bne.n	800611c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d118      	bne.n	800618e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	60bb      	str	r3, [r7, #8]
   return(result);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	613b      	str	r3, [r7, #16]
   return(result);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e6      	bne.n	800615c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061a2:	bf00      	nop
 80061a4:	3754      	adds	r7, #84	; 0x54
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b09c      	sub	sp, #112	; 0x70
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d171      	bne.n	80062ae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	667b      	str	r3, [r7, #100]	; 0x64
 800621c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006224:	647a      	str	r2, [r7, #68]	; 0x44
 8006226:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800622a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	623b      	str	r3, [r7, #32]
   return(result);
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624e:	663b      	str	r3, [r7, #96]	; 0x60
 8006250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006258:	633a      	str	r2, [r7, #48]	; 0x30
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800626c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626e:	2220      	movs	r2, #32
 8006270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d118      	bne.n	80062ae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60fb      	str	r3, [r7, #12]
   return(result);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0310 	bic.w	r3, r3, #16
 8006290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	617b      	str	r3, [r7, #20]
   return(result);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b0:	2200      	movs	r2, #0
 80062b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d107      	bne.n	80062cc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062c2:	4619      	mov	r1, r3
 80062c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062c6:	f7ff f963 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062ca:	e002      	b.n	80062d2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80062cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062ce:	f7ff f941 	bl	8005554 <HAL_UART_RxCpltCallback>
}
 80062d2:	bf00      	nop
 80062d4:	3770      	adds	r7, #112	; 0x70
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d109      	bne.n	800630a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff f944 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006308:	e002      	b.n	8006310 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff f92c 	bl	8005568 <HAL_UART_RxHalfCpltCallback>
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006334:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d109      	bne.n	8006358 <UART_DMAError+0x40>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b21      	cmp	r3, #33	; 0x21
 8006348:	d106      	bne.n	8006358 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f7ff fe84 	bl	8006060 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d109      	bne.n	800637a <UART_DMAError+0x62>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b22      	cmp	r3, #34	; 0x22
 800636a:	d106      	bne.n	800637a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006374:	6978      	ldr	r0, [r7, #20]
 8006376:	f7ff feb4 	bl	80060e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	f043 0210 	orr.w	r2, r3, #16
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff f8f6 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff f8e0 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	613b      	str	r3, [r7, #16]
   return(result);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff f897 	bl	8005540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006412:	bf00      	nop
 8006414:	3720      	adds	r7, #32
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_UARTEx_DisableFifoMode+0x16>
 8006468:	2302      	movs	r3, #2
 800646a:	e027      	b.n	80064bc <HAL_UARTEx_DisableFifoMode+0x66>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2224      	movs	r2, #36	; 0x24
 8006478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800649a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e02d      	b.n	800653c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	; 0x24
 80064ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f84f 	bl	80065c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e02d      	b.n	80065b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f811 	bl	80065c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d108      	bne.n	80065e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065e0:	e031      	b.n	8006646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065e2:	2308      	movs	r3, #8
 80065e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065e6:	2308      	movs	r3, #8
 80065e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	0e5b      	lsrs	r3, r3, #25
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	0f5b      	lsrs	r3, r3, #29
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	7b3a      	ldrb	r2, [r7, #12]
 800660e:	4911      	ldr	r1, [pc, #68]	; (8006654 <UARTEx_SetNbDataToProcess+0x94>)
 8006610:	5c8a      	ldrb	r2, [r1, r2]
 8006612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006616:	7b3a      	ldrb	r2, [r7, #12]
 8006618:	490f      	ldr	r1, [pc, #60]	; (8006658 <UARTEx_SetNbDataToProcess+0x98>)
 800661a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800661c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	7b7a      	ldrb	r2, [r7, #13]
 800662c:	4909      	ldr	r1, [pc, #36]	; (8006654 <UARTEx_SetNbDataToProcess+0x94>)
 800662e:	5c8a      	ldrb	r2, [r1, r2]
 8006630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006634:	7b7a      	ldrb	r2, [r7, #13]
 8006636:	4908      	ldr	r1, [pc, #32]	; (8006658 <UARTEx_SetNbDataToProcess+0x98>)
 8006638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800663a:	fb93 f3f2 	sdiv	r3, r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	08006724 	.word	0x08006724
 8006658:	0800672c 	.word	0x0800672c

0800665c <memset>:
 800665c:	4402      	add	r2, r0
 800665e:	4603      	mov	r3, r0
 8006660:	4293      	cmp	r3, r2
 8006662:	d100      	bne.n	8006666 <memset+0xa>
 8006664:	4770      	bx	lr
 8006666:	f803 1b01 	strb.w	r1, [r3], #1
 800666a:	e7f9      	b.n	8006660 <memset+0x4>

0800666c <__libc_init_array>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4d0d      	ldr	r5, [pc, #52]	; (80066a4 <__libc_init_array+0x38>)
 8006670:	4c0d      	ldr	r4, [pc, #52]	; (80066a8 <__libc_init_array+0x3c>)
 8006672:	1b64      	subs	r4, r4, r5
 8006674:	10a4      	asrs	r4, r4, #2
 8006676:	2600      	movs	r6, #0
 8006678:	42a6      	cmp	r6, r4
 800667a:	d109      	bne.n	8006690 <__libc_init_array+0x24>
 800667c:	4d0b      	ldr	r5, [pc, #44]	; (80066ac <__libc_init_array+0x40>)
 800667e:	4c0c      	ldr	r4, [pc, #48]	; (80066b0 <__libc_init_array+0x44>)
 8006680:	f000 f818 	bl	80066b4 <_init>
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	2600      	movs	r6, #0
 800668a:	42a6      	cmp	r6, r4
 800668c:	d105      	bne.n	800669a <__libc_init_array+0x2e>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	f855 3b04 	ldr.w	r3, [r5], #4
 8006694:	4798      	blx	r3
 8006696:	3601      	adds	r6, #1
 8006698:	e7ee      	b.n	8006678 <__libc_init_array+0xc>
 800669a:	f855 3b04 	ldr.w	r3, [r5], #4
 800669e:	4798      	blx	r3
 80066a0:	3601      	adds	r6, #1
 80066a2:	e7f2      	b.n	800668a <__libc_init_array+0x1e>
 80066a4:	0800673c 	.word	0x0800673c
 80066a8:	0800673c 	.word	0x0800673c
 80066ac:	0800673c 	.word	0x0800673c
 80066b0:	08006740 	.word	0x08006740

080066b4 <_init>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr

080066c0 <_fini>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr
