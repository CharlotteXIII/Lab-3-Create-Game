
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006780  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069dc  080069dc  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e4  080069e4  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080069ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200002e8  08006cd4  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006cd4  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f45  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  000312a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  00034250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025473  00000000  00000000  00034cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011619  00000000  00000000  0005a131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3d3  00000000  00000000  0006b74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003710  00000000  00000000  00157b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006940 	.word	0x08006940

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002ec 	.word	0x200002ec
 8000214:	08006940 	.word	0x08006940

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 ffe5 	bl	80014f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 fa60 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fbd6 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fb82 	bl	8000c3c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 fae6 	bl	8000b08 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 faa4 	bl	8000a88 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fb2e 	bl	8000ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f001 f847 	bl	80015d8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // STM32 Part //
	  Dummy();
 800054a:	f000 fc9d 	bl	8000e88 <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 800054e:	2202      	movs	r2, #2
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <main+0x278>)
 8000552:	4893      	ldr	r0, [pc, #588]	; (80007a0 <main+0x27c>)
 8000554:	f004 fdca 	bl	80050ec <HAL_UART_Receive_DMA>
	if(A==8){
 8000558:	4b92      	ldr	r3, [pc, #584]	; (80007a4 <main+0x280>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d112      	bne.n	8000586 <main+0x62>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 8000560:	4891      	ldr	r0, [pc, #580]	; (80007a8 <main+0x284>)
 8000562:	f7ff fe59 	bl	8000218 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	2304      	movs	r3, #4
 800056c:	498e      	ldr	r1, [pc, #568]	; (80007a8 <main+0x284>)
 800056e:	488c      	ldr	r0, [pc, #560]	; (80007a0 <main+0x27c>)
 8000570:	f004 fd2e 	bl	8004fd0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 8000574:	2308      	movs	r3, #8
 8000576:	221b      	movs	r2, #27
 8000578:	498c      	ldr	r1, [pc, #560]	; (80007ac <main+0x288>)
 800057a:	4889      	ldr	r0, [pc, #548]	; (80007a0 <main+0x27c>)
 800057c:	f004 fd28 	bl	8004fd0 <HAL_UART_Transmit>
	  A=1;
 8000580:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <main+0x280>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <main+0x280>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <main+0x96>
			HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f001 f821 	bl	80015d8 <HAL_Delay>

			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 8000596:	230a      	movs	r3, #10
 8000598:	2264      	movs	r2, #100	; 0x64
 800059a:	4985      	ldr	r1, [pc, #532]	; (80007b0 <main+0x28c>)
 800059c:	4880      	ldr	r0, [pc, #512]	; (80007a0 <main+0x27c>)
 800059e:	f004 fd17 	bl	8004fd0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2228      	movs	r2, #40	; 0x28
 80005a6:	4983      	ldr	r1, [pc, #524]	; (80007b4 <main+0x290>)
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x27c>)
 80005aa:	f004 fd11 	bl	8004fd0 <HAL_UART_Transmit>
			A = 0;
 80005ae:	4b7d      	ldr	r3, [pc, #500]	; (80007a4 <main+0x280>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005b4:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <main+0x294>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005ba:	4b7f      	ldr	r3, [pc, #508]	; (80007b8 <main+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d145      	bne.n	800064e <main+0x12a>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <main+0x278>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b79      	cmp	r3, #121	; 0x79
 80005c8:	d120      	bne.n	800060c <main+0xe8>
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <main+0x278>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b0d      	cmp	r3, #13
 80005d0:	d11c      	bne.n	800060c <main+0xe8>
 80005d2:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x294>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d118      	bne.n	800060c <main+0xe8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005da:	230a      	movs	r3, #10
 80005dc:	221e      	movs	r2, #30
 80005de:	4977      	ldr	r1, [pc, #476]	; (80007bc <main+0x298>)
 80005e0:	486f      	ldr	r0, [pc, #444]	; (80007a0 <main+0x27c>)
 80005e2:	f004 fcf5 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005e6:	2308      	movs	r3, #8
 80005e8:	220c      	movs	r2, #12
 80005ea:	4975      	ldr	r1, [pc, #468]	; (80007c0 <main+0x29c>)
 80005ec:	486c      	ldr	r0, [pc, #432]	; (80007a0 <main+0x27c>)
 80005ee:	f004 fcef 	bl	8004fd0 <HAL_UART_Transmit>
				s1 =+ 1;
 80005f2:	4b74      	ldr	r3, [pc, #464]	; (80007c4 <main+0x2a0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
				A = 2;
 80005f8:	4b6a      	ldr	r3, [pc, #424]	; (80007a4 <main+0x280>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <main+0x278>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <main+0x278>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
 800060a:	e020      	b.n	800064e <main+0x12a>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x278>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b6e      	cmp	r3, #110	; 0x6e
 8000612:	d11c      	bne.n	800064e <main+0x12a>
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <main+0x278>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	d118      	bne.n	800064e <main+0x12a>
 800061c:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <main+0x294>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d114      	bne.n	800064e <main+0x12a>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000624:	230a      	movs	r3, #10
 8000626:	221e      	movs	r2, #30
 8000628:	4967      	ldr	r1, [pc, #412]	; (80007c8 <main+0x2a4>)
 800062a:	485d      	ldr	r0, [pc, #372]	; (80007a0 <main+0x27c>)
 800062c:	f004 fcd0 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000630:	2308      	movs	r3, #8
 8000632:	220c      	movs	r2, #12
 8000634:	4962      	ldr	r1, [pc, #392]	; (80007c0 <main+0x29c>)
 8000636:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x27c>)
 8000638:	f004 fcca 	bl	8004fd0 <HAL_UART_Transmit>
				A = 2;
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <main+0x280>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000642:	4b56      	ldr	r3, [pc, #344]	; (800079c <main+0x278>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <main+0x278>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 800064e:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <main+0x280>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d115      	bne.n	8000682 <main+0x15e>
			HAL_Delay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f000 ffbd 	bl	80015d8 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 800065e:	230a      	movs	r3, #10
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	495a      	ldr	r1, [pc, #360]	; (80007cc <main+0x2a8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <main+0x27c>)
 8000666:	f004 fcb3 	bl	8004fd0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800066a:	230a      	movs	r3, #10
 800066c:	2228      	movs	r2, #40	; 0x28
 800066e:	4951      	ldr	r1, [pc, #324]	; (80007b4 <main+0x290>)
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <main+0x27c>)
 8000672:	f004 fcad 	bl	8004fd0 <HAL_UART_Transmit>
			A = 0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x280>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
			mode = 2;
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <main+0x294>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <main+0x294>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d145      	bne.n	8000716 <main+0x1f2>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x278>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b79      	cmp	r3, #121	; 0x79
 8000690:	d11d      	bne.n	80006ce <main+0x1aa>
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x278>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d119      	bne.n	80006ce <main+0x1aa>
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d115      	bne.n	80006ce <main+0x1aa>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80006a2:	230a      	movs	r3, #10
 80006a4:	221e      	movs	r2, #30
 80006a6:	4945      	ldr	r1, [pc, #276]	; (80007bc <main+0x298>)
 80006a8:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x27c>)
 80006aa:	f004 fc91 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006ae:	2308      	movs	r3, #8
 80006b0:	220c      	movs	r2, #12
 80006b2:	4943      	ldr	r1, [pc, #268]	; (80007c0 <main+0x29c>)
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x27c>)
 80006b6:	f004 fc8b 	bl	8004fd0 <HAL_UART_Transmit>
				A = 3;
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x280>)
 80006bc:	2203      	movs	r2, #3
 80006be:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <main+0x278>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x278>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	705a      	strb	r2, [r3, #1]
 80006cc:	e023      	b.n	8000716 <main+0x1f2>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <main+0x278>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b6e      	cmp	r3, #110	; 0x6e
 80006d4:	d11f      	bne.n	8000716 <main+0x1f2>
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x278>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d11b      	bne.n	8000716 <main+0x1f2>
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d117      	bne.n	8000716 <main+0x1f2>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006e6:	230a      	movs	r3, #10
 80006e8:	221e      	movs	r2, #30
 80006ea:	4937      	ldr	r1, [pc, #220]	; (80007c8 <main+0x2a4>)
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x27c>)
 80006ee:	f004 fc6f 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006f2:	2308      	movs	r3, #8
 80006f4:	220c      	movs	r2, #12
 80006f6:	4932      	ldr	r1, [pc, #200]	; (80007c0 <main+0x29c>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <main+0x27c>)
 80006fa:	f004 fc69 	bl	8004fd0 <HAL_UART_Transmit>
				s2 =+ 1;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0x2ac>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				A = 3;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0x280>)
 8000706:	2203      	movs	r2, #3
 8000708:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0x278>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x278>)
 8000712:	2200      	movs	r2, #0
 8000714:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x280>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d115      	bne.n	800074a <main+0x226>
			HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 ff59 	bl	80015d8 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000726:	230a      	movs	r3, #10
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	492a      	ldr	r1, [pc, #168]	; (80007d4 <main+0x2b0>)
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x27c>)
 800072e:	f004 fc4f 	bl	8004fd0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000732:	230a      	movs	r3, #10
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	491f      	ldr	r1, [pc, #124]	; (80007b4 <main+0x290>)
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x27c>)
 800073a:	f004 fc49 	bl	8004fd0 <HAL_UART_Transmit>
			A = 0;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x280>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x294>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x294>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d165      	bne.n	800081e <main+0x2fa>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x278>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b79      	cmp	r3, #121	; 0x79
 8000758:	d140      	bne.n	80007dc <main+0x2b8>
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x278>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d13c      	bne.n	80007dc <main+0x2b8>
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x294>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d138      	bne.n	80007dc <main+0x2b8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800076a:	230a      	movs	r3, #10
 800076c:	221e      	movs	r2, #30
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <main+0x298>)
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <main+0x27c>)
 8000772:	f004 fc2d 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000776:	2308      	movs	r3, #8
 8000778:	220c      	movs	r2, #12
 800077a:	4911      	ldr	r1, [pc, #68]	; (80007c0 <main+0x29c>)
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x27c>)
 800077e:	f004 fc27 	bl	8004fd0 <HAL_UART_Transmit>
				s3 =+ 1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x2b4>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
				A = 4;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x280>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <main+0x278>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000794:	4b01      	ldr	r3, [pc, #4]	; (800079c <main+0x278>)
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
 800079a:	e040      	b.n	800081e <main+0x2fa>
 800079c:	200006c0 	.word	0x200006c0
 80007a0:	20000418 	.word	0x20000418
 80007a4:	200002d8 	.word	0x200002d8
 80007a8:	20000000 	.word	0x20000000
 80007ac:	08006958 	.word	0x08006958
 80007b0:	20000020 	.word	0x20000020
 80007b4:	2000014c 	.word	0x2000014c
 80007b8:	200006c8 	.word	0x200006c8
 80007bc:	20000174 	.word	0x20000174
 80007c0:	08006974 	.word	0x08006974
 80007c4:	200006c2 	.word	0x200006c2
 80007c8:	20000194 	.word	0x20000194
 80007cc:	20000084 	.word	0x20000084
 80007d0:	200006c3 	.word	0x200006c3
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200006c4 	.word	0x200006c4
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007dc:	4b6d      	ldr	r3, [pc, #436]	; (8000994 <main+0x470>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b6e      	cmp	r3, #110	; 0x6e
 80007e2:	d11c      	bne.n	800081e <main+0x2fa>
 80007e4:	4b6b      	ldr	r3, [pc, #428]	; (8000994 <main+0x470>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	2b0d      	cmp	r3, #13
 80007ea:	d118      	bne.n	800081e <main+0x2fa>
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <main+0x474>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d114      	bne.n	800081e <main+0x2fa>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80007f4:	230a      	movs	r3, #10
 80007f6:	221e      	movs	r2, #30
 80007f8:	4968      	ldr	r1, [pc, #416]	; (800099c <main+0x478>)
 80007fa:	4869      	ldr	r0, [pc, #420]	; (80009a0 <main+0x47c>)
 80007fc:	f004 fbe8 	bl	8004fd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000800:	2308      	movs	r3, #8
 8000802:	220c      	movs	r2, #12
 8000804:	4967      	ldr	r1, [pc, #412]	; (80009a4 <main+0x480>)
 8000806:	4866      	ldr	r0, [pc, #408]	; (80009a0 <main+0x47c>)
 8000808:	f004 fbe2 	bl	8004fd0 <HAL_UART_Transmit>
				A = 4;
 800080c:	4b66      	ldr	r3, [pc, #408]	; (80009a8 <main+0x484>)
 800080e:	2204      	movs	r2, #4
 8000810:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <main+0x470>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000818:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <main+0x470>)
 800081a:	2200      	movs	r2, #0
 800081c:	705a      	strb	r2, [r3, #1]
			}
		}
//ScoreBoard //
		if(A == 4){
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <main+0x484>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d11e      	bne.n	8000864 <main+0x340>
			HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fed5 	bl	80015d8 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800082e:	230a      	movs	r3, #10
 8000830:	221e      	movs	r2, #30
 8000832:	495e      	ldr	r1, [pc, #376]	; (80009ac <main+0x488>)
 8000834:	485a      	ldr	r0, [pc, #360]	; (80009a0 <main+0x47c>)
 8000836:	f004 fbcb 	bl	8004fd0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, ToT2, 50, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	2232      	movs	r2, #50	; 0x32
 800083e:	495c      	ldr	r1, [pc, #368]	; (80009b0 <main+0x48c>)
 8000840:	4857      	ldr	r0, [pc, #348]	; (80009a0 <main+0x47c>)
 8000842:	f004 fbc5 	bl	8004fd0 <HAL_UART_Transmit>
			TotalScore = s1+s2+s3;
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <main+0x490>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <main+0x494>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <main+0x498>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b59      	ldr	r3, [pc, #356]	; (80009c0 <main+0x49c>)
 800085c:	701a      	strb	r2, [r3, #0]
			A=5;
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <main+0x484>)
 8000860:	2205      	movs	r2, #5
 8000862:	601a      	str	r2, [r3, #0]
		}
// I2C part //
		if(A == 5){
 8000864:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <main+0x484>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d10c      	bne.n	8000886 <main+0x362>
			HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f000 feb2 	bl	80015d8 <HAL_Delay>
			WriteFlag = 1;
 8000874:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <main+0x4a0>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			C = 1;
 800087a:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <main+0x4a4>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
			A=7;
 8000880:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <main+0x484>)
 8000882:	2207      	movs	r2, #7
 8000884:	601a      	str	r2, [r3, #0]
		}
		if(A == 7){
 8000886:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <main+0x484>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d110      	bne.n	80008b0 <main+0x38c>
			HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fea1 	bl	80015d8 <HAL_Delay>
			ReadFlag = 1;
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <main+0x4a8>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 fe9a 	bl	80015d8 <HAL_Delay>
			State = 1;
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <main+0x4ac>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
			A = 9 ;
 80008aa:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <main+0x484>)
 80008ac:	2209      	movs	r2, #9
 80008ae:	601a      	str	r2, [r3, #0]
		}

			if(State == 1 && A == 9){
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <main+0x4ac>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d10e      	bne.n	80008d6 <main+0x3b2>
 80008b8:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <main+0x484>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b09      	cmp	r3, #9
 80008be:	d10a      	bne.n	80008d6 <main+0x3b2>
//				strcpy(D,ReadBack);//push readback in D array
//				D[0] = strtol(ReadBack[0], NULL, 16);
//				D[0] = ReadBack[0];
				HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f000 fe88 	bl	80015d8 <HAL_Delay>
				A = 10;
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <main+0x484>)
 80008ca:	220a      	movs	r2, #10
 80008cc:	601a      	str	r2, [r3, #0]
				HAL_Delay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f000 fe81 	bl	80015d8 <HAL_Delay>
			}

			if(A==10){
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <main+0x484>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	d14b      	bne.n	8000976 <main+0x452>
				if (ReadBack[0] == 0){
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <main+0x4b0>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10c      	bne.n	8000900 <main+0x3dc>
					B = 4;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x4b4>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S, 50, 10);
 80008ec:	230a      	movs	r3, #10
 80008ee:	2232      	movs	r2, #50	; 0x32
 80008f0:	493a      	ldr	r1, [pc, #232]	; (80009dc <main+0x4b8>)
 80008f2:	482b      	ldr	r0, [pc, #172]	; (80009a0 <main+0x47c>)
 80008f4:	f004 fb6c 	bl	8004fd0 <HAL_UART_Transmit>
					State = 0;
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <main+0x4ac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e031      	b.n	8000964 <main+0x440>
				}
				else if(ReadBack[0] == 1){
 8000900:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <main+0x4b0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10c      	bne.n	8000922 <main+0x3fe>
					B = 1;
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <main+0x4b4>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S1, 50, 10);
 800090e:	230a      	movs	r3, #10
 8000910:	2232      	movs	r2, #50	; 0x32
 8000912:	4933      	ldr	r1, [pc, #204]	; (80009e0 <main+0x4bc>)
 8000914:	4822      	ldr	r0, [pc, #136]	; (80009a0 <main+0x47c>)
 8000916:	f004 fb5b 	bl	8004fd0 <HAL_UART_Transmit>
					State = 0;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <main+0x4ac>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e020      	b.n	8000964 <main+0x440>
				}
				else if(ReadBack[0] == 2){
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <main+0x4b0>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d10c      	bne.n	8000944 <main+0x420>
					B = 2;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <main+0x4b4>)
 800092c:	2202      	movs	r2, #2
 800092e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S2, 50, 10);
 8000930:	230a      	movs	r3, #10
 8000932:	2232      	movs	r2, #50	; 0x32
 8000934:	492b      	ldr	r1, [pc, #172]	; (80009e4 <main+0x4c0>)
 8000936:	481a      	ldr	r0, [pc, #104]	; (80009a0 <main+0x47c>)
 8000938:	f004 fb4a 	bl	8004fd0 <HAL_UART_Transmit>
					State = 0;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <main+0x4ac>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e00f      	b.n	8000964 <main+0x440>
				}
				else if(ReadBack[0] == 3){
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <main+0x4b0>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d10b      	bne.n	8000964 <main+0x440>
					B = 3;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <main+0x4b4>)
 800094e:	2203      	movs	r2, #3
 8000950:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&hlpuart1, S3, 50, 10);
 8000952:	230a      	movs	r3, #10
 8000954:	2232      	movs	r2, #50	; 0x32
 8000956:	4924      	ldr	r1, [pc, #144]	; (80009e8 <main+0x4c4>)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <main+0x47c>)
 800095a:	f004 fb39 	bl	8004fd0 <HAL_UART_Transmit>
					State = 0;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <main+0x4ac>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
				}
				HAL_UART_Transmit(&hlpuart1,"YOU ARE NOOB,LOSER UwU.\n\r", 50, 10);
 8000964:	230a      	movs	r3, #10
 8000966:	2232      	movs	r2, #50	; 0x32
 8000968:	4920      	ldr	r1, [pc, #128]	; (80009ec <main+0x4c8>)
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <main+0x47c>)
 800096c:	f004 fb30 	bl	8004fd0 <HAL_UART_Transmit>
				A=11;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <main+0x484>)
 8000972:	220b      	movs	r2, #11
 8000974:	601a      	str	r2, [r3, #0]
		}
			if(A==11){
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <main+0x484>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b0b      	cmp	r3, #11
 800097c:	d102      	bne.n	8000984 <main+0x460>
				A=0;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <main+0x484>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
			}
  EEPROMWriteExample();
 8000984:	f000 fa1a 	bl	8000dbc <EEPROMWriteExample>
  EEPROMReadExample(ReadBack, 1);
 8000988:	2101      	movs	r1, #1
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <main+0x4b0>)
 800098c:	f000 fa5a 	bl	8000e44 <EEPROMReadExample>
	  Dummy();
 8000990:	e5db      	b.n	800054a <main+0x26>
 8000992:	bf00      	nop
 8000994:	200006c0 	.word	0x200006c0
 8000998:	200006c8 	.word	0x200006c8
 800099c:	20000194 	.word	0x20000194
 80009a0:	20000418 	.word	0x20000418
 80009a4:	08006974 	.word	0x08006974
 80009a8:	200002d8 	.word	0x200002d8
 80009ac:	200001b4 	.word	0x200001b4
 80009b0:	200001d4 	.word	0x200001d4
 80009b4:	200006c2 	.word	0x200006c2
 80009b8:	200006c3 	.word	0x200006c3
 80009bc:	200006c4 	.word	0x200006c4
 80009c0:	200006cc 	.word	0x200006cc
 80009c4:	200006cd 	.word	0x200006cd
 80009c8:	200006d8 	.word	0x200006d8
 80009cc:	200006ce 	.word	0x200006ce
 80009d0:	200006dc 	.word	0x200006dc
 80009d4:	200006d0 	.word	0x200006d0
 80009d8:	200006d4 	.word	0x200006d4
 80009dc:	20000208 	.word	0x20000208
 80009e0:	2000023c 	.word	0x2000023c
 80009e4:	20000270 	.word	0x20000270
 80009e8:	200002a4 	.word	0x200002a4
 80009ec:	08006980 	.word	0x08006980

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	2238      	movs	r2, #56	; 0x38
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 ff72 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f003 fa5c 	bl	8003ed0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a32:	2355      	movs	r3, #85	; 0x55
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 faf6 	bl	8004038 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a52:	f000 fa31 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fdf4 	bl	800465c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a7a:	f000 fa1d 	bl	8000eb8 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	; 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_I2C1_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x7c>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ac4:	f001 fbd1 	bl	800226a <HAL_I2C_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 f9f3 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ad6:	f003 f963 	bl	8003da0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 f9ea 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ae8:	f003 f9a5 	bl	8003e36 <HAL_I2CEx_ConfigDigitalFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 f9e1 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000304 	.word	0x20000304
 8000b00:	40005400 	.word	0x40005400
 8000b04:	30a0a7fb 	.word	0x30a0a7fb

08000b08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <MX_LPUART1_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b20:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b50:	f004 f9ee 	bl	8004f30 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b5a:	f000 f9ad 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b62:	f005 fdf7 	bl	8006754 <HAL_UARTEx_SetTxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b6c:	f000 f9a4 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b74:	f005 fe2c 	bl	80067d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f000 f99b 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	f005 fdad 	bl	80066e2 <HAL_UARTEx_DisableFifoMode>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 f993 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000418 	.word	0x20000418
 8000b9c:	40008000 	.word	0x40008000

08000ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <MX_USART1_UART_Init+0x98>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000bee:	f004 f99f 	bl	8004f30 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 f95e 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000c00:	f005 fda8 	bl	8006754 <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 f955 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000c12:	f005 fddd 	bl	80067d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c1c:	f000 f94c 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_USART1_UART_Init+0x94>)
 8000c22:	f005 fd5e 	bl	80066e2 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f000 f944 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200004ac 	.word	0x200004ac
 8000c38:	40013800 	.word	0x40013800

08000c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6493      	str	r3, [r2, #72]	; 0x48
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_DMA_Init+0xa0>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200b      	movs	r0, #11
 8000c78:	f000 fdab 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f000 fdc2 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200c      	movs	r0, #12
 8000c88:	f000 fda3 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c8c:	200c      	movs	r0, #12
 8000c8e:	f000 fdba 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	200d      	movs	r0, #13
 8000c98:	f000 fd9b 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c9c:	200d      	movs	r0, #13
 8000c9e:	f000 fdb2 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	200e      	movs	r0, #14
 8000ca8:	f000 fd93 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000cac:	200e      	movs	r0, #14
 8000cae:	f000 fdaa 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 fd8b 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cbc:	200f      	movs	r0, #15
 8000cbe:	f000 fda2 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2010      	movs	r0, #16
 8000cc8:	f000 fd83 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ccc:	2010      	movs	r0, #16
 8000cce:	f000 fd9a 	bl	8001806 <HAL_NVIC_EnableIRQ>

}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_GPIO_Init+0xd4>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f001 fa2f 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_GPIO_Init+0xd8>)
 8000d7a:	f001 f89f 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 f890 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2028      	movs	r0, #40	; 0x28
 8000da2:	f000 fd16 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da6:	2028      	movs	r0, #40	; 0x28
 8000da8:	f000 fd2d 	bl	8001806 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000800 	.word	0x48000800

08000dbc <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af02      	add	r7, sp, #8
	if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <EEPROMWriteExample+0x74>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d02f      	beq.n	8000e2a <EEPROMWriteExample+0x6e>
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <EEPROMWriteExample+0x78>)
 8000dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b20      	cmp	r3, #32
 8000dd4:	d129      	bne.n	8000e2a <EEPROMWriteExample+0x6e>
	static uint8_t data[4];
	 data[0]=TotalScore;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <EEPROMWriteExample+0x7c>)
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000ddc:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 1);
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	222c      	movs	r2, #44	; 0x2c
 8000dfc:	21a0      	movs	r1, #160	; 0xa0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <EEPROMWriteExample+0x78>)
 8000e00:	f001 face 	bl	80023a0 <HAL_I2C_Mem_Write_IT>
		WriteFlag = 0;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <EEPROMWriteExample+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	if(A==11){
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <EEPROMWriteExample+0x84>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b0b      	cmp	r3, #11
 8000e10:	d10b      	bne.n	8000e2a <EEPROMWriteExample+0x6e>
		 data[0]=0x00;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
		 data[1]=0x00;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	705a      	strb	r2, [r3, #1]
		 data[2]=0x00;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	709a      	strb	r2, [r3, #2]
		 data[3]=0x00;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <EEPROMWriteExample+0x80>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	70da      	strb	r2, [r3, #3]
	}
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200006cd 	.word	0x200006cd
 8000e34:	20000304 	.word	0x20000304
 8000e38:	200006cc 	.word	0x200006cc
 8000e3c:	200006e0 	.word	0x200006e0
 8000e40:	200002d8 	.word	0x200002d8

08000e44 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
	if (ReadFlag ==1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <EEPROMReadExample+0x3c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10f      	bne.n	8000e78 <EEPROMReadExample+0x34>
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <EEPROMReadExample+0x40>)
 8000e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d109      	bne.n	8000e78 <EEPROMReadExample+0x34>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	222c      	movs	r2, #44	; 0x2c
 8000e70:	21a0      	movs	r1, #160	; 0xa0
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <EEPROMReadExample+0x40>)
 8000e74:	f001 fb1e 	bl	80024b4 <HAL_I2C_Mem_Read_IT>
//		ReadFlag = 0;
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200006ce 	.word	0x200006ce
 8000e84:	20000304 	.word	0x20000304

08000e88 <Dummy>:



// For LD2 Test //
void Dummy(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000e8c:	f000 fb98 	bl	80015c0 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <Dummy+0x2c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d30a      	bcc.n	8000eb0 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000e9a:	f000 fb91 	bl	80015c0 <HAL_GetTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	3364      	adds	r3, #100	; 0x64
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <Dummy+0x2c>)
 8000ea4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f001 f9a0 	bl	80021f0 <HAL_GPIO_TogglePin>
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200006e4 	.word	0x200006e4

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000efa:	f003 f88d 	bl	8004018 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09e      	sub	sp, #120	; 0x78
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2254      	movs	r2, #84	; 0x54
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fcdb 	bl	80068e8 <memset>
  if(hi2c->Instance==I2C1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_I2C_MspInit+0x16c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8099 	bne.w	8001070 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fda2 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f56:	f7ff ffaf 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a47      	ldr	r2, [pc, #284]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f84:	2304      	movs	r3, #4
 8000f86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483c      	ldr	r0, [pc, #240]	; (8001080 <HAL_I2C_MspInit+0x174>)
 8000f90:	f000 ff94 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_I2C_MspInit+0x170>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fae:	4a36      	ldr	r2, [pc, #216]	; (8001088 <HAL_I2C_MspInit+0x17c>)
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fe2:	4828      	ldr	r0, [pc, #160]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000fe4:	f000 fc2a 	bl	800183c <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000fee:	f7ff ff63 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_I2C_MspInit+0x178>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001000:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_I2C_MspInit+0x184>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001006:	2211      	movs	r2, #17
 8001008:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_I2C_MspInit+0x180>)
 800100c:	2210      	movs	r2, #16
 800100e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_I2C_MspInit+0x180>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_I2C_MspInit+0x180>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001036:	f000 fc01 	bl	800183c <HAL_DMA_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001040:	f7ff ff3a 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_I2C_MspInit+0x180>)
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_I2C_MspInit+0x180>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f000 fbbc 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f000 fbd3 	bl	8001806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f000 fbb4 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f000 fbcb 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3778      	adds	r7, #120	; 0x78
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400
 8001084:	20000358 	.word	0x20000358
 8001088:	40020058 	.word	0x40020058
 800108c:	200003b8 	.word	0x200003b8
 8001090:	4002006c 	.word	0x4002006c

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0a0      	sub	sp, #128	; 0x80
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2254      	movs	r2, #84	; 0x54
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fc17 	bl	80068e8 <memset>
  if(huart->Instance==LPUART1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a99      	ldr	r2, [pc, #612]	; (8001324 <HAL_UART_MspInit+0x290>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f040 8093 	bne.w	80011ec <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010c6:	2320      	movs	r3, #32
 80010c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fcde 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010de:	f7ff feeb 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010e2:	4b91      	ldr	r3, [pc, #580]	; (8001328 <HAL_UART_MspInit+0x294>)
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	4a90      	ldr	r2, [pc, #576]	; (8001328 <HAL_UART_MspInit+0x294>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010ee:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <HAL_UART_MspInit+0x294>)
 80010f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <HAL_UART_MspInit+0x294>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a8a      	ldr	r2, [pc, #552]	; (8001328 <HAL_UART_MspInit+0x294>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_UART_MspInit+0x294>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001112:	230c      	movs	r3, #12
 8001114:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001122:	230c      	movs	r3, #12
 8001124:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fec4 	bl	8001ebc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001134:	4b7d      	ldr	r3, [pc, #500]	; (800132c <HAL_UART_MspInit+0x298>)
 8001136:	4a7e      	ldr	r2, [pc, #504]	; (8001330 <HAL_UART_MspInit+0x29c>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800113a:	4b7c      	ldr	r3, [pc, #496]	; (800132c <HAL_UART_MspInit+0x298>)
 800113c:	2223      	movs	r2, #35	; 0x23
 800113e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001140:	4b7a      	ldr	r3, [pc, #488]	; (800132c <HAL_UART_MspInit+0x298>)
 8001142:	2210      	movs	r2, #16
 8001144:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b79      	ldr	r3, [pc, #484]	; (800132c <HAL_UART_MspInit+0x298>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b77      	ldr	r3, [pc, #476]	; (800132c <HAL_UART_MspInit+0x298>)
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_UART_MspInit+0x298>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	4b74      	ldr	r3, [pc, #464]	; (800132c <HAL_UART_MspInit+0x298>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800115e:	4b73      	ldr	r3, [pc, #460]	; (800132c <HAL_UART_MspInit+0x298>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001164:	4b71      	ldr	r3, [pc, #452]	; (800132c <HAL_UART_MspInit+0x298>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800116a:	4870      	ldr	r0, [pc, #448]	; (800132c <HAL_UART_MspInit+0x298>)
 800116c:	f000 fb66 	bl	800183c <HAL_DMA_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001176:	f7ff fe9f 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a6b      	ldr	r2, [pc, #428]	; (800132c <HAL_UART_MspInit+0x298>)
 800117e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001180:	4a6a      	ldr	r2, [pc, #424]	; (800132c <HAL_UART_MspInit+0x298>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001186:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 8001188:	4a6b      	ldr	r2, [pc, #428]	; (8001338 <HAL_UART_MspInit+0x2a4>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800118c:	4b69      	ldr	r3, [pc, #420]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 800118e:	2222      	movs	r2, #34	; 0x22
 8001190:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a4:	4b63      	ldr	r3, [pc, #396]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011aa:	4b62      	ldr	r3, [pc, #392]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80011b0:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011b2:	2220      	movs	r2, #32
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80011bc:	485d      	ldr	r0, [pc, #372]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011be:	f000 fb3d 	bl	800183c <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80011c8:	f7ff fe76 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011d4:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_UART_MspInit+0x2a0>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	205b      	movs	r0, #91	; 0x5b
 80011e0:	f000 faf7 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80011e4:	205b      	movs	r0, #91	; 0x5b
 80011e6:	f000 fb0e 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ea:	e096      	b.n	800131a <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_UART_MspInit+0x2a8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	f040 8091 	bne.w	800131a <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fc45 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001210:	f7ff fe52 	bl	8000eb8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001214:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_UART_MspInit+0x294>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	4a43      	ldr	r2, [pc, #268]	; (8001328 <HAL_UART_MspInit+0x294>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121e:	6613      	str	r3, [r2, #96]	; 0x60
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <HAL_UART_MspInit+0x294>)
 8001222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122c:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <HAL_UART_MspInit+0x294>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_UART_MspInit+0x294>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_UART_MspInit+0x294>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001244:	2330      	movs	r3, #48	; 0x30
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001254:	2307      	movs	r3, #7
 8001256:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800125c:	4619      	mov	r1, r3
 800125e:	4838      	ldr	r0, [pc, #224]	; (8001340 <HAL_UART_MspInit+0x2ac>)
 8001260:	f000 fe2c 	bl	8001ebc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001266:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_UART_MspInit+0x2b4>)
 8001268:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 800126c:	2218      	movs	r2, #24
 800126e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001290:	2220      	movs	r2, #32
 8001292:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800129a:	482a      	ldr	r0, [pc, #168]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 800129c:	f000 face 	bl	800183c <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0x216>
      Error_Handler();
 80012a6:	f7ff fe07 	bl	8000eb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a25      	ldr	r2, [pc, #148]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 80012ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80012b2:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_UART_MspInit+0x2b0>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_UART_MspInit+0x2bc>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012c0:	2219      	movs	r2, #25
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <HAL_UART_MspInit+0x2b8>)
 80012f0:	f000 faa4 	bl	800183c <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80012fa:	f7ff fddd 	bl	8000eb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_UART_MspInit+0x2b8>)
 8001302:	67da      	str	r2, [r3, #124]	; 0x7c
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_UART_MspInit+0x2b8>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2025      	movs	r0, #37	; 0x25
 8001310:	f000 fa5f 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001314:	2025      	movs	r0, #37	; 0x25
 8001316:	f000 fa76 	bl	8001806 <HAL_NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3780      	adds	r7, #128	; 0x80
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40008000 	.word	0x40008000
 8001328:	40021000 	.word	0x40021000
 800132c:	20000540 	.word	0x20000540
 8001330:	40020008 	.word	0x40020008
 8001334:	200005a0 	.word	0x200005a0
 8001338:	4002001c 	.word	0x4002001c
 800133c:	40013800 	.word	0x40013800
 8001340:	48000800 	.word	0x48000800
 8001344:	20000600 	.word	0x20000600
 8001348:	40020030 	.word	0x40020030
 800134c:	20000660 	.word	0x20000660
 8001350:	40020044 	.word	0x40020044

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 f8fc 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA1_Channel1_IRQHandler+0x10>)
 80013ae:	f000 fc28 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000540 	.word	0x20000540

080013bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA1_Channel2_IRQHandler+0x10>)
 80013c2:	f000 fc1e 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200005a0 	.word	0x200005a0

080013d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <DMA1_Channel3_IRQHandler+0x10>)
 80013d6:	f000 fc14 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000600 	.word	0x20000600

080013e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <DMA1_Channel4_IRQHandler+0x10>)
 80013ea:	f000 fc0a 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000660 	.word	0x20000660

080013f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA1_Channel5_IRQHandler+0x10>)
 80013fe:	f000 fc00 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000358 	.word	0x20000358

0800140c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel6_IRQHandler+0x10>)
 8001412:	f000 fbf6 	bl	8001c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200003b8 	.word	0x200003b8

08001420 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <I2C1_EV_IRQHandler+0x10>)
 8001426:	f001 f8cb 	bl	80025c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000304 	.word	0x20000304

08001434 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <I2C1_ER_IRQHandler+0x10>)
 800143a:	f001 f8db 	bl	80025f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000304 	.word	0x20000304

08001448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USART1_IRQHandler+0x10>)
 800144e:	f003 fe99 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200004ac 	.word	0x200004ac

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001464:	f000 fede 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <LPUART1_IRQHandler+0x10>)
 8001472:	f003 fe87 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000418 	.word	0x20000418

08001480 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a8:	f7ff ffea 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <LoopForever+0xe>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <LoopForever+0x16>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f005 fa11 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d6:	f7ff f825 	bl	8000524 <main>

080014da <LoopForever>:

LoopForever:
    b LoopForever
 80014da:	e7fe      	b.n	80014da <LoopForever>
  ldr   r0, =_estack
 80014dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 80014e8:	080069ec 	.word	0x080069ec
  ldr r2, =_sbss
 80014ec:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80014f0:	200006ec 	.word	0x200006ec

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>

080014f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f95b 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f80e 	bl	8001528 <HAL_InitTick>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	e001      	b.n	800151c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001518:	f7ff fcd4 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800151c:	79fb      	ldrb	r3, [r7, #7]

}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_InitTick+0x68>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d022      	beq.n	8001582 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_InitTick+0x6c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_InitTick+0x68>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001548:	fbb1 f3f3 	udiv	r3, r1, r3
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f966 	bl	8001822 <HAL_SYSTICK_Config>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10f      	bne.n	800157c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d809      	bhi.n	8001576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001562:	2200      	movs	r2, #0
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	f04f 30ff 	mov.w	r0, #4294967295
 800156a:	f000 f932 	bl	80017d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_InitTick+0x70>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e007      	b.n	8001586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e004      	b.n	8001586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002e4 	.word	0x200002e4
 8001594:	200002dc 	.word	0x200002dc
 8001598:	200002e0 	.word	0x200002e0

0800159c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x1c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x20>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <HAL_IncTick+0x1c>)
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	200006e8 	.word	0x200006e8
 80015bc:	200002e4 	.word	0x200002e4

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200006e8 	.word	0x200006e8

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d004      	beq.n	80015fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_Delay+0x40>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fc:	bf00      	nop
 80015fe:	f7ff ffdf 	bl	80015c0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	429a      	cmp	r2, r3
 800160c:	d8f7      	bhi.n	80015fe <HAL_Delay+0x26>
  {
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002e4 	.word	0x200002e4

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff40 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff33 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa4 	bl	8001778 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e08d      	b.n	800196a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_DMA_Init+0x138>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d80f      	bhi.n	800187a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <HAL_DMA_Init+0x13c>)
 8001862:	4413      	add	r3, r2
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_DMA_Init+0x140>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	009a      	lsls	r2, r3, #2
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a42      	ldr	r2, [pc, #264]	; (8001980 <HAL_DMA_Init+0x144>)
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
 8001878:	e00e      	b.n	8001898 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <HAL_DMA_Init+0x148>)
 8001882:	4413      	add	r3, r2
 8001884:	4a3d      	ldr	r2, [pc, #244]	; (800197c <HAL_DMA_Init+0x140>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	009a      	lsls	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <HAL_DMA_Init+0x14c>)
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fa84 	bl	8001df8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f8:	d102      	bne.n	8001900 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001914:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <HAL_DMA_Init+0x104>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d80c      	bhi.n	8001940 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 faa4 	bl	8001e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e008      	b.n	8001952 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020407 	.word	0x40020407
 8001978:	bffdfff8 	.word	0xbffdfff8
 800197c:	cccccccd 	.word	0xcccccccd
 8001980:	40020000 	.word	0x40020000
 8001984:	bffdfbf8 	.word	0xbffdfbf8
 8001988:	40020400 	.word	0x40020400

0800198c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Start_IT+0x20>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e066      	b.n	8001a7a <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d155      	bne.n	8001a6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f9c9 	bl	8001d7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 020e 	orr.w	r2, r2, #14
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00f      	b.n	8001a24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 020a 	orr.w	r2, r2, #10
 8001a22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e005      	b.n	8001a78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a74:	2302      	movs	r3, #2
 8001a76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d005      	beq.n	8001aa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e037      	b.n	8001b16 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020e 	bic.w	r2, r2, #14
 8001ab4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f003 021f 	and.w	r2, r3, #31
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001af2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00c      	beq.n	8001b16 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b14:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e047      	b.n	8001bf8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020e 	bic.w	r2, r2, #14
 8001b76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bb4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bd6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    }
  }
  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2204      	movs	r2, #4
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d026      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x7a>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	2104      	movs	r1, #4
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d071      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c7a:	e06c      	b.n	8001d56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2202      	movs	r2, #2
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02e      	beq.n	8001cee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d029      	beq.n	8001cee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 020a 	bic.w	r2, r2, #10
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2102      	movs	r1, #2
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d038      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cec:	e033      	b.n	8001d56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d025      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 020e 	bic.w	r2, r2, #14
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
}
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d6e:	b2db      	uxtb	r3, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001da4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d108      	bne.n	8001ddc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dda:	e007      	b.n	8001dec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d802      	bhi.n	8001e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e001      	b.n	8001e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e14:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3b08      	subs	r3, #8
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	009a      	lsls	r2, r3, #2
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40020407 	.word	0x40020407
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020820 	.word	0x40020820
 8001e6c:	cccccccd 	.word	0xcccccccd
 8001e70:	40020880 	.word	0x40020880

08001e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e96:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	1000823f 	.word	0x1000823f
 8001eb8:	40020940 	.word	0x40020940

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eca:	e15a      	b.n	8002182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 814c 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6613      	str	r3, [r2, #96]	; 0x60
 800203c:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002048:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x1f4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <HAL_GPIO_Init+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1f0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_GPIO_Init+0x2f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_GPIO_Init+0x2fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1e4>
 800209c:	2305      	movs	r3, #5
 800209e:	e00a      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a0:	2306      	movs	r3, #6
 80020a2:	e008      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002122:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_GPIO_Init+0x300>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_GPIO_Init+0x300>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae9d 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43d9      	mvns	r1, r3
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	400b      	ands	r3, r1
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f806 	bl	8002254 <HAL_GPIO_EXTI_Callback>
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e08d      	b.n	8002398 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe fe3b 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2224      	movs	r2, #36	; 0x24
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	e006      	b.n	80022f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d108      	bne.n	800230c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e007      	b.n	800231c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800233e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69d9      	ldr	r1, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	817b      	strh	r3, [r7, #10]
 80023b2:	460b      	mov	r3, r1
 80023b4:	813b      	strh	r3, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d16a      	bne.n	800249c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_I2C_Mem_Write_IT+0x32>
 80023cc:	8bbb      	ldrh	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e05f      	b.n	800249e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	e055      	b.n	800249e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Mem_Write_IT+0x60>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e04e      	b.n	800249e <HAL_I2C_Mem_Write_IT+0xfe>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8bba      	ldrh	r2, [r7, #28]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_I2C_Mem_Write_IT+0x108>)
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_I2C_Mem_Write_IT+0x10c>)
 800243a:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800243c:	897a      	ldrh	r2, [r7, #10]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d109      	bne.n	800245c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	651a      	str	r2, [r3, #80]	; 0x50
 800245a:	e00b      	b.n	8002474 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b29b      	uxth	r3, r3
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800246a:	893b      	ldrh	r3, [r7, #8]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_I2C_Mem_Write_IT+0x110>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f001 fb78 	bl	8003b78 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002490:	2101      	movs	r1, #1
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f001 fba2 	bl	8003bdc <I2C_Enable_IRQ>

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	ffff0000 	.word	0xffff0000
 80024ac:	0800277d 	.word	0x0800277d
 80024b0:	80002000 	.word	0x80002000

080024b4 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d166      	bne.n	80025a8 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_I2C_Mem_Read_IT+0x32>
 80024e0:	8bbb      	ldrh	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e05b      	b.n	80025aa <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	e051      	b.n	80025aa <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2C_Mem_Read_IT+0x60>
 8002510:	2302      	movs	r3, #2
 8002512:	e04a      	b.n	80025aa <HAL_I2C_Mem_Read_IT+0xf6>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2222      	movs	r2, #34	; 0x22
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8bba      	ldrh	r2, [r7, #28]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_I2C_Mem_Read_IT+0x100>)
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_I2C_Mem_Read_IT+0x104>)
 8002548:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800254a:	897a      	ldrh	r2, [r7, #10]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d109      	bne.n	800256a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002556:	893b      	ldrh	r3, [r7, #8]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	651a      	str	r2, [r3, #80]	; 0x50
 8002568:	e00b      	b.n	8002582 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800256a:	893b      	ldrh	r3, [r7, #8]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	b29b      	uxth	r3, r3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002578:	893b      	ldrh	r3, [r7, #8]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	8979      	ldrh	r1, [r7, #10]
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_I2C_Mem_Read_IT+0x108>)
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2300      	movs	r3, #0
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f001 faf2 	bl	8003b78 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800259c:	2101      	movs	r1, #1
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f001 fb1c 	bl	8003bdc <I2C_Enable_IRQ>

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	0800277d 	.word	0x0800277d
 80025bc:	80002000 	.word	0x80002000

080025c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
  }
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00f      	beq.n	8002636 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002634:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00f      	beq.n	8002660 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f043 0208 	orr.w	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00f      	beq.n	800268a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002688:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 030b 	and.w	r3, r3, #11
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f911 	bl	80038c4 <I2C_ITError>
  }
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	70fb      	strb	r3, [r7, #3]
 8002706:	4613      	mov	r3, r2
 8002708:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002788:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <I2C_Mem_ISR_IT+0x244>)
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <I2C_Mem_ISR_IT+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e10c      	b.n	80029b8 <I2C_Mem_ISR_IT+0x23c>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d012      	beq.n	80027d6 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f043 0204 	orr.w	r2, r3, #4
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f001 f98f 	bl	8003af2 <I2C_Flush_TXDR>
 80027d4:	e0dd      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d022      	beq.n	8002826 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01d      	beq.n	8002826 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002824:	e0b5      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02c      	beq.n	800288a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002836:	2b00      	cmp	r3, #0
 8002838:	d027      	beq.n	800288a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d118      	bne.n	8002876 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002874:	e08d      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800287e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f04f 32ff 	mov.w	r2, #4294967295
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002888:	e083      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d03c      	beq.n	800290e <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800289a:	2b00      	cmp	r3, #0
 800289c:	d037      	beq.n	800290e <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02c      	beq.n	8002902 <I2C_Mem_ISR_IT+0x186>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d128      	bne.n	8002902 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d910      	bls.n	80028dc <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	b299      	uxth	r1, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f001 f94f 	bl	8003b78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028da:	e017      	b.n	800290c <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	b299      	uxth	r1, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 f93c 	bl	8003b78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002900:	e004      	b.n	800290c <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002902:	2140      	movs	r1, #64	; 0x40
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 ffdd 	bl	80038c4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290a:	e042      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
 800290c:	e041      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03c      	beq.n	8002992 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800291e:	2b00      	cmp	r3, #0
 8002920:	d037      	beq.n	8002992 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002922:	2101      	movs	r1, #1
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f001 f9dd 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800292a:	2102      	movs	r1, #2
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 f955 	bl	8003bdc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b22      	cmp	r3, #34	; 0x22
 800293c:	d101      	bne.n	8002942 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <I2C_Mem_ISR_IT+0x248>)
 8002940:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2bff      	cmp	r3, #255	; 0xff
 800294a:	d910      	bls.n	800296e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	b299      	uxth	r1, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 f906 	bl	8003b78 <I2C_TransferConfig>
 800296c:	e011      	b.n	8002992 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	b299      	uxth	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f001 f8f3 	bl	8003b78 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80029a6:	6939      	ldr	r1, [r7, #16]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fd0b 	bl	80033c4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	80002000 	.word	0x80002000
 80029c4:	80002400 	.word	0x80002400

080029c8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <I2C_Slave_ISR_IT+0x24>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0e2      	b.n	8002bb2 <I2C_Slave_ISR_IT+0x1ea>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a08:	6939      	ldr	r1, [r7, #16]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fda2 	bl	8003554 <I2C_ITSlaveCplt>
 8002a10:	e0ca      	b.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04b      	beq.n	8002ab4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d046      	beq.n	8002ab4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d128      	bne.n	8002a82 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b28      	cmp	r3, #40	; 0x28
 8002a3a:	d108      	bne.n	8002a4e <I2C_Slave_ISR_IT+0x86>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a42:	d104      	bne.n	8002a4e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fee8 	bl	800381c <I2C_ITListenCplt>
 8002a4c:	e031      	b.n	8002ab2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b29      	cmp	r3, #41	; 0x29
 8002a58:	d10e      	bne.n	8002a78 <I2C_Slave_ISR_IT+0xb0>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a60:	d00a      	beq.n	8002a78 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f001 f841 	bl	8003af2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fc4b 	bl	800330c <I2C_ITSlaveSeqCplt>
 8002a76:	e01c      	b.n	8002ab2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a80:	e08f      	b.n	8002ba2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2210      	movs	r2, #16
 8002a88:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <I2C_Slave_ISR_IT+0xdc>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa2:	d17e      	bne.n	8002ba2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 ff0a 	bl	80038c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ab0:	e077      	b.n	8002ba2 <I2C_Slave_ISR_IT+0x1da>
 8002ab2:	e076      	b.n	8002ba2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02f      	beq.n	8002b1e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02a      	beq.n	8002b1e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d14b      	bne.n	8002ba6 <I2C_Slave_ISR_IT+0x1de>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b14:	d047      	beq.n	8002ba6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fbf8 	bl	800330c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b1c:	e043      	b.n	8002ba6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b32:	6939      	ldr	r1, [r7, #16]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb28 	bl	800318a <I2C_ITAddrCplt>
 8002b3a:	e035      	b.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d030      	beq.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02b      	beq.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
 8002b8a:	e00d      	b.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b92:	d002      	beq.n	8002b9a <I2C_Slave_ISR_IT+0x1d2>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fbb6 	bl	800330c <I2C_ITSlaveSeqCplt>
 8002ba0:	e002      	b.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002ba6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b088      	sub	sp, #32
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <I2C_Master_ISR_DMA+0x1a>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0d9      	b.n	8002d88 <I2C_Master_ISR_DMA+0x1ce>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d011      	beq.n	8002c14 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c04:	2120      	movs	r1, #32
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 ffe8 	bl	8003bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 ff70 	bl	8003af2 <I2C_Flush_TXDR>
 8002c12:	e0b4      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d071      	beq.n	8002d02 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d06c      	beq.n	8002d02 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04e      	beq.n	8002ce0 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d906      	bls.n	8002c68 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e010      	b.n	8002c8a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7a:	d003      	beq.n	8002c84 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e002      	b.n	8002c8a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c88:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	8a79      	ldrh	r1, [r7, #18]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 ff6d 	bl	8003b78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b22      	cmp	r3, #34	; 0x22
 8002cba:	d108      	bne.n	8002cce <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ccc:	e057      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cdc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cde:	e04e      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d003      	beq.n	8002cf8 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 face 	bl	8003292 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002cf6:	e042      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fde2 	bl	80038c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002d00:	e03d      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d119      	bne.n	8002d54 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d2e:	d025      	beq.n	8002d7c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d38:	d108      	bne.n	8002d4c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d48:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002d4a:	e017      	b.n	8002d7c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 faa0 	bl	8003292 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002d52:	e013      	b.n	8002d7c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fdb4 	bl	80038c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d5c:	e00e      	b.n	8002d7c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fb25 	bl	80033c4 <I2C_ITMasterCplt>
 8002d7a:	e000      	b.n	8002d7e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002d7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002d9c:	4b8d      	ldr	r3, [pc, #564]	; (8002fd4 <I2C_Mem_ISR_DMA+0x244>)
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <I2C_Mem_ISR_DMA+0x1e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e10e      	b.n	8002fcc <I2C_Mem_ISR_DMA+0x23c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d016      	beq.n	8002dee <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d011      	beq.n	8002dee <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002dde:	2120      	movs	r1, #32
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fefb 	bl	8003bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fe83 	bl	8003af2 <I2C_Flush_TXDR>
 8002dec:	e0e9      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
 8002e14:	e0d5      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05f      	beq.n	8002ee0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d05a      	beq.n	8002ee0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 ff59 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e32:	2110      	movs	r1, #16
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fed1 	bl	8003bdc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d048      	beq.n	8002ed6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2bff      	cmp	r3, #255	; 0xff
 8002e4c:	d910      	bls.n	8002e70 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	b299      	uxth	r1, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fe85 	bl	8003b78 <I2C_TransferConfig>
 8002e6e:	e011      	b.n	8002e94 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	b299      	uxth	r1, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fe72 	bl	8003b78 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b22      	cmp	r3, #34	; 0x22
 8002eb0:	d108      	bne.n	8002ec4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ec2:	e07e      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ed4:	e075      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fcf3 	bl	80038c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ede:	e070      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d05d      	beq.n	8002fa6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d058      	beq.n	8002fa6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fef4 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002efc:	2110      	movs	r1, #16
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fe6c 	bl	8003bdc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b22      	cmp	r3, #34	; 0x22
 8002f0e:	d101      	bne.n	8002f14 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <I2C_Mem_ISR_DMA+0x248>)
 8002f12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d910      	bls.n	8002f40 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	22ff      	movs	r2, #255	; 0xff
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	b299      	uxth	r1, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fe1d 	bl	8003b78 <I2C_TransferConfig>
 8002f3e:	e011      	b.n	8002f64 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fe0a 	bl	8003b78 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d108      	bne.n	8002f94 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f90:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f92:	e016      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fa2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fa4:	e00d      	b.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fa01 	bl	80033c4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	80002000 	.word	0x80002000
 8002fd8:	80002400 	.word	0x80002400

08002fdc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <I2C_Slave_ISR_DMA+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0c0      	b.n	8003182 <I2C_Slave_ISR_DMA+0x1a6>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa98 	bl	8003554 <I2C_ITSlaveCplt>
 8003024:	e0a8      	b.n	8003178 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8095 	beq.w	800315c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808f 	beq.w	800315c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d07d      	beq.n	800314e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003070:	2301      	movs	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d128      	bne.n	80030ee <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b28      	cmp	r3, #40	; 0x28
 80030a6:	d108      	bne.n	80030ba <I2C_Slave_ISR_DMA+0xde>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ae:	d104      	bne.n	80030ba <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fbb2 	bl	800381c <I2C_ITListenCplt>
 80030b8:	e048      	b.n	800314c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b29      	cmp	r3, #41	; 0x29
 80030c4:	d10e      	bne.n	80030e4 <I2C_Slave_ISR_DMA+0x108>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030cc:	d00a      	beq.n	80030e4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2210      	movs	r2, #16
 80030d4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fd0b 	bl	8003af2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f915 	bl	800330c <I2C_ITSlaveSeqCplt>
 80030e2:	e033      	b.n	800314c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80030ec:	e034      	b.n	8003158 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2210      	movs	r2, #16
 80030f4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003108:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <I2C_Slave_ISR_DMA+0x13c>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003116:	d11f      	bne.n	8003158 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b21      	cmp	r3, #33	; 0x21
 800311c:	d002      	beq.n	8003124 <I2C_Slave_ISR_DMA+0x148>
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b29      	cmp	r3, #41	; 0x29
 8003122:	d103      	bne.n	800312c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
 800312a:	e008      	b.n	800313e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b22      	cmp	r3, #34	; 0x22
 8003130:	d002      	beq.n	8003138 <I2C_Slave_ISR_DMA+0x15c>
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b2a      	cmp	r3, #42	; 0x2a
 8003136:	d102      	bne.n	800313e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	; 0x22
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4619      	mov	r1, r3
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fbbd 	bl	80038c4 <I2C_ITError>
      if (treatdmanack == 1U)
 800314a:	e005      	b.n	8003158 <I2C_Slave_ISR_DMA+0x17c>
 800314c:	e004      	b.n	8003158 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2210      	movs	r2, #16
 8003154:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003156:	e00f      	b.n	8003178 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8003158:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800315a:	e00d      	b.n	8003178 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f809 	bl	800318a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031a0:	2b28      	cmp	r3, #40	; 0x28
 80031a2:	d16a      	bne.n	800327a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031c2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031de:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d138      	bne.n	800325a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80031e8:	897b      	ldrh	r3, [r7, #10]
 80031ea:	09db      	lsrs	r3, r3, #7
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	4053      	eors	r3, r2
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f003 0306 	and.w	r3, r3, #6
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11c      	bne.n	8003236 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	2b02      	cmp	r3, #2
 8003210:	d13b      	bne.n	800328a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2208      	movs	r2, #8
 800321e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003228:	89ba      	ldrh	r2, [r7, #12]
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fa63 	bl	80026fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003234:	e029      	b.n	800328a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800323a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fd50 	bl	8003ce4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800324c:	89ba      	ldrh	r2, [r7, #12]
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fa51 	bl	80026fa <HAL_I2C_AddrCallback>
}
 8003258:	e017      	b.n	800328a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800325a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fd40 	bl	8003ce4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800326c:	89ba      	ldrh	r2, [r7, #12]
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fa41 	bl	80026fa <HAL_I2C_AddrCallback>
}
 8003278:	e007      	b.n	800328a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2208      	movs	r2, #8
 8003280:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b21      	cmp	r3, #33	; 0x21
 80032ac:	d115      	bne.n	80032da <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2211      	movs	r2, #17
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c2:	2101      	movs	r1, #1
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fd0d 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f9e9 	bl	80026aa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032d8:	e014      	b.n	8003304 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2212      	movs	r2, #18
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032ee:	2102      	movs	r1, #2
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fcf7 	bl	8003ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff f9dd 	bl	80026be <HAL_I2C_MasterRxCpltCallback>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e00c      	b.n	800335a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003358:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b29      	cmp	r3, #41	; 0x29
 8003364:	d112      	bne.n	800338c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2228      	movs	r2, #40	; 0x28
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003374:	2101      	movs	r1, #1
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fcb4 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f9a4 	bl	80026d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800338a:	e017      	b.n	80033bc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d111      	bne.n	80033bc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2228      	movs	r2, #40	; 0x28
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2222      	movs	r2, #34	; 0x22
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033a6:	2102      	movs	r1, #2
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fc9b 	bl	8003ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff f995 	bl	80026e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b21      	cmp	r3, #33	; 0x21
 80033e4:	d107      	bne.n	80033f6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033e6:	2101      	movs	r1, #1
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fc7b 	bl	8003ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2211      	movs	r2, #17
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
 80033f4:	e00c      	b.n	8003410 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b22      	cmp	r3, #34	; 0x22
 8003400:	d106      	bne.n	8003410 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003402:	2102      	movs	r1, #2
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fc6d 	bl	8003ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2212      	movs	r2, #18
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <I2C_ITMasterCplt+0x188>)
 800341c:	400b      	ands	r3, r1
 800341e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a49      	ldr	r2, [pc, #292]	; (8003550 <I2C_ITMasterCplt+0x18c>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2210      	movs	r2, #16
 800343c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b60      	cmp	r3, #96	; 0x60
 8003454:	d10a      	bne.n	800346c <I2C_ITMasterCplt+0xa8>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	b2db      	uxtb	r3, r3
 8003468:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800346a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb40 	bl	8003af2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d002      	beq.n	800348a <I2C_ITMasterCplt+0xc6>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa17 	bl	80038c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003496:	e054      	b.n	8003542 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d124      	bne.n	80034ee <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d10b      	bne.n	80034d6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff f92b 	bl	800272a <HAL_I2C_MemTxCpltCallback>
}
 80034d4:	e035      	b.n	8003542 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff f8df 	bl	80026aa <HAL_I2C_MasterTxCpltCallback>
}
 80034ec:	e029      	b.n	8003542 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b22      	cmp	r3, #34	; 0x22
 80034f8:	d123      	bne.n	8003542 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d10b      	bne.n	800352c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff f90a 	bl	800273e <HAL_I2C_MemRxCpltCallback>
}
 800352a:	e00a      	b.n	8003542 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff f8be 	bl	80026be <HAL_I2C_MasterRxCpltCallback>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	fe00e800 	.word	0xfe00e800
 8003550:	ffff0000 	.word	0xffff0000

08003554 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003576:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2220      	movs	r2, #32
 800357e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003580:	7afb      	ldrb	r3, [r7, #11]
 8003582:	2b21      	cmp	r3, #33	; 0x21
 8003584:	d002      	beq.n	800358c <I2C_ITSlaveCplt+0x38>
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	2b29      	cmp	r3, #41	; 0x29
 800358a:	d108      	bne.n	800359e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800358c:	f248 0101 	movw	r1, #32769	; 0x8001
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fba7 	bl	8003ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
 800359c:	e019      	b.n	80035d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2b22      	cmp	r3, #34	; 0x22
 80035a2:	d002      	beq.n	80035aa <I2C_ITSlaveCplt+0x56>
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	2b2a      	cmp	r3, #42	; 0x2a
 80035a8:	d108      	bne.n	80035bc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035aa:	f248 0102 	movw	r1, #32770	; 0x8002
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb98 	bl	8003ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2222      	movs	r2, #34	; 0x22
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ba:	e00a      	b.n	80035d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80035bc:	7afb      	ldrb	r3, [r7, #11]
 80035be:	2b28      	cmp	r3, #40	; 0x28
 80035c0:	d107      	bne.n	80035d2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80035c2:	f248 0103 	movw	r1, #32771	; 0x8003
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb8c 	bl	8003ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b89      	ldr	r3, [pc, #548]	; (8003814 <I2C_ITSlaveCplt+0x2c0>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa7d 	bl	8003af2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003610:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01f      	beq.n	800365a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003628:	e017      	b.n	800365a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d049      	beq.n	800375a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d044      	beq.n	800375a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d128      	bne.n	800372c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b28      	cmp	r3, #40	; 0x28
 80036e4:	d108      	bne.n	80036f8 <I2C_ITSlaveCplt+0x1a4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ec:	d104      	bne.n	80036f8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036ee:	6979      	ldr	r1, [r7, #20]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f893 	bl	800381c <I2C_ITListenCplt>
 80036f6:	e030      	b.n	800375a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b29      	cmp	r3, #41	; 0x29
 8003702:	d10e      	bne.n	8003722 <I2C_ITSlaveCplt+0x1ce>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800370a:	d00a      	beq.n	8003722 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2210      	movs	r2, #16
 8003712:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9ec 	bl	8003af2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fdf6 	bl	800330c <I2C_ITSlaveSeqCplt>
 8003720:	e01b      	b.n	800375a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e016      	b.n	800375a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <I2C_ITSlaveCplt+0x1fa>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d105      	bne.n	800375a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8b5 	bl	80038c4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8a4 	bl	80038c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b28      	cmp	r3, #40	; 0x28
 8003786:	d141      	bne.n	800380c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003788:	6979      	ldr	r1, [r7, #20]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f846 	bl	800381c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003790:	e03c      	b.n	800380c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379a:	d014      	beq.n	80037c6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fdb5 	bl	800330c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <I2C_ITSlaveCplt+0x2c4>)
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe ffa9 	bl	8002716 <HAL_I2C_ListenCpltCallback>
}
 80037c4:	e022      	b.n	800380c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	d10e      	bne.n	80037f0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe ff7c 	bl	80026e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80037ee:	e00d      	b.n	800380c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe ff63 	bl	80026d2 <HAL_I2C_SlaveTxCpltCallback>
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	fe00e800 	.word	0xfe00e800
 8003818:	ffff0000 	.word	0xffff0000

0800381c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <I2C_ITListenCplt+0xa4>)
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003898:	f248 0103 	movw	r1, #32771	; 0x8003
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa21 	bl	8003ce4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2210      	movs	r2, #16
 80038a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe ff2f 	bl	8002716 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	ffff0000 	.word	0xffff0000

080038c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a6d      	ldr	r2, [pc, #436]	; (8003a98 <I2C_ITError+0x1d4>)
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b28      	cmp	r3, #40	; 0x28
 80038fa:	d005      	beq.n	8003908 <I2C_ITError+0x44>
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b29      	cmp	r3, #41	; 0x29
 8003900:	d002      	beq.n	8003908 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b2a      	cmp	r3, #42	; 0x2a
 8003906:	d10b      	bne.n	8003920 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003908:	2103      	movs	r1, #3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9ea 	bl	8003ce4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2228      	movs	r2, #40	; 0x28
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a60      	ldr	r2, [pc, #384]	; (8003a9c <I2C_ITError+0x1d8>)
 800391c:	635a      	str	r2, [r3, #52]	; 0x34
 800391e:	e030      	b.n	8003982 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003920:	f248 0103 	movw	r1, #32771	; 0x8003
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9dd 	bl	8003ce4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8e1 	bl	8003af2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d01f      	beq.n	800397c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d114      	bne.n	800397c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	d109      	bne.n	8003974 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2210      	movs	r2, #16
 8003966:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f043 0204 	orr.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2220      	movs	r2, #32
 800397a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d039      	beq.n	8003a04 <I2C_ITError+0x140>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b11      	cmp	r3, #17
 8003994:	d002      	beq.n	800399c <I2C_ITError+0xd8>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b21      	cmp	r3, #33	; 0x21
 800399a:	d133      	bne.n	8003a04 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039aa:	d107      	bne.n	80039bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe f9cd 	bl	8001d60 <HAL_DMA_GetState>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d017      	beq.n	80039fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	4a33      	ldr	r2, [pc, #204]	; (8003aa0 <I2C_ITError+0x1dc>)
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe f8a7 	bl	8001b34 <HAL_DMA_Abort_IT>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d04d      	beq.n	8003a88 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f6:	4610      	mov	r0, r2
 80039f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039fa:	e045      	b.n	8003a88 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f851 	bl	8003aa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a02:	e041      	b.n	8003a88 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d039      	beq.n	8003a80 <I2C_ITError+0x1bc>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b12      	cmp	r3, #18
 8003a10:	d002      	beq.n	8003a18 <I2C_ITError+0x154>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b22      	cmp	r3, #34	; 0x22
 8003a16:	d133      	bne.n	8003a80 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d107      	bne.n	8003a38 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe f98f 	bl	8001d60 <HAL_DMA_GetState>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d017      	beq.n	8003a78 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <I2C_ITError+0x1dc>)
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe f869 	bl	8001b34 <HAL_DMA_Abort_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a72:	4610      	mov	r0, r2
 8003a74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a76:	e009      	b.n	8003a8c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f813 	bl	8003aa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a7e:	e005      	b.n	8003a8c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f80f 	bl	8003aa4 <I2C_TreatErrorCallback>
  }
}
 8003a86:	e002      	b.n	8003a8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a8c:	bf00      	nop
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	ffff0000 	.word	0xffff0000
 8003a9c:	080029c9 	.word	0x080029c9
 8003aa0:	08003b3b 	.word	0x08003b3b

08003aa4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d10e      	bne.n	8003ad6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe fe49 	bl	8002766 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ad4:	e009      	b.n	8003aea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fe fe34 	bl	8002752 <HAL_I2C_ErrorCallback>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d103      	bne.n	8003b10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d007      	beq.n	8003b2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	619a      	str	r2, [r3, #24]
  }
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2200      	movs	r2, #0
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	2200      	movs	r2, #0
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff ff9b 	bl	8003aa4 <I2C_TreatErrorCallback>
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	4613      	mov	r3, r2
 8003b88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b90:	7a7b      	ldrb	r3, [r7, #9]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	0d5b      	lsrs	r3, r3, #21
 8003bb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <I2C_TransferConfig+0x60>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	ea02 0103 	and.w	r1, r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	03ff63ff 	.word	0x03ff63ff

08003bdc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <I2C_Enable_IRQ+0xfc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d032      	beq.n	8003c5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003bfa:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <I2C_Enable_IRQ+0x100>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d02d      	beq.n	8003c5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c04:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <I2C_Enable_IRQ+0x104>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d028      	beq.n	8003c5c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da03      	bge.n	8003c1a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d103      	bne.n	8003c4c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d133      	bne.n	8003cba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 0320 	orr.w	r3, r3, #32
 8003c58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c5a:	e02e      	b.n	8003cba <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	da03      	bge.n	8003c6c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d103      	bne.n	8003c9e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c9e:	887b      	ldrh	r3, [r7, #2]
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d103      	bne.n	8003cac <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003caa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d103      	bne.n	8003cba <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	08002bbb 	.word	0x08002bbb
 8003cdc:	08002fdd 	.word	0x08002fdd
 8003ce0:	08002d91 	.word	0x08002d91

08003ce4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00f      	beq.n	8003d1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d12:	2b28      	cmp	r3, #40	; 0x28
 8003d14:	d003      	beq.n	8003d1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00f      	beq.n	8003d48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d3c:	2b28      	cmp	r3, #40	; 0x28
 8003d3e:	d003      	beq.n	8003d48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da03      	bge.n	8003d58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d103      	bne.n	8003d66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d103      	bne.n	8003d74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f043 0320 	orr.w	r3, r3, #32
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d103      	bne.n	8003d82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	400a      	ands	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d138      	bne.n	8003e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e032      	b.n	8003e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d139      	bne.n	8003ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e033      	b.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d141      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eea:	d131      	bne.n	8003f50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eec:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef2:	4a46      	ldr	r2, [pc, #280]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f04:	4a41      	ldr	r2, [pc, #260]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f0c:	4b40      	ldr	r3, [pc, #256]	; (8004010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2232      	movs	r2, #50	; 0x32
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f22:	e002      	b.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2a:	4b38      	ldr	r3, [pc, #224]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d102      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f2      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f3e:	4b33      	ldr	r3, [pc, #204]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d158      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e057      	b.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f50:	4b2e      	ldr	r3, [pc, #184]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f56:	4a2d      	ldr	r2, [pc, #180]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f60:	e04d      	b.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d141      	bne.n	8003fee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d131      	bne.n	8003fdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f78:	4b24      	ldr	r3, [pc, #144]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7e:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f90:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2232      	movs	r2, #50	; 0x32
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	0c9b      	lsrs	r3, r3, #18
 8003faa:	3301      	adds	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	e002      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d102      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f2      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d112      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e011      	b.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fec:	e007      	b.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fee:	4b07      	ldr	r3, [pc, #28]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ffc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40007000 	.word	0x40007000
 8004010:	200002dc 	.word	0x200002dc
 8004014:	431bde83 	.word	0x431bde83

08004018 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004026:	6093      	str	r3, [r2, #8]
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40007000 	.word	0x40007000

08004038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e2fe      	b.n	8004648 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d075      	beq.n	8004142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004056:	4b97      	ldr	r3, [pc, #604]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004060:	4b94      	ldr	r3, [pc, #592]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d102      	bne.n	8004076 <HAL_RCC_OscConfig+0x3e>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d002      	beq.n	800407c <HAL_RCC_OscConfig+0x44>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d10b      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05b      	beq.n	8004140 <HAL_RCC_OscConfig+0x108>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d157      	bne.n	8004140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e2d9      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d106      	bne.n	80040ac <HAL_RCC_OscConfig+0x74>
 800409e:	4b85      	ldr	r3, [pc, #532]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a84      	ldr	r2, [pc, #528]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e01d      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b7f      	ldr	r3, [pc, #508]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7e      	ldr	r2, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7b      	ldr	r2, [pc, #492]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040d0:	4b78      	ldr	r3, [pc, #480]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a77      	ldr	r2, [pc, #476]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b75      	ldr	r3, [pc, #468]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a74      	ldr	r2, [pc, #464]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd fa66 	bl	80015c0 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fd fa62 	bl	80015c0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e29e      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0xc0>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fa52 	bl	80015c0 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fd fa4e 	bl	80015c0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e28a      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004132:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0xe8>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d075      	beq.n	800423a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004158:	4b56      	ldr	r3, [pc, #344]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0x136>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d002      	beq.n	8004174 <HAL_RCC_OscConfig+0x13c>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d11f      	bne.n	80041b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004174:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x154>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e25d      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	4946      	ldr	r1, [pc, #280]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a0:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <HAL_RCC_OscConfig+0x280>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd f9bf 	bl	8001528 <HAL_InitTick>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d043      	beq.n	8004238 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e249      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3c      	ldr	r2, [pc, #240]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd f9fa 	bl	80015c0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fd f9f6 	bl	80015c0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e232      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e2:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	492d      	ldr	r1, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e01a      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2a      	ldr	r2, [pc, #168]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800420a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd f9d6 	bl	80015c0 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fd f9d2 	bl	80015c0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e20e      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x1e0>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d041      	beq.n	80042ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01c      	beq.n	8004288 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fd f9af 	bl	80015c0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7fd f9ab 	bl	80015c0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1e7      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ef      	beq.n	8004266 <HAL_RCC_OscConfig+0x22e>
 8004286:	e020      	b.n	80042ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd f992 	bl	80015c0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800429e:	e00d      	b.n	80042bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd f98e 	bl	80015c0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d906      	bls.n	80042bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1ca      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	200002e0 	.word	0x200002e0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042bc:	4b8c      	ldr	r3, [pc, #560]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ea      	bne.n	80042a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80a6 	beq.w	8004424 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042dc:	4b84      	ldr	r3, [pc, #528]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_OscConfig+0x2b4>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x2b6>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b7f      	ldr	r3, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4a7e      	ldr	r2, [pc, #504]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
 80042fe:	4b7c      	ldr	r3, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430e:	4b79      	ldr	r3, [pc, #484]	; (80044f4 <HAL_RCC_OscConfig+0x4bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800431a:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCC_OscConfig+0x4bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a75      	ldr	r2, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x4bc>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fd f94b 	bl	80015c0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fd f947 	bl	80015c0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e183      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x4bc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d108      	bne.n	8004366 <HAL_RCC_OscConfig+0x32e>
 8004354:	4b66      	ldr	r3, [pc, #408]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004364:	e024      	b.n	80043b0 <HAL_RCC_OscConfig+0x378>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b05      	cmp	r3, #5
 800436c:	d110      	bne.n	8004390 <HAL_RCC_OscConfig+0x358>
 800436e:	4b60      	ldr	r3, [pc, #384]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	4a5a      	ldr	r2, [pc, #360]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438e:	e00f      	b.n	80043b0 <HAL_RCC_OscConfig+0x378>
 8004390:	4b57      	ldr	r3, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	4a56      	ldr	r2, [pc, #344]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d016      	beq.n	80043e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd f902 	bl	80015c0 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fd f8fe 	bl	80015c0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e138      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d6:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ed      	beq.n	80043c0 <HAL_RCC_OscConfig+0x388>
 80043e4:	e015      	b.n	8004412 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fd f8eb 	bl	80015c0 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fd f8e7 	bl	80015c0 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e121      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004404:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ed      	bne.n	80043ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004412:	7ffb      	ldrb	r3, [r7, #31]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d105      	bne.n	8004424 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004418:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	4a34      	ldr	r2, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d03c      	beq.n	80044aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01c      	beq.n	8004472 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004438:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443e:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd f8ba 	bl	80015c0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004450:	f7fd f8b6 	bl	80015c0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0f2      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ef      	beq.n	8004450 <HAL_RCC_OscConfig+0x418>
 8004470:	e01b      	b.n	80044aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004472:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7fd f89d 	bl	80015c0 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800448a:	f7fd f899 	bl	80015c0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0d5      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ef      	bne.n	800448a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80c9 	beq.w	8004646 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	f000 8083 	beq.w	80045c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d15e      	bne.n	8004588 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd f873 	bl	80015c0 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	e00c      	b.n	80044f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd f86f 	bl	80015c0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d905      	bls.n	80044f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0ab      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f8:	4b55      	ldr	r3, [pc, #340]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ec      	bne.n	80044de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004504:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	4b52      	ldr	r3, [pc, #328]	; (8004654 <HAL_RCC_OscConfig+0x61c>)
 800450a:	4013      	ands	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6a11      	ldr	r1, [r2, #32]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004514:	3a01      	subs	r2, #1
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800451e:	0212      	lsls	r2, r2, #8
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0552      	lsls	r2, r2, #21
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004532:	0852      	lsrs	r2, r2, #1
 8004534:	3a01      	subs	r2, #1
 8004536:	0652      	lsls	r2, r2, #25
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800453e:	06d2      	lsls	r2, r2, #27
 8004540:	430a      	orrs	r2, r1
 8004542:	4943      	ldr	r1, [pc, #268]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 8004544:	4313      	orrs	r3, r2
 8004546:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a40      	ldr	r2, [pc, #256]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a3d      	ldr	r2, [pc, #244]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800455a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd f82e 	bl	80015c0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd f82a 	bl	80015c0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e066      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x530>
 8004586:	e05e      	b.n	8004646 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a30      	ldr	r2, [pc, #192]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd f814 	bl	80015c0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd f810 	bl	80015c0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e04c      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ae:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	4924      	ldr	r1, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_OscConfig+0x620>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	60cb      	str	r3, [r1, #12]
 80045c6:	e03e      	b.n	8004646 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e039      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045d4:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <HAL_RCC_OscConfig+0x618>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d12c      	bne.n	8004642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	3b01      	subs	r3, #1
 80045f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d123      	bne.n	8004642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d11b      	bne.n	8004642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d113      	bne.n	8004642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d109      	bne.n	8004642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	3b01      	subs	r3, #1
 800463c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	019f800c 	.word	0x019f800c
 8004658:	feeefffc 	.word	0xfeeefffc

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e11e      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	4b91      	ldr	r3, [pc, #580]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d910      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b8e      	ldr	r3, [pc, #568]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 020f 	bic.w	r2, r3, #15
 800468a:	498c      	ldr	r1, [pc, #560]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b8a      	ldr	r3, [pc, #552]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e106      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d073      	beq.n	8004798 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d129      	bne.n	800470c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b8:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0f4      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046c8:	f000 f99e 	bl	8004a08 <RCC_GetSysClockFreqFromPLLSource>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <HAL_RCC_ClockConfig+0x268>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d93f      	bls.n	8004756 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046d6:	4b7a      	ldr	r3, [pc, #488]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d033      	beq.n	8004756 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d12f      	bne.n	8004756 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046f6:	4b72      	ldr	r3, [pc, #456]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fe:	4a70      	ldr	r2, [pc, #448]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004704:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e024      	b.n	8004756 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d107      	bne.n	8004724 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004714:	4b6a      	ldr	r3, [pc, #424]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0c6      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0be      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004734:	f000 f8ce 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4a61      	ldr	r2, [pc, #388]	; (80048c4 <HAL_RCC_ClockConfig+0x268>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d909      	bls.n	8004756 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474a:	4a5d      	ldr	r2, [pc, #372]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004756:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0203 	bic.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4957      	ldr	r1, [pc, #348]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004768:	f7fc ff2a 	bl	80015c0 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	e00a      	b.n	8004786 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004770:	f7fc ff26 	bl	80015c0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e095      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	4b4e      	ldr	r3, [pc, #312]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 020c 	and.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	429a      	cmp	r2, r3
 8004796:	d1eb      	bne.n	8004770 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d023      	beq.n	80047ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a42      	ldr	r2, [pc, #264]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047c8:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047d0:	4a3b      	ldr	r2, [pc, #236]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4936      	ldr	r1, [pc, #216]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
 80047ea:	e008      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d105      	bne.n	80047fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a32      	ldr	r2, [pc, #200]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d21d      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480c:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 020f 	bic.w	r2, r3, #15
 8004814:	4929      	ldr	r1, [pc, #164]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800481c:	f7fc fed0 	bl	80015c0 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fc fecc 	bl	80015c0 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e03b      	b.n	80048b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_ClockConfig+0x260>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d1ed      	bne.n	8004824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4917      	ldr	r1, [pc, #92]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490f      	ldr	r1, [pc, #60]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004886:	f000 f825 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCC_ClockConfig+0x264>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490c      	ldr	r1, [pc, #48]	; (80048c8 <HAL_RCC_ClockConfig+0x26c>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <HAL_RCC_ClockConfig+0x270>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x274>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc fe3c 	bl	8001528 <HAL_InitTick>
 80048b0:	4603      	mov	r3, r0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	04c4b400 	.word	0x04c4b400
 80048c8:	0800699c 	.word	0x0800699c
 80048cc:	200002dc 	.word	0x200002dc
 80048d0:	200002e0 	.word	0x200002e0

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048e6:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e047      	b.n	800497c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e03e      	b.n	800497c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d136      	bne.n	8004978 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004914:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	3301      	adds	r3, #1
 8004920:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d10c      	bne.n	8004942 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <HAL_RCC_GetSysClockFreq+0xc0>)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	68d2      	ldr	r2, [r2, #12]
 8004934:	0a12      	lsrs	r2, r2, #8
 8004936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	617b      	str	r3, [r7, #20]
      break;
 8004940:	e00c      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004942:	4a13      	ldr	r2, [pc, #76]	; (8004990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	0a12      	lsrs	r2, r2, #8
 8004950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
      break;
 800495a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_GetSysClockFreq+0xb8>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	0e5b      	lsrs	r3, r3, #25
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e001      	b.n	800497c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800497c:	693b      	ldr	r3, [r7, #16]
}
 800497e:	4618      	mov	r0, r3
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	00f42400 	.word	0x00f42400
 8004994:	016e3600 	.word	0x016e3600

08004998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCC_GetHCLKFreq+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	200002dc 	.word	0x200002dc

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049b4:	f7ff fff0 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4904      	ldr	r1, [pc, #16]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000
 80049d8:	080069ac 	.word	0x080069ac

080049dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049e0:	f7ff ffda 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	0adb      	lsrs	r3, r3, #11
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4904      	ldr	r1, [pc, #16]	; (8004a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000
 8004a04:	080069ac 	.word	0x080069ac

08004a08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d10c      	bne.n	8004a46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a36:	68d2      	ldr	r2, [r2, #12]
 8004a38:	0a12      	lsrs	r2, r2, #8
 8004a3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	617b      	str	r3, [r7, #20]
    break;
 8004a44:	e00c      	b.n	8004a60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a50:	68d2      	ldr	r2, [r2, #12]
 8004a52:	0a12      	lsrs	r2, r2, #8
 8004a54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
    break;
 8004a5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	0e5b      	lsrs	r3, r3, #25
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a7a:	687b      	ldr	r3, [r7, #4]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	016e3600 	.word	0x016e3600
 8004a90:	00f42400 	.word	0x00f42400

08004a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8098 	beq.w	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab6:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	4b40      	ldr	r3, [pc, #256]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	4a3f      	ldr	r2, [pc, #252]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ada:	2301      	movs	r3, #1
 8004adc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ade:	4b3a      	ldr	r3, [pc, #232]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a39      	ldr	r2, [pc, #228]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fd69 	bl	80015c0 <HAL_GetTick>
 8004aee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af0:	e009      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fc fd65 	bl	80015c0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d902      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	74fb      	strb	r3, [r7, #19]
        break;
 8004b04:	e005      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ef      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d159      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d019      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	4a1b      	ldr	r2, [pc, #108]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b72:	f7fc fd25 	bl	80015c0 <HAL_GetTick>
 8004b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b78:	e00b      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fc fd21 	bl	80015c0 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d902      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b90:	e006      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ec      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	74bb      	strb	r3, [r7, #18]
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd0:	7c7b      	ldrb	r3, [r7, #17]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd6:	4ba7      	ldr	r3, [pc, #668]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4aa6      	ldr	r2, [pc, #664]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bee:	4ba1      	ldr	r3, [pc, #644]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f023 0203 	bic.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	499d      	ldr	r1, [pc, #628]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c10:	4b98      	ldr	r3, [pc, #608]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f023 020c 	bic.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4995      	ldr	r1, [pc, #596]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c32:	4b90      	ldr	r3, [pc, #576]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	498c      	ldr	r1, [pc, #560]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c54:	4b87      	ldr	r3, [pc, #540]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4984      	ldr	r1, [pc, #528]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c76:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	497b      	ldr	r1, [pc, #492]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c98:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	4973      	ldr	r1, [pc, #460]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cba:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	496a      	ldr	r1, [pc, #424]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cdc:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4962      	ldr	r1, [pc, #392]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	4959      	ldr	r1, [pc, #356]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d20:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	4951      	ldr	r1, [pc, #324]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d42:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	4948      	ldr	r1, [pc, #288]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d015      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d64:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4940      	ldr	r1, [pc, #256]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d105      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d015      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d9c:	4b35      	ldr	r3, [pc, #212]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	4932      	ldr	r1, [pc, #200]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d015      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	4924      	ldr	r1, [pc, #144]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df2:	d105      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df4:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	4916      	ldr	r1, [pc, #88]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a10      	ldr	r2, [pc, #64]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	4908      	ldr	r1, [pc, #32]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e62:	d109      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a02      	ldr	r2, [pc, #8]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
 8004e70:	e002      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	4926      	ldr	r1, [pc, #152]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eca:	4918      	ldr	r1, [pc, #96]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d015      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	490a      	ldr	r1, [pc, #40]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f12:	d105      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f20:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000

08004f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e042      	b.n	8004fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fc f89d 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 ff56 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fc57 	bl	8005834 <UART_SetConfig>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01b      	b.n	8004fc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 ffd5 	bl	8005f70 <UART_CheckIdleState>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d17b      	bne.n	80050e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_UART_Transmit+0x26>
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e074      	b.n	80050e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2221      	movs	r2, #33	; 0x21
 8005006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800500a:	f7fc fad9 	bl	80015c0 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d108      	bne.n	800503c <HAL_UART_Transmit+0x6c>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e003      	b.n	8005044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005044:	e030      	b.n	80050a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f001 f837 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e03d      	b.n	80050e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3302      	adds	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e007      	b.n	8005096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1c8      	bne.n	8005046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f001 f800 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e006      	b.n	80050e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	; 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005100:	2b20      	cmp	r3, #32
 8005102:	d137      	bne.n	8005174 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Receive_DMA+0x24>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e030      	b.n	8005176 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_UART_Receive_DMA+0x94>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01f      	beq.n	8005164 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d018      	beq.n	8005164 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	613b      	str	r3, [r7, #16]
   return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	61bb      	str	r3, [r7, #24]
   return(result);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	461a      	mov	r2, r3
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f001 f818 	bl	80061a0 <UART_Start_Receive_DMA>
 8005170:	4603      	mov	r3, r0
 8005172:	e000      	b.n	8005176 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40008000 	.word	0x40008000

08005184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b0ba      	sub	sp, #232	; 0xe8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80051b2:	4013      	ands	r3, r2
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11b      	bne.n	80051f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 82e3 	beq.w	80057b4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
      }
      return;
 80051f6:	e2dd      	b.n	80057b4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8123 	beq.w	8005448 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005202:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005206:	4b8d      	ldr	r3, [pc, #564]	; (800543c <HAL_UART_IRQHandler+0x2b8>)
 8005208:	4013      	ands	r3, r2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800520e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005212:	4b8b      	ldr	r3, [pc, #556]	; (8005440 <HAL_UART_IRQHandler+0x2bc>)
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8116 	beq.w	8005448 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d011      	beq.n	800524c <HAL_UART_IRQHandler+0xc8>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800524c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d011      	beq.n	800527c <HAL_UART_IRQHandler+0xf8>
 8005258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2202      	movs	r2, #2
 800526a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d011      	beq.n	80052ac <HAL_UART_IRQHandler+0x128>
 8005288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2204      	movs	r2, #4
 800529a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052c8:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_UART_IRQHandler+0x2b8>)
 80052ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2208      	movs	r2, #8
 80052d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <HAL_UART_IRQHandler+0x196>
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8249 	beq.w	80057b8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d013      	beq.n	800535a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800533e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005376:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800537a:	2b00      	cmp	r3, #0
 800537c:	d054      	beq.n	8005428 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fff5 	bl	800636e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d146      	bne.n	8005420 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d9      	bne.n	8005392 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d017      	beq.n	8005418 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <HAL_UART_IRQHandler+0x2c0>)
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fc fb9b 	bl	8001b34 <HAL_DMA_Abort_IT>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d019      	beq.n	8005438 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005412:	4610      	mov	r0, r2
 8005414:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005416:	e00f      	b.n	8005438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9f5 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541e:	e00b      	b.n	8005438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9f1 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005426:	e007      	b.n	8005438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f9ed 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005436:	e1bf      	b.n	80057b8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	bf00      	nop
    return;
 800543a:	e1bd      	b.n	80057b8 <HAL_UART_IRQHandler+0x634>
 800543c:	10000001 	.word	0x10000001
 8005440:	04000120 	.word	0x04000120
 8005444:	08006625 	.word	0x08006625

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 8153 	bne.w	80056f8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 814c 	beq.w	80056f8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8145 	beq.w	80056f8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	f040 80bb 	bne.w	80055fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 818f 	beq.w	80057bc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f080 8187 	bcs.w	80057bc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8087 	bne.w	80055da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800550e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1da      	bne.n	80054cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800553a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800553e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800554c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e1      	bne.n	8005516 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800557c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e3      	bne.n	8005552 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a8:	f023 0310 	bic.w	r3, r3, #16
 80055ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80055bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e4      	bne.n	8005598 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fc fa54 	bl	8001a82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f911 	bl	800581c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055fa:	e0df      	b.n	80057bc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005608:	b29b      	uxth	r3, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80d1 	beq.w	80057c0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800561e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80cc 	beq.w	80057c0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e4      	bne.n	8005628 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	623b      	str	r3, [r7, #32]
   return(result);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005686:	633a      	str	r2, [r7, #48]	; 0x30
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e1      	bne.n	800565e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	617b      	str	r3, [r7, #20]
   return(result);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e4      	bne.n	80056ae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f893 	bl	800581c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056f6:	e063      	b.n	80057c0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00e      	beq.n	8005722 <HAL_UART_IRQHandler+0x59e>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 ffc3 	bl	80066a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005720:	e051      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03a      	beq.n	80057c4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
    }
    return;
 8005756:	e035      	b.n	80057c4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_UART_IRQHandler+0x5f4>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 ff6d 	bl	8006650 <UART_EndTransmit_IT>
    return;
 8005776:	e026      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_UART_IRQHandler+0x614>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 ff9c 	bl	80066ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005796:	e016      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d010      	beq.n	80057c6 <HAL_UART_IRQHandler+0x642>
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da0c      	bge.n	80057c6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 ff84 	bl	80066ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057b2:	e008      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
      return;
 80057b4:	bf00      	nop
 80057b6:	e006      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
    return;
 80057b8:	bf00      	nop
 80057ba:	e004      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
      return;
 80057bc:	bf00      	nop
 80057be:	e002      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
      return;
 80057c0:	bf00      	nop
 80057c2:	e000      	b.n	80057c6 <HAL_UART_IRQHandler+0x642>
    return;
 80057c4:	bf00      	nop
  }
}
 80057c6:	37e8      	adds	r7, #232	; 0xe8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005838:	b08c      	sub	sp, #48	; 0x30
 800583a:	af00      	add	r7, sp, #0
 800583c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	431a      	orrs	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	431a      	orrs	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	4313      	orrs	r3, r2
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4baa      	ldr	r3, [pc, #680]	; (8005b0c <UART_SetConfig+0x2d8>)
 8005864:	4013      	ands	r3, r2
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800586c:	430b      	orrs	r3, r1
 800586e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a9f      	ldr	r2, [pc, #636]	; (8005b10 <UART_SetConfig+0x2dc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589c:	4313      	orrs	r3, r2
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	f023 010f 	bic.w	r1, r3, #15
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a90      	ldr	r2, [pc, #576]	; (8005b14 <UART_SetConfig+0x2e0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d125      	bne.n	8005924 <UART_SetConfig+0xf0>
 80058d8:	4b8f      	ldr	r3, [pc, #572]	; (8005b18 <UART_SetConfig+0x2e4>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d81a      	bhi.n	800591c <UART_SetConfig+0xe8>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0xb8>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	080058fd 	.word	0x080058fd
 80058f0:	0800590d 	.word	0x0800590d
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005915 	.word	0x08005915
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005902:	e116      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590a:	e112      	b.n	8005b32 <UART_SetConfig+0x2fe>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e10e      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591a:	e10a      	b.n	8005b32 <UART_SetConfig+0x2fe>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e106      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7c      	ldr	r2, [pc, #496]	; (8005b1c <UART_SetConfig+0x2e8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d138      	bne.n	80059a0 <UART_SetConfig+0x16c>
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <UART_SetConfig+0x2e4>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d82d      	bhi.n	8005998 <UART_SetConfig+0x164>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0x110>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005979 	.word	0x08005979
 8005948:	08005999 	.word	0x08005999
 800594c:	08005999 	.word	0x08005999
 8005950:	08005999 	.word	0x08005999
 8005954:	08005989 	.word	0x08005989
 8005958:	08005999 	.word	0x08005999
 800595c:	08005999 	.word	0x08005999
 8005960:	08005999 	.word	0x08005999
 8005964:	08005981 	.word	0x08005981
 8005968:	08005999 	.word	0x08005999
 800596c:	08005999 	.word	0x08005999
 8005970:	08005999 	.word	0x08005999
 8005974:	08005991 	.word	0x08005991
 8005978:	2300      	movs	r3, #0
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e0d8      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e0d4      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e0d0      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e0cc      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e0c8      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <UART_SetConfig+0x2ec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d125      	bne.n	80059f6 <UART_SetConfig+0x1c2>
 80059aa:	4b5b      	ldr	r3, [pc, #364]	; (8005b18 <UART_SetConfig+0x2e4>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d016      	beq.n	80059e6 <UART_SetConfig+0x1b2>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d818      	bhi.n	80059ee <UART_SetConfig+0x1ba>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d00a      	beq.n	80059d6 <UART_SetConfig+0x1a2>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d814      	bhi.n	80059ee <UART_SetConfig+0x1ba>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <UART_SetConfig+0x19a>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d008      	beq.n	80059de <UART_SetConfig+0x1aa>
 80059cc:	e00f      	b.n	80059ee <UART_SetConfig+0x1ba>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d4:	e0ad      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059d6:	2302      	movs	r3, #2
 80059d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059dc:	e0a9      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059de:	2304      	movs	r3, #4
 80059e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e4:	e0a5      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059e6:	2308      	movs	r3, #8
 80059e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ec:	e0a1      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059ee:	2310      	movs	r3, #16
 80059f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f4:	e09d      	b.n	8005b32 <UART_SetConfig+0x2fe>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a4a      	ldr	r2, [pc, #296]	; (8005b24 <UART_SetConfig+0x2f0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d125      	bne.n	8005a4c <UART_SetConfig+0x218>
 8005a00:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <UART_SetConfig+0x2e4>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a0c:	d016      	beq.n	8005a3c <UART_SetConfig+0x208>
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d818      	bhi.n	8005a44 <UART_SetConfig+0x210>
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d00a      	beq.n	8005a2c <UART_SetConfig+0x1f8>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d814      	bhi.n	8005a44 <UART_SetConfig+0x210>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <UART_SetConfig+0x1f0>
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x200>
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x210>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e082      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e07e      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e07a      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e076      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e072      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a35      	ldr	r2, [pc, #212]	; (8005b28 <UART_SetConfig+0x2f4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d12a      	bne.n	8005aac <UART_SetConfig+0x278>
 8005a56:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <UART_SetConfig+0x2e4>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a64:	d01a      	beq.n	8005a9c <UART_SetConfig+0x268>
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6a:	d81b      	bhi.n	8005aa4 <UART_SetConfig+0x270>
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d00c      	beq.n	8005a8c <UART_SetConfig+0x258>
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a76:	d815      	bhi.n	8005aa4 <UART_SetConfig+0x270>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <UART_SetConfig+0x250>
 8005a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a80:	d008      	beq.n	8005a94 <UART_SetConfig+0x260>
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x270>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8a:	e052      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e04e      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	e04a      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e046      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e042      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <UART_SetConfig+0x2dc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d13a      	bne.n	8005b2c <UART_SetConfig+0x2f8>
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <UART_SetConfig+0x2e4>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac4:	d01a      	beq.n	8005afc <UART_SetConfig+0x2c8>
 8005ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aca:	d81b      	bhi.n	8005b04 <UART_SetConfig+0x2d0>
 8005acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad0:	d00c      	beq.n	8005aec <UART_SetConfig+0x2b8>
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d815      	bhi.n	8005b04 <UART_SetConfig+0x2d0>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <UART_SetConfig+0x2b0>
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d008      	beq.n	8005af4 <UART_SetConfig+0x2c0>
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x2d0>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aea:	e022      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af2:	e01e      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afa:	e01a      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e016      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e012      	b.n	8005b32 <UART_SetConfig+0x2fe>
 8005b0c:	cfff69f3 	.word	0xcfff69f3
 8005b10:	40008000 	.word	0x40008000
 8005b14:	40013800 	.word	0x40013800
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40004400 	.word	0x40004400
 8005b20:	40004800 	.word	0x40004800
 8005b24:	40004c00 	.word	0x40004c00
 8005b28:	40005000 	.word	0x40005000
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4aae      	ldr	r2, [pc, #696]	; (8005df0 <UART_SetConfig+0x5bc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	f040 8097 	bne.w	8005c6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d823      	bhi.n	8005b8e <UART_SetConfig+0x35a>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x318>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b8f 	.word	0x08005b8f
 8005b6c:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe ff1e 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b9e      	ldr	r3, [pc, #632]	; (8005df4 <UART_SetConfig+0x5c0>)
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fe fea9 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8130 	beq.w	8005e02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	4a94      	ldr	r2, [pc, #592]	; (8005df8 <UART_SetConfig+0x5c4>)
 8005ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d305      	bcc.n	8005bd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d903      	bls.n	8005bda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bd8:	e113      	b.n	8005e02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2200      	movs	r2, #0
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	60fa      	str	r2, [r7, #12]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	4a84      	ldr	r2, [pc, #528]	; (8005df8 <UART_SetConfig+0x5c4>)
 8005be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bfc:	f7fa fb14 	bl	8000228 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	020b      	lsls	r3, r1, #8
 8005c12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c16:	0202      	lsls	r2, r0, #8
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	6849      	ldr	r1, [r1, #4]
 8005c1c:	0849      	lsrs	r1, r1, #1
 8005c1e:	2000      	movs	r0, #0
 8005c20:	460c      	mov	r4, r1
 8005c22:	4605      	mov	r5, r0
 8005c24:	eb12 0804 	adds.w	r8, r2, r4
 8005c28:	eb43 0905 	adc.w	r9, r3, r5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	469a      	mov	sl, r3
 8005c34:	4693      	mov	fp, r2
 8005c36:	4652      	mov	r2, sl
 8005c38:	465b      	mov	r3, fp
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa faf3 	bl	8000228 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4613      	mov	r3, r2
 8005c48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c50:	d308      	bcc.n	8005c64 <UART_SetConfig+0x430>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c58:	d204      	bcs.n	8005c64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	e0ce      	b.n	8005e02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c6a:	e0ca      	b.n	8005e02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d166      	bne.n	8005d44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d827      	bhi.n	8005cce <UART_SetConfig+0x49a>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x450>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	08005ccf 	.word	0x08005ccf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005ccf 	.word	0x08005ccf
 8005ca0:	08005ccf 	.word	0x08005ccf
 8005ca4:	08005cc7 	.word	0x08005cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca8:	f7fe fe82 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cae:	e014      	b.n	8005cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb0:	f7fe fe94 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 8005cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cb6:	e010      	b.n	8005cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b4e      	ldr	r3, [pc, #312]	; (8005df4 <UART_SetConfig+0x5c0>)
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cbc:	e00d      	b.n	8005cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fe fe09 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8090 	beq.w	8005e02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	4a44      	ldr	r2, [pc, #272]	; (8005df8 <UART_SetConfig+0x5c4>)
 8005ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf4:	005a      	lsls	r2, r3, #1
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	441a      	add	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	d916      	bls.n	8005d3c <UART_SetConfig+0x508>
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d14:	d212      	bcs.n	8005d3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f023 030f 	bic.w	r3, r3, #15
 8005d1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	8bfb      	ldrh	r3, [r7, #30]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	8bfa      	ldrh	r2, [r7, #30]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	e062      	b.n	8005e02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d42:	e05e      	b.n	8005e02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d828      	bhi.n	8005d9e <UART_SetConfig+0x56a>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x520>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fe fe1a 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8005d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7e:	e014      	b.n	8005daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fe2c 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <UART_SetConfig+0x5c0>)
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fe fda1 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d94:	e009      	b.n	8005daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d9c:	e005      	b.n	8005daa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005da8:	bf00      	nop
    }

    if (pclk != 0U)
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d028      	beq.n	8005e02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <UART_SetConfig+0x5c4>)
 8005db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	441a      	add	r2, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d910      	bls.n	8005dfc <UART_SetConfig+0x5c8>
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d20c      	bcs.n	8005dfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60da      	str	r2, [r3, #12]
 8005dec:	e009      	b.n	8005e02 <UART_SetConfig+0x5ce>
 8005dee:	bf00      	nop
 8005df0:	40008000 	.word	0x40008000
 8005df4:	00f42400 	.word	0x00f42400
 8005df8:	080069b4 	.word	0x080069b4
      }
      else
      {
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3730      	adds	r7, #48	; 0x30
 8005e26:	46bd      	mov	sp, r7
 8005e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2a:	d10a      	bne.n	8005f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b098      	sub	sp, #96	; 0x60
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fb fb1e 	bl	80015c0 <HAL_GetTick>
 8005f84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d12f      	bne.n	8005ff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f88e 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d022      	beq.n	8005ff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e063      	b.n	80060bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d149      	bne.n	8006096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600a:	2200      	movs	r2, #0
 800600c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f857 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d03c      	beq.n	8006096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	623b      	str	r3, [r7, #32]
   return(result);
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
 800603c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3308      	adds	r3, #8
 8006054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60fb      	str	r3, [r7, #12]
   return(result);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	64bb      	str	r3, [r7, #72]	; 0x48
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606e:	61fa      	str	r2, [r7, #28]
 8006070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	617b      	str	r3, [r7, #20]
   return(result);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e5      	bne.n	800604e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e012      	b.n	80060bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3758      	adds	r7, #88	; 0x58
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d4:	e04f      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d04b      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fb fa6f 	bl	80015c0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e04e      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d037      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d034      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d031      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b08      	cmp	r3, #8
 800611e:	d110      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2208      	movs	r2, #8
 8006126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f920 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2208      	movs	r2, #8
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e029      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006150:	d111      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800615a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f906 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e00f      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	429a      	cmp	r2, r3
 8006192:	d0a0      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b096      	sub	sp, #88	; 0x58
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2222      	movs	r2, #34	; 0x22
 80061c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d02d      	beq.n	8006232 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061dc:	4a40      	ldr	r2, [pc, #256]	; (80062e0 <UART_Start_Receive_DMA+0x140>)
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e6:	4a3f      	ldr	r2, [pc, #252]	; (80062e4 <UART_Start_Receive_DMA+0x144>)
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f0:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <UART_Start_Receive_DMA+0x148>)
 80061f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fa:	2200      	movs	r2, #0
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3324      	adds	r3, #36	; 0x24
 800620a:	4619      	mov	r1, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	461a      	mov	r2, r3
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	f7fb fbba 	bl	800198c <HAL_DMA_Start_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2210      	movs	r2, #16
 8006222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e051      	b.n	80062d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d018      	beq.n	800626c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	657b      	str	r3, [r7, #84]	; 0x54
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	64bb      	str	r3, [r7, #72]	; 0x48
 800625a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800625e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	653b      	str	r3, [r7, #80]	; 0x50
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800628c:	637a      	str	r2, [r7, #52]	; 0x34
 800628e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	613b      	str	r3, [r7, #16]
   return(result);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062c0:	623a      	str	r2, [r7, #32]
 80062c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	69f9      	ldr	r1, [r7, #28]
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3758      	adds	r7, #88	; 0x58
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	0800643b 	.word	0x0800643b
 80062e4:	08006567 	.word	0x08006567
 80062e8:	080065a5 	.word	0x080065a5

080062ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b08f      	sub	sp, #60	; 0x3c
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	61fb      	str	r3, [r7, #28]
   return(result);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006314:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	60bb      	str	r3, [r7, #8]
   return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800633c:	633b      	str	r3, [r7, #48]	; 0x30
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006346:	61ba      	str	r2, [r7, #24]
 8006348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006362:	bf00      	nop
 8006364:	373c      	adds	r7, #60	; 0x3c
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636e:	b480      	push	{r7}
 8006370:	b095      	sub	sp, #84	; 0x54
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	643b      	str	r3, [r7, #64]	; 0x40
 8006396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d118      	bne.n	800641a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6979      	ldr	r1, [r7, #20]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	613b      	str	r3, [r7, #16]
   return(result);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e6      	bne.n	80063e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800642e:	bf00      	nop
 8006430:	3754      	adds	r7, #84	; 0x54
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b09c      	sub	sp, #112	; 0x70
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d171      	bne.n	800653a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	2200      	movs	r2, #0
 800645a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800646c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006472:	66bb      	str	r3, [r7, #104]	; 0x68
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800647c:	65bb      	str	r3, [r7, #88]	; 0x58
 800647e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800648a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	667b      	str	r3, [r7, #100]	; 0x64
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064b0:	647a      	str	r2, [r7, #68]	; 0x44
 80064b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	623b      	str	r3, [r7, #32]
   return(result);
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	663b      	str	r3, [r7, #96]	; 0x60
 80064dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064e4:	633a      	str	r2, [r7, #48]	; 0x30
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fa:	2220      	movs	r2, #32
 80064fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d118      	bne.n	800653a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	60fb      	str	r3, [r7, #12]
   return(result);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0310 	bic.w	r3, r3, #16
 800651c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	69b9      	ldr	r1, [r7, #24]
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	617b      	str	r3, [r7, #20]
   return(result);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e6      	bne.n	8006508 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	2200      	movs	r2, #0
 800653e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800654e:	4619      	mov	r1, r3
 8006550:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006552:	f7ff f963 	bl	800581c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006556:	e002      	b.n	800655e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006558:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800655a:	f7ff f941 	bl	80057e0 <HAL_UART_RxCpltCallback>
}
 800655e:	bf00      	nop
 8006560:	3770      	adds	r7, #112	; 0x70
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d109      	bne.n	8006596 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	b29b      	uxth	r3, r3
 800658c:	4619      	mov	r1, r3
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff f944 	bl	800581c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006594:	e002      	b.n	800659c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff f92c 	bl	80057f4 <HAL_UART_RxHalfCpltCallback>
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d109      	bne.n	80065e4 <UART_DMAError+0x40>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b21      	cmp	r3, #33	; 0x21
 80065d4:	d106      	bne.n	80065e4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80065de:	6978      	ldr	r0, [r7, #20]
 80065e0:	f7ff fe84 	bl	80062ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d109      	bne.n	8006606 <UART_DMAError+0x62>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b22      	cmp	r3, #34	; 0x22
 80065f6:	d106      	bne.n	8006606 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006600:	6978      	ldr	r0, [r7, #20]
 8006602:	f7ff feb4 	bl	800636e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f043 0210 	orr.w	r2, r3, #16
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7ff f8f6 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800661c:	bf00      	nop
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff f8e0 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	60bb      	str	r3, [r7, #8]
   return(result);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6979      	ldr	r1, [r7, #20]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	613b      	str	r3, [r7, #16]
   return(result);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e6      	bne.n	8006658 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff f897 	bl	80057cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	bf00      	nop
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e027      	b.n	8006748 <HAL_UARTEx_DisableFifoMode+0x66>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	; 0x24
 8006704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006726:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006768:	2302      	movs	r3, #2
 800676a:	e02d      	b.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	; 0x24
 8006778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f84f 	bl	800684c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e02d      	b.n	8006844 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2224      	movs	r2, #36	; 0x24
 80067f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f811 	bl	800684c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800686c:	e031      	b.n	80068d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800686e:	2308      	movs	r3, #8
 8006870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006872:	2308      	movs	r3, #8
 8006874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	0e5b      	lsrs	r3, r3, #25
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	0f5b      	lsrs	r3, r3, #29
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	7b3a      	ldrb	r2, [r7, #12]
 800689a:	4911      	ldr	r1, [pc, #68]	; (80068e0 <UARTEx_SetNbDataToProcess+0x94>)
 800689c:	5c8a      	ldrb	r2, [r1, r2]
 800689e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068a2:	7b3a      	ldrb	r2, [r7, #12]
 80068a4:	490f      	ldr	r1, [pc, #60]	; (80068e4 <UARTEx_SetNbDataToProcess+0x98>)
 80068a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	7b7a      	ldrb	r2, [r7, #13]
 80068b8:	4909      	ldr	r1, [pc, #36]	; (80068e0 <UARTEx_SetNbDataToProcess+0x94>)
 80068ba:	5c8a      	ldrb	r2, [r1, r2]
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068c0:	7b7a      	ldrb	r2, [r7, #13]
 80068c2:	4908      	ldr	r1, [pc, #32]	; (80068e4 <UARTEx_SetNbDataToProcess+0x98>)
 80068c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	080069cc 	.word	0x080069cc
 80068e4:	080069d4 	.word	0x080069d4

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	; (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	; (800693c <__libc_init_array+0x44>)
 800690c:	f000 f818 	bl	8006940 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	080069e4 	.word	0x080069e4
 8006934:	080069e4 	.word	0x080069e4
 8006938:	080069e4 	.word	0x080069e4
 800693c:	080069e8 	.word	0x080069e8

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
