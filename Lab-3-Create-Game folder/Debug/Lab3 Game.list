
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006974  08006974  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800697c  0800697c  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08006984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200002e8  08006c6c  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006c6c  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f24  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  0003127f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000334d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6d  00000000  00000000  00034230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253ea  00000000  00000000  00034c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115c2  00000000  00000000  0005a087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec2fc  00000000  00000000  0006b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003710  00000000  00000000  00157948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0015b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080068d8 	.word	0x080068d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002ec 	.word	0x200002ec
 8000214:	080068d8 	.word	0x080068d8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 ffb1 	bl	800148e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 fa3a 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fbb0 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 fb5c 	bl	8000bf0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 fac0 	bl	8000abc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 fa7e 	bl	8000a3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fb08 	bl	8000b54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f001 f813 	bl	8001570 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // STM32 Part //
	  Dummy();
 800054a:	f000 fc69 	bl	8000e20 <Dummy>
	  HAL_UART_Receive_DMA(&hlpuart1, GetAns, 2);
 800054e:	2202      	movs	r2, #2
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <main+0x278>)
 8000552:	4893      	ldr	r0, [pc, #588]	; (80007a0 <main+0x27c>)
 8000554:	f004 fd96 	bl	8005084 <HAL_UART_Receive_DMA>
	if(A==8){
 8000558:	4b92      	ldr	r3, [pc, #584]	; (80007a4 <main+0x280>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d112      	bne.n	8000586 <main+0x62>
	  HAL_UART_Transmit(&hlpuart1,Hx, strlen(Hx), 4);
 8000560:	4891      	ldr	r0, [pc, #580]	; (80007a8 <main+0x284>)
 8000562:	f7ff fe59 	bl	8000218 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	2304      	movs	r3, #4
 800056c:	498e      	ldr	r1, [pc, #568]	; (80007a8 <main+0x284>)
 800056e:	488c      	ldr	r0, [pc, #560]	; (80007a0 <main+0x27c>)
 8000570:	f004 fcfa 	bl	8004f68 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1,"-------------------------\n\r",strlen("-------------------------\n\r"), 8);
 8000574:	2308      	movs	r3, #8
 8000576:	221b      	movs	r2, #27
 8000578:	498c      	ldr	r1, [pc, #560]	; (80007ac <main+0x288>)
 800057a:	4889      	ldr	r0, [pc, #548]	; (80007a0 <main+0x27c>)
 800057c:	f004 fcf4 	bl	8004f68 <HAL_UART_Transmit>
	  A=1;
 8000580:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <main+0x280>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
	}
// Question 1 //
		if(A == 1){
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <main+0x280>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <main+0x96>
			HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 ffed 	bl	8001570 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx1, 100,10);
 8000596:	230a      	movs	r3, #10
 8000598:	2264      	movs	r2, #100	; 0x64
 800059a:	4985      	ldr	r1, [pc, #532]	; (80007b0 <main+0x28c>)
 800059c:	4880      	ldr	r0, [pc, #512]	; (80007a0 <main+0x27c>)
 800059e:	f004 fce3 	bl	8004f68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2228      	movs	r2, #40	; 0x28
 80005a6:	4983      	ldr	r1, [pc, #524]	; (80007b4 <main+0x290>)
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x27c>)
 80005aa:	f004 fcdd 	bl	8004f68 <HAL_UART_Transmit>
			A = 0;
 80005ae:	4b7d      	ldr	r3, [pc, #500]	; (80007a4 <main+0x280>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			mode = 1;
 80005b4:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <main+0x294>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
		}
		if(mode == 1){
 80005ba:	4b7f      	ldr	r3, [pc, #508]	; (80007b8 <main+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d145      	bne.n	800064e <main+0x12a>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 1){
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <main+0x278>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b79      	cmp	r3, #121	; 0x79
 80005c8:	d120      	bne.n	800060c <main+0xe8>
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <main+0x278>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b0d      	cmp	r3, #13
 80005d0:	d11c      	bne.n	800060c <main+0xe8>
 80005d2:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x294>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d118      	bne.n	800060c <main+0xe8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80005da:	230a      	movs	r3, #10
 80005dc:	221e      	movs	r2, #30
 80005de:	4977      	ldr	r1, [pc, #476]	; (80007bc <main+0x298>)
 80005e0:	486f      	ldr	r0, [pc, #444]	; (80007a0 <main+0x27c>)
 80005e2:	f004 fcc1 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80005e6:	2308      	movs	r3, #8
 80005e8:	220c      	movs	r2, #12
 80005ea:	4975      	ldr	r1, [pc, #468]	; (80007c0 <main+0x29c>)
 80005ec:	486c      	ldr	r0, [pc, #432]	; (80007a0 <main+0x27c>)
 80005ee:	f004 fcbb 	bl	8004f68 <HAL_UART_Transmit>
				s1 =+ 1;
 80005f2:	4b74      	ldr	r3, [pc, #464]	; (80007c4 <main+0x2a0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
				A = 2;
 80005f8:	4b6a      	ldr	r3, [pc, #424]	; (80007a4 <main+0x280>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <main+0x278>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <main+0x278>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
 800060a:	e020      	b.n	800064e <main+0x12a>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 1){
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x278>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b6e      	cmp	r3, #110	; 0x6e
 8000612:	d11c      	bne.n	800064e <main+0x12a>
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <main+0x278>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	d118      	bne.n	800064e <main+0x12a>
 800061c:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <main+0x294>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d114      	bne.n	800064e <main+0x12a>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 8000624:	230a      	movs	r3, #10
 8000626:	221e      	movs	r2, #30
 8000628:	4967      	ldr	r1, [pc, #412]	; (80007c8 <main+0x2a4>)
 800062a:	485d      	ldr	r0, [pc, #372]	; (80007a0 <main+0x27c>)
 800062c:	f004 fc9c 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000630:	2308      	movs	r3, #8
 8000632:	220c      	movs	r2, #12
 8000634:	4962      	ldr	r1, [pc, #392]	; (80007c0 <main+0x29c>)
 8000636:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x27c>)
 8000638:	f004 fc96 	bl	8004f68 <HAL_UART_Transmit>
				A = 2;
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <main+0x280>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000642:	4b56      	ldr	r3, [pc, #344]	; (800079c <main+0x278>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <main+0x278>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
//				GetAns[0]=0;
//				GetAns[1]=0;
//			}
		}
// Question 2 //
		if(A == 2){
 800064e:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <main+0x280>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d115      	bne.n	8000682 <main+0x15e>
			HAL_Delay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f000 ff89 	bl	8001570 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx2, 100,10);
 800065e:	230a      	movs	r3, #10
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	495a      	ldr	r1, [pc, #360]	; (80007cc <main+0x2a8>)
 8000664:	484e      	ldr	r0, [pc, #312]	; (80007a0 <main+0x27c>)
 8000666:	f004 fc7f 	bl	8004f68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 800066a:	230a      	movs	r3, #10
 800066c:	2228      	movs	r2, #40	; 0x28
 800066e:	4951      	ldr	r1, [pc, #324]	; (80007b4 <main+0x290>)
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <main+0x27c>)
 8000672:	f004 fc79 	bl	8004f68 <HAL_UART_Transmit>
			A = 0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x280>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
			mode = 2;
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <main+0x294>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
		}
		if(mode == 2){
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <main+0x294>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d145      	bne.n	8000716 <main+0x1f2>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 2){
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x278>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b79      	cmp	r3, #121	; 0x79
 8000690:	d11d      	bne.n	80006ce <main+0x1aa>
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x278>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d119      	bne.n	80006ce <main+0x1aa>
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d115      	bne.n	80006ce <main+0x1aa>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 80006a2:	230a      	movs	r3, #10
 80006a4:	221e      	movs	r2, #30
 80006a6:	4945      	ldr	r1, [pc, #276]	; (80007bc <main+0x298>)
 80006a8:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x27c>)
 80006aa:	f004 fc5d 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006ae:	2308      	movs	r3, #8
 80006b0:	220c      	movs	r2, #12
 80006b2:	4943      	ldr	r1, [pc, #268]	; (80007c0 <main+0x29c>)
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x27c>)
 80006b6:	f004 fc57 	bl	8004f68 <HAL_UART_Transmit>
				A = 3;
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x280>)
 80006bc:	2203      	movs	r2, #3
 80006be:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <main+0x278>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x278>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	705a      	strb	r2, [r3, #1]
 80006cc:	e023      	b.n	8000716 <main+0x1f2>
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 2){
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <main+0x278>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b6e      	cmp	r3, #110	; 0x6e
 80006d4:	d11f      	bne.n	8000716 <main+0x1f2>
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x278>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d11b      	bne.n	8000716 <main+0x1f2>
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d117      	bne.n	8000716 <main+0x1f2>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80006e6:	230a      	movs	r3, #10
 80006e8:	221e      	movs	r2, #30
 80006ea:	4937      	ldr	r1, [pc, #220]	; (80007c8 <main+0x2a4>)
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x27c>)
 80006ee:	f004 fc3b 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 80006f2:	2308      	movs	r3, #8
 80006f4:	220c      	movs	r2, #12
 80006f6:	4932      	ldr	r1, [pc, #200]	; (80007c0 <main+0x29c>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <main+0x27c>)
 80006fa:	f004 fc35 	bl	8004f68 <HAL_UART_Transmit>
				s2 =+ 1;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0x2ac>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				A = 3;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0x280>)
 8000706:	2203      	movs	r2, #3
 8000708:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0x278>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x278>)
 8000712:	2200      	movs	r2, #0
 8000714:	705a      	strb	r2, [r3, #1]
			}
		}
// Question 3 //
		if(A == 3){
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x280>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d115      	bne.n	800074a <main+0x226>
			HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 ff25 	bl	8001570 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1,Tx3, 100,10);
 8000726:	230a      	movs	r3, #10
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	492a      	ldr	r1, [pc, #168]	; (80007d4 <main+0x2b0>)
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0x27c>)
 800072e:	f004 fc1b 	bl	8004f68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1,Ax1, 40,10);
 8000732:	230a      	movs	r3, #10
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	491f      	ldr	r1, [pc, #124]	; (80007b4 <main+0x290>)
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x27c>)
 800073a:	f004 fc15 	bl	8004f68 <HAL_UART_Transmit>
			A = 0;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x280>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
			mode = 3;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x294>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(mode == 3){
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x294>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d165      	bne.n	800081e <main+0x2fa>
			if(GetAns[0] == 'y' && GetAns[1] == '\r' && mode == 3){
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x278>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b79      	cmp	r3, #121	; 0x79
 8000758:	d140      	bne.n	80007dc <main+0x2b8>
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x278>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d13c      	bne.n	80007dc <main+0x2b8>
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x294>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d138      	bne.n	80007dc <main+0x2b8>
				HAL_UART_Transmit(&hlpuart1, res1, 30, 10);
 800076a:	230a      	movs	r3, #10
 800076c:	221e      	movs	r2, #30
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <main+0x298>)
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <main+0x27c>)
 8000772:	f004 fbf9 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000776:	2308      	movs	r3, #8
 8000778:	220c      	movs	r2, #12
 800077a:	4911      	ldr	r1, [pc, #68]	; (80007c0 <main+0x29c>)
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x27c>)
 800077e:	f004 fbf3 	bl	8004f68 <HAL_UART_Transmit>
				s3 =+ 1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x2b4>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
				A = 4;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x280>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <main+0x278>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000794:	4b01      	ldr	r3, [pc, #4]	; (800079c <main+0x278>)
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
 800079a:	e040      	b.n	800081e <main+0x2fa>
 800079c:	200006c0 	.word	0x200006c0
 80007a0:	20000418 	.word	0x20000418
 80007a4:	200002d8 	.word	0x200002d8
 80007a8:	20000000 	.word	0x20000000
 80007ac:	080068f0 	.word	0x080068f0
 80007b0:	20000020 	.word	0x20000020
 80007b4:	2000014c 	.word	0x2000014c
 80007b8:	200006c8 	.word	0x200006c8
 80007bc:	20000174 	.word	0x20000174
 80007c0:	0800690c 	.word	0x0800690c
 80007c4:	200006c2 	.word	0x200006c2
 80007c8:	20000194 	.word	0x20000194
 80007cc:	20000084 	.word	0x20000084
 80007d0:	200006c3 	.word	0x200006c3
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200006c4 	.word	0x200006c4
			}
			else if(GetAns[0] == 'n' && GetAns[1] == '\r' && mode == 3){
 80007dc:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <main+0x424>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b6e      	cmp	r3, #110	; 0x6e
 80007e2:	d11c      	bne.n	800081e <main+0x2fa>
 80007e4:	4b58      	ldr	r3, [pc, #352]	; (8000948 <main+0x424>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	2b0d      	cmp	r3, #13
 80007ea:	d118      	bne.n	800081e <main+0x2fa>
 80007ec:	4b57      	ldr	r3, [pc, #348]	; (800094c <main+0x428>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d114      	bne.n	800081e <main+0x2fa>
				HAL_UART_Transmit(&hlpuart1, res2, 30, 10);
 80007f4:	230a      	movs	r3, #10
 80007f6:	221e      	movs	r2, #30
 80007f8:	4955      	ldr	r1, [pc, #340]	; (8000950 <main+0x42c>)
 80007fa:	4856      	ldr	r0, [pc, #344]	; (8000954 <main+0x430>)
 80007fc:	f004 fbb4 	bl	8004f68 <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1,"*********\n\r",strlen("**********\n\r"), 8);
 8000800:	2308      	movs	r3, #8
 8000802:	220c      	movs	r2, #12
 8000804:	4954      	ldr	r1, [pc, #336]	; (8000958 <main+0x434>)
 8000806:	4853      	ldr	r0, [pc, #332]	; (8000954 <main+0x430>)
 8000808:	f004 fbae 	bl	8004f68 <HAL_UART_Transmit>
				A = 4;
 800080c:	4b53      	ldr	r3, [pc, #332]	; (800095c <main+0x438>)
 800080e:	2204      	movs	r2, #4
 8000810:	601a      	str	r2, [r3, #0]
				GetAns[0]=0;
 8000812:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <main+0x424>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				GetAns[1]=0;
 8000818:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <main+0x424>)
 800081a:	2200      	movs	r2, #0
 800081c:	705a      	strb	r2, [r3, #1]
			}
		}
//ScoreBoard //
		if(A == 4){
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <main+0x438>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d11e      	bne.n	8000864 <main+0x340>
			HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fea1 	bl	8001570 <HAL_Delay>
			HAL_UART_Transmit(&hlpuart1, ToT, 30, 10);
 800082e:	230a      	movs	r3, #10
 8000830:	221e      	movs	r2, #30
 8000832:	494b      	ldr	r1, [pc, #300]	; (8000960 <main+0x43c>)
 8000834:	4847      	ldr	r0, [pc, #284]	; (8000954 <main+0x430>)
 8000836:	f004 fb97 	bl	8004f68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, ToT2, 50, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	2232      	movs	r2, #50	; 0x32
 800083e:	4949      	ldr	r1, [pc, #292]	; (8000964 <main+0x440>)
 8000840:	4844      	ldr	r0, [pc, #272]	; (8000954 <main+0x430>)
 8000842:	f004 fb91 	bl	8004f68 <HAL_UART_Transmit>
			TotalScore = s1+s2+s3;
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <main+0x444>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <main+0x448>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <main+0x44c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b46      	ldr	r3, [pc, #280]	; (8000974 <main+0x450>)
 800085c:	701a      	strb	r2, [r3, #0]
			A=5;
 800085e:	4b3f      	ldr	r3, [pc, #252]	; (800095c <main+0x438>)
 8000860:	2205      	movs	r2, #5
 8000862:	601a      	str	r2, [r3, #0]
		}
// I2C part //
		if(A == 5){
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <main+0x438>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d10c      	bne.n	8000886 <main+0x362>
			HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f000 fe7e 	bl	8001570 <HAL_Delay>
			WriteFlag = 1;
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <main+0x454>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			C = 1;
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <main+0x458>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
			A=6;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <main+0x438>)
 8000882:	2206      	movs	r2, #6
 8000884:	601a      	str	r2, [r3, #0]
		}
		if(A == 6){
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <main+0x438>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d10c      	bne.n	80008a8 <main+0x384>
			if(C == 1){
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <main+0x458>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d105      	bne.n	80008a2 <main+0x37e>
				ReadFlag = 1;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <main+0x45c>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
				C = 0;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <main+0x458>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			}
			A=7;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <main+0x438>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
		}
		if(A == 7){
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <main+0x438>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d143      	bne.n	8000938 <main+0x414>
			D = ReadBack[0];
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <main+0x460>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <main+0x464>)
 80008b6:	701a      	strb	r2, [r3, #0]
			if (D == 0){
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <main+0x464>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d109      	bne.n	80008d4 <main+0x3b0>
				B = 4;
 80008c0:	4b32      	ldr	r3, [pc, #200]	; (800098c <main+0x468>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S, 50, 10);
 80008c6:	230a      	movs	r3, #10
 80008c8:	2232      	movs	r2, #50	; 0x32
 80008ca:	4931      	ldr	r1, [pc, #196]	; (8000990 <main+0x46c>)
 80008cc:	4821      	ldr	r0, [pc, #132]	; (8000954 <main+0x430>)
 80008ce:	f004 fb4b 	bl	8004f68 <HAL_UART_Transmit>
 80008d2:	e028      	b.n	8000926 <main+0x402>
			}
			else if(D == 1){
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <main+0x464>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d109      	bne.n	80008f0 <main+0x3cc>
				B = 1;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <main+0x468>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S1, 50, 10);
 80008e2:	230a      	movs	r3, #10
 80008e4:	2232      	movs	r2, #50	; 0x32
 80008e6:	492b      	ldr	r1, [pc, #172]	; (8000994 <main+0x470>)
 80008e8:	481a      	ldr	r0, [pc, #104]	; (8000954 <main+0x430>)
 80008ea:	f004 fb3d 	bl	8004f68 <HAL_UART_Transmit>
 80008ee:	e01a      	b.n	8000926 <main+0x402>
			}
			else if(D == 2){
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <main+0x464>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d109      	bne.n	800090c <main+0x3e8>
				B = 2;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <main+0x468>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S2, 50, 10);
 80008fe:	230a      	movs	r3, #10
 8000900:	2232      	movs	r2, #50	; 0x32
 8000902:	4925      	ldr	r1, [pc, #148]	; (8000998 <main+0x474>)
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <main+0x430>)
 8000906:	f004 fb2f 	bl	8004f68 <HAL_UART_Transmit>
 800090a:	e00c      	b.n	8000926 <main+0x402>
			}
			else if(D == 3){
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <main+0x464>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d108      	bne.n	8000926 <main+0x402>
				B = 3;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <main+0x468>)
 8000916:	2203      	movs	r2, #3
 8000918:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, S3, 50, 10);
 800091a:	230a      	movs	r3, #10
 800091c:	2232      	movs	r2, #50	; 0x32
 800091e:	491f      	ldr	r1, [pc, #124]	; (800099c <main+0x478>)
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <main+0x430>)
 8000922:	f004 fb21 	bl	8004f68 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&hlpuart1,"YOU ARE NOOB,LOSER UwU.\n\r", 50, 10);
 8000926:	230a      	movs	r3, #10
 8000928:	2232      	movs	r2, #50	; 0x32
 800092a:	491d      	ldr	r1, [pc, #116]	; (80009a0 <main+0x47c>)
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <main+0x430>)
 800092e:	f004 fb1b 	bl	8004f68 <HAL_UART_Transmit>
			A=0;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <main+0x438>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		}
  EEPROMWriteExample();
 8000938:	f000 fa1a 	bl	8000d70 <EEPROMWriteExample>
  EEPROMReadExample(ReadBack, 1);
 800093c:	2101      	movs	r1, #1
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <main+0x460>)
 8000940:	f000 fa48 	bl	8000dd4 <EEPROMReadExample>
	  Dummy();
 8000944:	e601      	b.n	800054a <main+0x26>
 8000946:	bf00      	nop
 8000948:	200006c0 	.word	0x200006c0
 800094c:	200006c8 	.word	0x200006c8
 8000950:	20000194 	.word	0x20000194
 8000954:	20000418 	.word	0x20000418
 8000958:	0800690c 	.word	0x0800690c
 800095c:	200002d8 	.word	0x200002d8
 8000960:	200001b4 	.word	0x200001b4
 8000964:	200001d4 	.word	0x200001d4
 8000968:	200006c2 	.word	0x200006c2
 800096c:	200006c3 	.word	0x200006c3
 8000970:	200006c4 	.word	0x200006c4
 8000974:	200006cc 	.word	0x200006cc
 8000978:	200006cd 	.word	0x200006cd
 800097c:	200006d8 	.word	0x200006d8
 8000980:	200006ce 	.word	0x200006ce
 8000984:	200006d0 	.word	0x200006d0
 8000988:	200006dc 	.word	0x200006dc
 800098c:	200006d4 	.word	0x200006d4
 8000990:	20000208 	.word	0x20000208
 8000994:	2000023c 	.word	0x2000023c
 8000998:	20000270 	.word	0x20000270
 800099c:	200002a4 	.word	0x200002a4
 80009a0:	08006918 	.word	0x08006918

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 ff64 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f003 fa4e 	bl	8003e68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009e6:	2355      	movs	r3, #85	; 0x55
 80009e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fae8 	bl	8003fd0 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a06:	f000 fa23 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2104      	movs	r1, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fde6 	bl	80045f4 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 fa0f 	bl	8000e50 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a78:	f001 fbc3 	bl	8002202 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 f9e5 	bl	8000e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8a:	f003 f955 	bl	8003d38 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 f9dc 	bl	8000e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9c:	f003 f997 	bl	8003dce <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 f9d3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000304 	.word	0x20000304
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	30a0a7fb 	.word	0x30a0a7fb

08000abc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ac2:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <MX_LPUART1_UART_Init+0x94>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ad0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000b04:	f004 f9e0 	bl	8004ec8 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b0e:	f000 f99f 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000b16:	f005 fde9 	bl	80066ec <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b20:	f000 f996 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000b28:	f005 fe1e 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b32:	f000 f98d 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_LPUART1_UART_Init+0x90>)
 8000b38:	f005 fd9f 	bl	800667a <HAL_UARTEx_DisableFifoMode>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b42:	f000 f985 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000418 	.word	0x20000418
 8000b50:	40008000 	.word	0x40008000

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <MX_USART1_UART_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000ba2:	f004 f991 	bl	8004ec8 <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f950 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bb4:	f005 fd9a 	bl	80066ec <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f947 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bc6:	f005 fdcf 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000bd0:	f000 f93e 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bd6:	f005 fd50 	bl	800667a <HAL_UARTEx_DisableFifoMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000be0:	f000 f936 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200004ac 	.word	0x200004ac
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6493      	str	r3, [r2, #72]	; 0x48
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6493      	str	r3, [r2, #72]	; 0x48
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_DMA_Init+0xa0>)
 8000c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200b      	movs	r0, #11
 8000c2c:	f000 fd9d 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c30:	200b      	movs	r0, #11
 8000c32:	f000 fdb4 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f000 fd95 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f000 fdac 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	200d      	movs	r0, #13
 8000c4c:	f000 fd8d 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c50:	200d      	movs	r0, #13
 8000c52:	f000 fda4 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	200e      	movs	r0, #14
 8000c5c:	f000 fd85 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c60:	200e      	movs	r0, #14
 8000c62:	f000 fd9c 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 fd7d 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c70:	200f      	movs	r0, #15
 8000c72:	f000 fd94 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f000 fd75 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c80:	2010      	movs	r0, #16
 8000c82:	f000 fd8c 	bl	800179e <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_GPIO_Init+0xd4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f001 fa21 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <MX_GPIO_Init+0xd8>)
 8000d2e:	f001 f891 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d32:	2320      	movs	r3, #32
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f001 f882 	bl	8001e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f000 fd08 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d5a:	2028      	movs	r0, #40	; 0x28
 8000d5c:	f000 fd1f 	bl	800179e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000800 	.word	0x48000800

08000d70 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */

// I2C PART //
void EEPROMWriteExample() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af02      	add	r7, sp, #8
	if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <EEPROMWriteExample+0x54>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d01f      	beq.n	8000dbe <EEPROMWriteExample+0x4e>
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <EEPROMWriteExample+0x58>)
 8000d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	d119      	bne.n	8000dbe <EEPROMWriteExample+0x4e>
	static uint8_t data[4];
	 data[0]=TotalScore;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <EEPROMWriteExample+0x5c>)
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <EEPROMWriteExample+0x60>)
 8000d90:	701a      	strb	r2, [r3, #0]
	 data[1]=0x00;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <EEPROMWriteExample+0x60>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	705a      	strb	r2, [r3, #1]
	 data[2]=0x00;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <EEPROMWriteExample+0x60>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	709a      	strb	r2, [r3, #2]
	 data[3]=0x00;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <EEPROMWriteExample+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 1);
 8000da4:	2301      	movs	r3, #1
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <EEPROMWriteExample+0x60>)
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2302      	movs	r3, #2
 8000dae:	222c      	movs	r2, #44	; 0x2c
 8000db0:	21a0      	movs	r1, #160	; 0xa0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <EEPROMWriteExample+0x58>)
 8000db4:	f001 fac0 	bl	8002338 <HAL_I2C_Mem_Write_IT>
		WriteFlag = 0;
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <EEPROMWriteExample+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200006cd 	.word	0x200006cd
 8000dc8:	20000304 	.word	0x20000304
 8000dcc:	200006cc 	.word	0x200006cc
 8000dd0:	200006e0 	.word	0x200006e0

08000dd4 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
	if (ReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <EEPROMReadExample+0x44>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d012      	beq.n	8000e0e <EEPROMReadExample+0x3a>
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <EEPROMReadExample+0x48>)
 8000dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d10c      	bne.n	8000e0e <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	222c      	movs	r2, #44	; 0x2c
 8000e00:	21a0      	movs	r1, #160	; 0xa0
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <EEPROMReadExample+0x48>)
 8000e04:	f001 fb22 	bl	800244c <HAL_I2C_Mem_Read_IT>
		ReadFlag = 0;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <EEPROMReadExample+0x44>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200006ce 	.word	0x200006ce
 8000e1c:	20000304 	.word	0x20000304

08000e20 <Dummy>:



// For LD2 Test //
void Dummy(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000e24:	f000 fb98 	bl	8001558 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <Dummy+0x2c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d30a      	bcc.n	8000e48 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000e32:	f000 fb91 	bl	8001558 <HAL_GetTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	3364      	adds	r3, #100	; 0x64
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <Dummy+0x2c>)
 8000e3c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e3e:	2120      	movs	r1, #32
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f001 f9a0 	bl	8002188 <HAL_GPIO_TogglePin>
	}
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200006e4 	.word	0x200006e4

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6593      	str	r3, [r2, #88]	; 0x58
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e92:	f003 f88d 	bl	8003fb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09e      	sub	sp, #120	; 0x78
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	2254      	movs	r2, #84	; 0x54
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fcdb 	bl	8006880 <memset>
  if(hi2c->Instance==I2C1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_I2C_MspInit+0x16c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	f040 8099 	bne.w	8001008 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed6:	2340      	movs	r3, #64	; 0x40
 8000ed8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fda2 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff ffaf 	bl	8000e50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a47      	ldr	r2, [pc, #284]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f24:	4619      	mov	r1, r3
 8000f26:	483c      	ldr	r0, [pc, #240]	; (8001018 <HAL_I2C_MspInit+0x174>)
 8000f28:	f000 ff94 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f36:	6593      	str	r3, [r2, #88]	; 0x58
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_I2C_MspInit+0x170>)
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f46:	4a36      	ldr	r2, [pc, #216]	; (8001020 <HAL_I2C_MspInit+0x17c>)
 8000f48:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f7a:	4828      	ldr	r0, [pc, #160]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f7c:	f000 fc2a 	bl	80017d4 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000f86:	f7ff ff63 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a23      	ldr	r2, [pc, #140]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_I2C_MspInit+0x178>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_I2C_MspInit+0x184>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000f9e:	2211      	movs	r2, #17
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fce:	f000 fc01 	bl	80017d4 <HAL_DMA_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000fd8:	f7ff ff3a 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_I2C_MspInit+0x180>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	201f      	movs	r0, #31
 8000fee:	f000 fbbc 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ff2:	201f      	movs	r0, #31
 8000ff4:	f000 fbd3 	bl	800179e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f000 fbb4 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001002:	2020      	movs	r0, #32
 8001004:	f000 fbcb 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3778      	adds	r7, #120	; 0x78
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40005400 	.word	0x40005400
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400
 800101c:	20000358 	.word	0x20000358
 8001020:	40020058 	.word	0x40020058
 8001024:	200003b8 	.word	0x200003b8
 8001028:	4002006c 	.word	0x4002006c

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0a0      	sub	sp, #128	; 0x80
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	2254      	movs	r2, #84	; 0x54
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fc17 	bl	8006880 <memset>
  if(huart->Instance==LPUART1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a99      	ldr	r2, [pc, #612]	; (80012bc <HAL_UART_MspInit+0x290>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 8093 	bne.w	8001184 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800105e:	2320      	movs	r3, #32
 8001060:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fcde 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff feeb 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800107a:	4b91      	ldr	r3, [pc, #580]	; (80012c0 <HAL_UART_MspInit+0x294>)
 800107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107e:	4a90      	ldr	r2, [pc, #576]	; (80012c0 <HAL_UART_MspInit+0x294>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001086:	4b8e      	ldr	r3, [pc, #568]	; (80012c0 <HAL_UART_MspInit+0x294>)
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <HAL_UART_MspInit+0x294>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a8a      	ldr	r2, [pc, #552]	; (80012c0 <HAL_UART_MspInit+0x294>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010aa:	230c      	movs	r3, #12
 80010ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010ba:	230c      	movs	r3, #12
 80010bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f000 fec4 	bl	8001e54 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80010cc:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010ce:	4a7e      	ldr	r2, [pc, #504]	; (80012c8 <HAL_UART_MspInit+0x29c>)
 80010d0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80010d2:	4b7c      	ldr	r3, [pc, #496]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010d4:	2223      	movs	r2, #35	; 0x23
 80010d6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010da:	2210      	movs	r2, #16
 80010dc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e4:	4b77      	ldr	r3, [pc, #476]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f0:	4b74      	ldr	r3, [pc, #464]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80010f6:	4b73      	ldr	r3, [pc, #460]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b71      	ldr	r3, [pc, #452]	; (80012c4 <HAL_UART_MspInit+0x298>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001102:	4870      	ldr	r0, [pc, #448]	; (80012c4 <HAL_UART_MspInit+0x298>)
 8001104:	f000 fb66 	bl	80017d4 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800110e:	f7ff fe9f 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <HAL_UART_MspInit+0x298>)
 8001116:	67da      	str	r2, [r3, #124]	; 0x7c
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_UART_MspInit+0x298>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800111e:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001120:	4a6b      	ldr	r2, [pc, #428]	; (80012d0 <HAL_UART_MspInit+0x2a4>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001124:	4b69      	ldr	r3, [pc, #420]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001126:	2222      	movs	r2, #34	; 0x22
 8001128:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 800114a:	2220      	movs	r2, #32
 800114c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001154:	485d      	ldr	r0, [pc, #372]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001156:	f000 fb3d 	bl	80017d4 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001160:	f7ff fe76 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a59      	ldr	r2, [pc, #356]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 8001168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800116c:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_UART_MspInit+0x2a0>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	205b      	movs	r0, #91	; 0x5b
 8001178:	f000 faf7 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800117c:	205b      	movs	r0, #91	; 0x5b
 800117e:	f000 fb0e 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001182:	e096      	b.n	80012b2 <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_UART_MspInit+0x2a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 8091 	bne.w	80012b2 <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fc45 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0x180>
      Error_Handler();
 80011a8:	f7ff fe52 	bl	8000e50 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	4a43      	ldr	r2, [pc, #268]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b6:	6613      	str	r3, [r2, #96]	; 0x60
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_UART_MspInit+0x294>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011dc:	2330      	movs	r3, #48	; 0x30
 80011de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4838      	ldr	r0, [pc, #224]	; (80012d8 <HAL_UART_MspInit+0x2ac>)
 80011f8:	f000 fe2c 	bl	8001e54 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 80011fe:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001204:	2218      	movs	r2, #24
 8001206:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001228:	2220      	movs	r2, #32
 800122a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001232:	482a      	ldr	r0, [pc, #168]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001234:	f000 face 	bl	80017d4 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800123e:	f7ff fe07 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a25      	ldr	r2, [pc, #148]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 8001246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <HAL_UART_MspInit+0x2b0>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001252:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <HAL_UART_MspInit+0x2bc>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001258:	2219      	movs	r2, #25
 800125a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 800125e:	2210      	movs	r2, #16
 8001260:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001288:	f000 faa4 	bl	80017d4 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001292:	f7ff fddd 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 800129a:	67da      	str	r2, [r3, #124]	; 0x7c
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0x2b8>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2025      	movs	r0, #37	; 0x25
 80012a8:	f000 fa5f 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ac:	2025      	movs	r0, #37	; 0x25
 80012ae:	f000 fa76 	bl	800179e <HAL_NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3780      	adds	r7, #128	; 0x80
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40008000 	.word	0x40008000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	20000540 	.word	0x20000540
 80012c8:	40020008 	.word	0x40020008
 80012cc:	200005a0 	.word	0x200005a0
 80012d0:	4002001c 	.word	0x4002001c
 80012d4:	40013800 	.word	0x40013800
 80012d8:	48000800 	.word	0x48000800
 80012dc:	20000600 	.word	0x20000600
 80012e0:	40020030 	.word	0x40020030
 80012e4:	20000660 	.word	0x20000660
 80012e8:	40020044 	.word	0x40020044

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8fc 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA1_Channel1_IRQHandler+0x10>)
 8001346:	f000 fc28 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000540 	.word	0x20000540

08001354 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Channel2_IRQHandler+0x10>)
 800135a:	f000 fc1e 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200005a0 	.word	0x200005a0

08001368 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Channel3_IRQHandler+0x10>)
 800136e:	f000 fc14 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000600 	.word	0x20000600

0800137c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA1_Channel4_IRQHandler+0x10>)
 8001382:	f000 fc0a 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000660 	.word	0x20000660

08001390 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Channel5_IRQHandler+0x10>)
 8001396:	f000 fc00 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000358 	.word	0x20000358

080013a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA1_Channel6_IRQHandler+0x10>)
 80013aa:	f000 fbf6 	bl	8001b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200003b8 	.word	0x200003b8

080013b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <I2C1_EV_IRQHandler+0x10>)
 80013be:	f001 f8cb 	bl	8002558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000304 	.word	0x20000304

080013cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <I2C1_ER_IRQHandler+0x10>)
 80013d2:	f001 f8db 	bl	800258c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000304 	.word	0x20000304

080013e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <USART1_IRQHandler+0x10>)
 80013e6:	f003 fe99 	bl	800511c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200004ac 	.word	0x200004ac

080013f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013fc:	f000 fede 	bl	80021bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <LPUART1_IRQHandler+0x10>)
 800140a:	f003 fe87 	bl	800511c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000418 	.word	0x20000418

08001418 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff ffea 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f005 fa11 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff f859 	bl	8000524 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   r0, =_estack
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8001480:	08006984 	.word	0x08006984
  ldr r2, =_sbss
 8001484:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001488:	200006ec 	.word	0x200006ec

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>

0800148e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f95b 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 f80e 	bl	80014c0 <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e001      	b.n	80014b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b0:	f7ff fcd4 	bl	8000e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b4:	79fb      	ldrb	r3, [r7, #7]

}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_InitTick+0x68>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d022      	beq.n	800151a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_InitTick+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f966 	bl	80017ba <HAL_SYSTICK_Config>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10f      	bne.n	8001514 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d809      	bhi.n	800150e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fa:	2200      	movs	r2, #0
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001502:	f000 f932 	bl	800176a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_InitTick+0x70>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e007      	b.n	800151e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e004      	b.n	800151e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200002e4 	.word	0x200002e4
 800152c:	200002dc 	.word	0x200002dc
 8001530:	200002e0 	.word	0x200002e0

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_IncTick+0x1c>)
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	200006e8 	.word	0x200006e8
 8001554:	200002e4 	.word	0x200002e4

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200006e8 	.word	0x200006e8

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d004      	beq.n	8001594 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_Delay+0x40>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001594:	bf00      	nop
 8001596:	f7ff ffdf 	bl	8001558 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d8f7      	bhi.n	8001596 <HAL_Delay+0x26>
  {
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002e4 	.word	0x200002e4

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff40 	bl	80015fc <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff90 	bl	80016a8 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff33 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa4 	bl	8001710 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e08d      	b.n	8001902 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_DMA_Init+0x138>)
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d80f      	bhi.n	8001812 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_DMA_Init+0x13c>)
 80017fa:	4413      	add	r3, r2
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_DMA_Init+0x140>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	009a      	lsls	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a42      	ldr	r2, [pc, #264]	; (8001918 <HAL_DMA_Init+0x144>)
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
 8001810:	e00e      	b.n	8001830 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_DMA_Init+0x148>)
 800181a:	4413      	add	r3, r2
 800181c:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <HAL_DMA_Init+0x140>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	009a      	lsls	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_DMA_Init+0x14c>)
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa84 	bl	8001d90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001890:	d102      	bne.n	8001898 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_DMA_Init+0x104>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d80c      	bhi.n	80018d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 faa4 	bl	8001e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	e008      	b.n	80018ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020407 	.word	0x40020407
 8001910:	bffdfff8 	.word	0xbffdfff8
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	40020000 	.word	0x40020000
 800191c:	bffdfbf8 	.word	0xbffdfbf8
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Start_IT+0x20>
 8001940:	2302      	movs	r3, #2
 8001942:	e066      	b.n	8001a12 <HAL_DMA_Start_IT+0xee>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d155      	bne.n	8001a04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f9c9 	bl	8001d14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 020e 	orr.w	r2, r2, #14
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e00f      	b.n	80019bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0204 	bic.w	r2, r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 020a 	orr.w	r2, r2, #10
 80019ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e005      	b.n	8001a10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d005      	beq.n	8001a3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2204      	movs	r2, #4
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e037      	b.n	8001aae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e047      	b.n	8001b90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
    }
  }
  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2204      	movs	r2, #4
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d026      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x7a>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d021      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0204 	bic.w	r2, r2, #4
 8001bec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d071      	beq.n	8001cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c12:	e06c      	b.n	8001cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02e      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d029      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020a 	bic.w	r2, r2, #10
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	2102      	movs	r1, #2
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d038      	beq.n	8001cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c84:	e033      	b.n	8001cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2208      	movs	r2, #8
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d025      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
}
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d06:	b2db      	uxtb	r3, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f003 021f 	and.w	r2, r3, #31
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d108      	bne.n	8001d74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d72:	e007      	b.n	8001d84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d802      	bhi.n	8001daa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e001      	b.n	8001dae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001dac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3b08      	subs	r3, #8
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	009a      	lsls	r2, r3, #2
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001dda:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40020407 	.word	0x40020407
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020820 	.word	0x40020820
 8001e04:	cccccccd 	.word	0xcccccccd
 8001e08:	40020880 	.word	0x40020880

08001e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	1000823f 	.word	0x1000823f
 8001e50:	40020940 	.word	0x40020940

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e62:	e15a      	b.n	800211a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 814c 	beq.w	8002114 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d005      	beq.n	8001e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d130      	bne.n	8001ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 0201 	and.w	r2, r3, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d017      	beq.n	8001f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d123      	bne.n	8001f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0203 	and.w	r2, r3, #3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd4:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe0:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800200a:	d01f      	beq.n	800204c <HAL_GPIO_Init+0x1f8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x2ec>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d019      	beq.n	8002048 <HAL_GPIO_Init+0x1f4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x2f0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_Init+0x1f0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x2f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a49      	ldr	r2, [pc, #292]	; (800214c <HAL_GPIO_Init+0x2f8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a48      	ldr	r2, [pc, #288]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_Init+0x1e4>
 8002034:	2305      	movs	r3, #5
 8002036:	e00a      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 8002038:	2306      	movs	r3, #6
 800203a:	e008      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 800203c:	2304      	movs	r3, #4
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 8002040:	2303      	movs	r3, #3
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1fa>
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205e:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_GPIO_Init+0x300>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f ae9d 	bne.w	8001e64 <HAL_GPIO_Init+0x10>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	48001400 	.word	0x48001400
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43d9      	mvns	r1, r3
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	400b      	ands	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f806 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e08d      	b.n	8002330 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fe3b 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2224      	movs	r2, #36	; 0x24
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002252:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002262:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e006      	b.n	800228a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002288:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d108      	bne.n	80022a4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e007      	b.n	80022b4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69d9      	ldr	r1, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	460b      	mov	r3, r1
 800234c:	813b      	strh	r3, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	d16a      	bne.n	8002434 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_I2C_Mem_Write_IT+0x32>
 8002364:	8bbb      	ldrh	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e05f      	b.n	8002436 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	d101      	bne.n	800238a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e055      	b.n	8002436 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_I2C_Mem_Write_IT+0x60>
 8002394:	2302      	movs	r3, #2
 8002396:	e04e      	b.n	8002436 <HAL_I2C_Mem_Write_IT+0xfe>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2221      	movs	r2, #33	; 0x21
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8bba      	ldrh	r2, [r7, #28]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_I2C_Mem_Write_IT+0x108>)
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_I2C_Mem_Write_IT+0x10c>)
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80023d4:	897a      	ldrh	r2, [r7, #10]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d109      	bne.n	80023f4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	651a      	str	r2, [r3, #80]	; 0x50
 80023f2:	e00b      	b.n	800240c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023f4:	893b      	ldrh	r3, [r7, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_I2C_Mem_Write_IT+0x110>)
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f001 fb78 	bl	8003b10 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002428:	2101      	movs	r1, #1
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f001 fba2 	bl	8003b74 <I2C_Enable_IRQ>

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	ffff0000 	.word	0xffff0000
 8002444:	08002715 	.word	0x08002715
 8002448:	80002000 	.word	0x80002000

0800244c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	d166      	bne.n	8002540 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_I2C_Mem_Read_IT+0x32>
 8002478:	8bbb      	ldrh	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e05b      	b.n	8002542 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002498:	d101      	bne.n	800249e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e051      	b.n	8002542 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2C_Mem_Read_IT+0x60>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e04a      	b.n	8002542 <HAL_I2C_Mem_Read_IT+0xf6>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2222      	movs	r2, #34	; 0x22
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8bba      	ldrh	r2, [r7, #28]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_I2C_Mem_Read_IT+0x100>)
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_I2C_Mem_Read_IT+0x104>)
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80024e2:	897a      	ldrh	r2, [r7, #10]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d109      	bne.n	8002502 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f04f 32ff 	mov.w	r2, #4294967295
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002500:	e00b      	b.n	800251a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002502:	893b      	ldrh	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b29b      	uxth	r3, r3
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002510:	893b      	ldrh	r3, [r7, #8]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	8979      	ldrh	r1, [r7, #10]
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_I2C_Mem_Read_IT+0x108>)
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2300      	movs	r3, #0
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f001 faf2 	bl	8003b10 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002534:	2101      	movs	r1, #1
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f001 fb1c 	bl	8003b74 <I2C_Enable_IRQ>

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	ffff0000 	.word	0xffff0000
 8002550:	08002715 	.word	0x08002715
 8002554:	80002000 	.word	0x80002000

08002558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
  }
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00f      	beq.n	80025ce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00f      	beq.n	80025f8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0208 	orr.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00f      	beq.n	8002622 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f043 0202 	orr.w	r2, r3, #2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002620:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 030b 	and.w	r3, r3, #11
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 f911 	bl	800385c <I2C_ITError>
  }
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
 800269e:	4613      	mov	r3, r2
 80026a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <I2C_Mem_ISR_IT+0x244>)
 8002722:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <I2C_Mem_ISR_IT+0x22>
 8002732:	2302      	movs	r3, #2
 8002734:	e10c      	b.n	8002950 <I2C_Mem_ISR_IT+0x23c>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2210      	movs	r2, #16
 8002758:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f043 0204 	orr.w	r2, r3, #4
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 f98f 	bl	8003a8a <I2C_Flush_TXDR>
 800276c:	e0dd      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d022      	beq.n	80027be <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01d      	beq.n	80027be <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027bc:	e0b5      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02c      	beq.n	8002822 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d027      	beq.n	8002822 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d118      	bne.n	800280e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800280c:	e08d      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f04f 32ff 	mov.w	r2, #4294967295
 800281e:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002820:	e083      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03c      	beq.n	80028a6 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002832:	2b00      	cmp	r3, #0
 8002834:	d037      	beq.n	80028a6 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d02c      	beq.n	800289a <I2C_Mem_ISR_IT+0x186>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d128      	bne.n	800289a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d910      	bls.n	8002874 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	b299      	uxth	r1, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	b2da      	uxtb	r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f001 f94f 	bl	8003b10 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	e017      	b.n	80028a4 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	b299      	uxth	r1, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	b2da      	uxtb	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 f93c 	bl	8003b10 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002898:	e004      	b.n	80028a4 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800289a:	2140      	movs	r1, #64	; 0x40
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 ffdd 	bl	800385c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a2:	e042      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
 80028a4:	e041      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03c      	beq.n	800292a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d037      	beq.n	800292a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028ba:	2101      	movs	r1, #1
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f001 f9dd 	bl	8003c7c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028c2:	2102      	movs	r1, #2
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f001 f955 	bl	8003b74 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b22      	cmp	r3, #34	; 0x22
 80028d4:	d101      	bne.n	80028da <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <I2C_Mem_ISR_IT+0x248>)
 80028d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2bff      	cmp	r3, #255	; 0xff
 80028e2:	d910      	bls.n	8002906 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	b299      	uxth	r1, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f001 f906 	bl	8003b10 <I2C_TransferConfig>
 8002904:	e011      	b.n	800292a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	b299      	uxth	r1, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f001 f8f3 	bl	8003b10 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800293e:	6939      	ldr	r1, [r7, #16]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fd0b 	bl	800335c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	80002000 	.word	0x80002000
 800295c:	80002400 	.word	0x80002400

08002960 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <I2C_Slave_ISR_IT+0x24>
 8002980:	2302      	movs	r3, #2
 8002982:	e0e2      	b.n	8002b4a <I2C_Slave_ISR_IT+0x1ea>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fda2 	bl	80034ec <I2C_ITSlaveCplt>
 80029a8:	e0ca      	b.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d04b      	beq.n	8002a4c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d046      	beq.n	8002a4c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d128      	bne.n	8002a1a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b28      	cmp	r3, #40	; 0x28
 80029d2:	d108      	bne.n	80029e6 <I2C_Slave_ISR_IT+0x86>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029da:	d104      	bne.n	80029e6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fee8 	bl	80037b4 <I2C_ITListenCplt>
 80029e4:	e031      	b.n	8002a4a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b29      	cmp	r3, #41	; 0x29
 80029f0:	d10e      	bne.n	8002a10 <I2C_Slave_ISR_IT+0xb0>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f8:	d00a      	beq.n	8002a10 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f001 f841 	bl	8003a8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fc4b 	bl	80032a4 <I2C_ITSlaveSeqCplt>
 8002a0e:	e01c      	b.n	8002a4a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a18:	e08f      	b.n	8002b3a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <I2C_Slave_ISR_IT+0xdc>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a3a:	d17e      	bne.n	8002b3a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	4619      	mov	r1, r3
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 ff0a 	bl	800385c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a48:	e077      	b.n	8002b3a <I2C_Slave_ISR_IT+0x1da>
 8002a4a:	e076      	b.n	8002b3a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02f      	beq.n	8002ab6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d02a      	beq.n	8002ab6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d14b      	bne.n	8002b3e <I2C_Slave_ISR_IT+0x1de>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d047      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fbf8 	bl	80032a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ab4:	e043      	b.n	8002b3e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002aca:	6939      	ldr	r1, [r7, #16]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fb28 	bl	8003122 <I2C_ITAddrCplt>
 8002ad2:	e035      	b.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d030      	beq.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d02b      	beq.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
 8002b22:	e00d      	b.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2a:	d002      	beq.n	8002b32 <I2C_Slave_ISR_IT+0x1d2>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fbb6 	bl	80032a4 <I2C_ITSlaveSeqCplt>
 8002b38:	e002      	b.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002b3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <I2C_Master_ISR_DMA+0x1a>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0d9      	b.n	8002d20 <I2C_Master_ISR_DMA+0x1ce>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 ffe8 	bl	8003b74 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 ff70 	bl	8003a8a <I2C_Flush_TXDR>
 8002baa:	e0b4      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d071      	beq.n	8002c9a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d06c      	beq.n	8002c9a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04e      	beq.n	8002c78 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2bff      	cmp	r3, #255	; 0xff
 8002bf0:	d906      	bls.n	8002c00 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e010      	b.n	8002c22 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c12:	d003      	beq.n	8002c1c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e002      	b.n	8002c22 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c20:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	8a79      	ldrh	r1, [r7, #18]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 ff6d 	bl	8003b10 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b22      	cmp	r3, #34	; 0x22
 8002c52:	d108      	bne.n	8002c66 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c64:	e057      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c76:	e04e      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c86:	d003      	beq.n	8002c90 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 face 	bl	800322a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002c8e:	e042      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fde2 	bl	800385c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c98:	e03d      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d028      	beq.n	8002cf6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d023      	beq.n	8002cf6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d119      	bne.n	8002cec <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc6:	d025      	beq.n	8002d14 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002ce2:	e017      	b.n	8002d14 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 faa0 	bl	800322a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002cea:	e013      	b.n	8002d14 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cec:	2140      	movs	r1, #64	; 0x40
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fdb4 	bl	800385c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cf4:	e00e      	b.n	8002d14 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fb25 	bl	800335c <I2C_ITMasterCplt>
 8002d12:	e000      	b.n	8002d16 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002d14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002d34:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <I2C_Mem_ISR_DMA+0x244>)
 8002d36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <I2C_Mem_ISR_DMA+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e10e      	b.n	8002f64 <I2C_Mem_ISR_DMA+0x23c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d011      	beq.n	8002d86 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d76:	2120      	movs	r1, #32
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fefb 	bl	8003b74 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fe83 	bl	8003a8a <I2C_Flush_TXDR>
 8002d84:	e0e9      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50
 8002dac:	e0d5      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05f      	beq.n	8002e78 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d05a      	beq.n	8002e78 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 ff59 	bl	8003c7c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002dca:	2110      	movs	r1, #16
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fed1 	bl	8003b74 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d048      	beq.n	8002e6e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2bff      	cmp	r3, #255	; 0xff
 8002de4:	d910      	bls.n	8002e08 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df0:	b299      	uxth	r1, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fe85 	bl	8003b10 <I2C_TransferConfig>
 8002e06:	e011      	b.n	8002e2c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	b299      	uxth	r1, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fe72 	bl	8003b10 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b22      	cmp	r3, #34	; 0x22
 8002e48:	d108      	bne.n	8002e5c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e5a:	e07e      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e6c:	e075      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fcf3 	bl	800385c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e76:	e070      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d05d      	beq.n	8002f3e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d058      	beq.n	8002f3e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fef4 	bl	8003c7c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e94:	2110      	movs	r1, #16
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fe6c 	bl	8003b74 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b22      	cmp	r3, #34	; 0x22
 8002ea6:	d101      	bne.n	8002eac <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002ea8:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <I2C_Mem_ISR_DMA+0x248>)
 8002eaa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2bff      	cmp	r3, #255	; 0xff
 8002eb4:	d910      	bls.n	8002ed8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fe1d 	bl	8003b10 <I2C_TransferConfig>
 8002ed6:	e011      	b.n	8002efc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fe0a 	bl	8003b10 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b22      	cmp	r3, #34	; 0x22
 8002f18:	d108      	bne.n	8002f2c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f28:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f2a:	e016      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f3c:	e00d      	b.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fa01 	bl	800335c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	80002000 	.word	0x80002000
 8002f70:	80002400 	.word	0x80002400

08002f74 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <I2C_Slave_ISR_DMA+0x24>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0c0      	b.n	800311a <I2C_Slave_ISR_DMA+0x1a6>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa98 	bl	80034ec <I2C_ITSlaveCplt>
 8002fbc:	e0a8      	b.n	8003110 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8095 	beq.w	80030f4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 808f 	beq.w	80030f4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d07d      	beq.n	80030e6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003008:	2301      	movs	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d128      	bne.n	8003086 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b28      	cmp	r3, #40	; 0x28
 800303e:	d108      	bne.n	8003052 <I2C_Slave_ISR_DMA+0xde>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003046:	d104      	bne.n	8003052 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fbb2 	bl	80037b4 <I2C_ITListenCplt>
 8003050:	e048      	b.n	80030e4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b29      	cmp	r3, #41	; 0x29
 800305c:	d10e      	bne.n	800307c <I2C_Slave_ISR_DMA+0x108>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003064:	d00a      	beq.n	800307c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2210      	movs	r2, #16
 800306c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fd0b 	bl	8003a8a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f915 	bl	80032a4 <I2C_ITSlaveSeqCplt>
 800307a:	e033      	b.n	80030e4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003084:	e034      	b.n	80030f0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2210      	movs	r2, #16
 800308c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <I2C_Slave_ISR_DMA+0x13c>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ae:	d11f      	bne.n	80030f0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b21      	cmp	r3, #33	; 0x21
 80030b4:	d002      	beq.n	80030bc <I2C_Slave_ISR_DMA+0x148>
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b29      	cmp	r3, #41	; 0x29
 80030ba:	d103      	bne.n	80030c4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2221      	movs	r2, #33	; 0x21
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
 80030c2:	e008      	b.n	80030d6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b22      	cmp	r3, #34	; 0x22
 80030c8:	d002      	beq.n	80030d0 <I2C_Slave_ISR_DMA+0x15c>
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b2a      	cmp	r3, #42	; 0x2a
 80030ce:	d102      	bne.n	80030d6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2222      	movs	r2, #34	; 0x22
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4619      	mov	r1, r3
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fbbd 	bl	800385c <I2C_ITError>
      if (treatdmanack == 1U)
 80030e2:	e005      	b.n	80030f0 <I2C_Slave_ISR_DMA+0x17c>
 80030e4:	e004      	b.n	80030f0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030ee:	e00f      	b.n	8003110 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80030f0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030f2:	e00d      	b.n	8003110 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f809 	bl	8003122 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003138:	2b28      	cmp	r3, #40	; 0x28
 800313a:	d16a      	bne.n	8003212 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b29b      	uxth	r3, r3
 8003156:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800315a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003176:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d138      	bne.n	80031f2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	09db      	lsrs	r3, r3, #7
 8003184:	b29a      	uxth	r2, r3
 8003186:	89bb      	ldrh	r3, [r7, #12]
 8003188:	4053      	eors	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	f003 0306 	and.w	r3, r3, #6
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11c      	bne.n	80031ce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003194:	897b      	ldrh	r3, [r7, #10]
 8003196:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d13b      	bne.n	8003222 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2208      	movs	r2, #8
 80031b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031c0:	89ba      	ldrh	r2, [r7, #12]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fa63 	bl	8002692 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031cc:	e029      	b.n	8003222 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80031ce:	893b      	ldrh	r3, [r7, #8]
 80031d0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fd50 	bl	8003c7c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031e4:	89ba      	ldrh	r2, [r7, #12]
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fa51 	bl	8002692 <HAL_I2C_AddrCallback>
}
 80031f0:	e017      	b.n	8003222 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fd40 	bl	8003c7c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003204:	89ba      	ldrh	r2, [r7, #12]
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fa41 	bl	8002692 <HAL_I2C_AddrCallback>
}
 8003210:	e007      	b.n	8003222 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2208      	movs	r2, #8
 8003218:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b21      	cmp	r3, #33	; 0x21
 8003244:	d115      	bne.n	8003272 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2211      	movs	r2, #17
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800325a:	2101      	movs	r1, #1
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fd0d 	bl	8003c7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff f9e9 	bl	8002642 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003270:	e014      	b.n	800329c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2212      	movs	r2, #18
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003286:	2102      	movs	r1, #2
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fcf7 	bl	8003c7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff f9dd 	bl	8002656 <HAL_I2C_MasterRxCpltCallback>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e00c      	b.n	80032f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b29      	cmp	r3, #41	; 0x29
 80032fc:	d112      	bne.n	8003324 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2228      	movs	r2, #40	; 0x28
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800330c:	2101      	movs	r1, #1
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fcb4 	bl	8003c7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff f9a4 	bl	800266a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003322:	e017      	b.n	8003354 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b2a      	cmp	r3, #42	; 0x2a
 800332e:	d111      	bne.n	8003354 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2228      	movs	r2, #40	; 0x28
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2222      	movs	r2, #34	; 0x22
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800333e:	2102      	movs	r1, #2
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fc9b 	bl	8003c7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff f995 	bl	800267e <HAL_I2C_SlaveRxCpltCallback>
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2220      	movs	r2, #32
 8003370:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d107      	bne.n	800338e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800337e:	2101      	movs	r1, #1
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fc7b 	bl	8003c7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2211      	movs	r2, #17
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
 800338c:	e00c      	b.n	80033a8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b22      	cmp	r3, #34	; 0x22
 8003398:	d106      	bne.n	80033a8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800339a:	2102      	movs	r1, #2
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fc6d 	bl	8003c7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2212      	movs	r2, #18
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <I2C_ITMasterCplt+0x188>)
 80033b4:	400b      	ands	r3, r1
 80033b6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a49      	ldr	r2, [pc, #292]	; (80034e8 <I2C_ITMasterCplt+0x18c>)
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2210      	movs	r2, #16
 80033d4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f043 0204 	orr.w	r2, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b60      	cmp	r3, #96	; 0x60
 80033ec:	d10a      	bne.n	8003404 <I2C_ITMasterCplt+0xa8>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003402:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fb40 	bl	8003a8a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d002      	beq.n	8003422 <I2C_ITMasterCplt+0xc6>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa17 	bl	800385c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800342e:	e054      	b.n	80034da <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b21      	cmp	r3, #33	; 0x21
 800343a:	d124      	bne.n	8003486 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d10b      	bne.n	800346e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff f92b 	bl	80026c2 <HAL_I2C_MemTxCpltCallback>
}
 800346c:	e035      	b.n	80034da <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff f8df 	bl	8002642 <HAL_I2C_MasterTxCpltCallback>
}
 8003484:	e029      	b.n	80034da <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	; 0x22
 8003490:	d123      	bne.n	80034da <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d10b      	bne.n	80034c4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff f90a 	bl	80026d6 <HAL_I2C_MemRxCpltCallback>
}
 80034c2:	e00a      	b.n	80034da <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff f8be 	bl	8002656 <HAL_I2C_MasterRxCpltCallback>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	fe00e800 	.word	0xfe00e800
 80034e8:	ffff0000 	.word	0xffff0000

080034ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003518:	7afb      	ldrb	r3, [r7, #11]
 800351a:	2b21      	cmp	r3, #33	; 0x21
 800351c:	d002      	beq.n	8003524 <I2C_ITSlaveCplt+0x38>
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	2b29      	cmp	r3, #41	; 0x29
 8003522:	d108      	bne.n	8003536 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003524:	f248 0101 	movw	r1, #32769	; 0x8001
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fba7 	bl	8003c7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2221      	movs	r2, #33	; 0x21
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
 8003534:	e019      	b.n	800356a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	2b22      	cmp	r3, #34	; 0x22
 800353a:	d002      	beq.n	8003542 <I2C_ITSlaveCplt+0x56>
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	2b2a      	cmp	r3, #42	; 0x2a
 8003540:	d108      	bne.n	8003554 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003542:	f248 0102 	movw	r1, #32770	; 0x8002
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fb98 	bl	8003c7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2222      	movs	r2, #34	; 0x22
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
 8003552:	e00a      	b.n	800356a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003554:	7afb      	ldrb	r3, [r7, #11]
 8003556:	2b28      	cmp	r3, #40	; 0x28
 8003558:	d107      	bne.n	800356a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800355a:	f248 0103 	movw	r1, #32771	; 0x8003
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fb8c 	bl	8003c7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003578:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b89      	ldr	r3, [pc, #548]	; (80037ac <I2C_ITSlaveCplt+0x2c0>)
 8003586:	400b      	ands	r3, r1
 8003588:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa7d 	bl	8003a8a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d013      	beq.n	80035c2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01f      	beq.n	80035f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c0:	e017      	b.n	80035f2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0304 	bic.w	r3, r3, #4
 8003602:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d049      	beq.n	80036f2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d044      	beq.n	80036f2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d128      	bne.n	80036c4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b28      	cmp	r3, #40	; 0x28
 800367c:	d108      	bne.n	8003690 <I2C_ITSlaveCplt+0x1a4>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003684:	d104      	bne.n	8003690 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f893 	bl	80037b4 <I2C_ITListenCplt>
 800368e:	e030      	b.n	80036f2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b29      	cmp	r3, #41	; 0x29
 800369a:	d10e      	bne.n	80036ba <I2C_ITSlaveCplt+0x1ce>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036a2:	d00a      	beq.n	80036ba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2210      	movs	r2, #16
 80036aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f9ec 	bl	8003a8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fdf6 	bl	80032a4 <I2C_ITSlaveSeqCplt>
 80036b8:	e01b      	b.n	80036f2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2210      	movs	r2, #16
 80036c0:	61da      	str	r2, [r3, #28]
 80036c2:	e016      	b.n	80036f2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <I2C_ITSlaveCplt+0x1fa>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d105      	bne.n	80036f2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8b5 	bl	800385c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f8a4 	bl	800385c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b28      	cmp	r3, #40	; 0x28
 800371e:	d141      	bne.n	80037a4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f846 	bl	80037b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003728:	e03c      	b.n	80037a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003732:	d014      	beq.n	800375e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fdb5 	bl	80032a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <I2C_ITSlaveCplt+0x2c4>)
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe ffa9 	bl	80026ae <HAL_I2C_ListenCpltCallback>
}
 800375c:	e022      	b.n	80037a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	; 0x22
 8003768:	d10e      	bne.n	8003788 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe ff7c 	bl	800267e <HAL_I2C_SlaveRxCpltCallback>
}
 8003786:	e00d      	b.n	80037a4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe ff63 	bl	800266a <HAL_I2C_SlaveTxCpltCallback>
}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	fe00e800 	.word	0xfe00e800
 80037b0:	ffff0000 	.word	0xffff0000

080037b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <I2C_ITListenCplt+0xa4>)
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d022      	beq.n	8003830 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003830:	f248 0103 	movw	r1, #32771	; 0x8003
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fa21 	bl	8003c7c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe ff2f 	bl	80026ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	ffff0000 	.word	0xffff0000

0800385c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a6d      	ldr	r2, [pc, #436]	; (8003a30 <I2C_ITError+0x1d4>)
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b28      	cmp	r3, #40	; 0x28
 8003892:	d005      	beq.n	80038a0 <I2C_ITError+0x44>
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b29      	cmp	r3, #41	; 0x29
 8003898:	d002      	beq.n	80038a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b2a      	cmp	r3, #42	; 0x2a
 800389e:	d10b      	bne.n	80038b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038a0:	2103      	movs	r1, #3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9ea 	bl	8003c7c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2228      	movs	r2, #40	; 0x28
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a60      	ldr	r2, [pc, #384]	; (8003a34 <I2C_ITError+0x1d8>)
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
 80038b6:	e030      	b.n	800391a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f9dd 	bl	8003c7c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8e1 	bl	8003a8a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b60      	cmp	r3, #96	; 0x60
 80038d2:	d01f      	beq.n	8003914 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d114      	bne.n	8003914 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d109      	bne.n	800390c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2220      	movs	r2, #32
 8003912:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d039      	beq.n	800399c <I2C_ITError+0x140>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b11      	cmp	r3, #17
 800392c:	d002      	beq.n	8003934 <I2C_ITError+0xd8>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b21      	cmp	r3, #33	; 0x21
 8003932:	d133      	bne.n	800399c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003942:	d107      	bne.n	8003954 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003952:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe f9cd 	bl	8001cf8 <HAL_DMA_GetState>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d017      	beq.n	8003994 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <I2C_ITError+0x1dc>)
 800396a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe f8a7 	bl	8001acc <HAL_DMA_Abort_IT>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d04d      	beq.n	8003a20 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800398e:	4610      	mov	r0, r2
 8003990:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003992:	e045      	b.n	8003a20 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f851 	bl	8003a3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800399a:	e041      	b.n	8003a20 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d039      	beq.n	8003a18 <I2C_ITError+0x1bc>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b12      	cmp	r3, #18
 80039a8:	d002      	beq.n	80039b0 <I2C_ITError+0x154>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b22      	cmp	r3, #34	; 0x22
 80039ae:	d133      	bne.n	8003a18 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d107      	bne.n	80039d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe f98f 	bl	8001cf8 <HAL_DMA_GetState>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d017      	beq.n	8003a10 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <I2C_ITError+0x1dc>)
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe f869 	bl	8001acc <HAL_DMA_Abort_IT>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d011      	beq.n	8003a24 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0e:	e009      	b.n	8003a24 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f813 	bl	8003a3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a16:	e005      	b.n	8003a24 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f80f 	bl	8003a3c <I2C_TreatErrorCallback>
  }
}
 8003a1e:	e002      	b.n	8003a26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a24:	bf00      	nop
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	ffff0000 	.word	0xffff0000
 8003a34:	08002961 	.word	0x08002961
 8003a38:	08003ad3 	.word	0x08003ad3

08003a3c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d10e      	bne.n	8003a6e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fe49 	bl	80026fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a6c:	e009      	b.n	8003a82 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fe fe34 	bl	80026ea <HAL_I2C_ErrorCallback>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d103      	bne.n	8003aa8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d007      	beq.n	8003ac6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	619a      	str	r2, [r3, #24]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	2200      	movs	r2, #0
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	2200      	movs	r2, #0
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ff9b 	bl	8003a3c <I2C_TreatErrorCallback>
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b28:	7a7b      	ldrb	r3, [r7, #9]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	0d5b      	lsrs	r3, r3, #21
 8003b4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <I2C_TransferConfig+0x60>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	43db      	mvns	r3, r3
 8003b54:	ea02 0103 	and.w	r1, r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	03ff63ff 	.word	0x03ff63ff

08003b74 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	4a39      	ldr	r2, [pc, #228]	; (8003c70 <I2C_Enable_IRQ+0xfc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d032      	beq.n	8003bf4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003b92:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <I2C_Enable_IRQ+0x100>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02d      	beq.n	8003bf4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003b9c:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <I2C_Enable_IRQ+0x104>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d028      	beq.n	8003bf4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da03      	bge.n	8003bb2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003bb0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003bc2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003bd4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d103      	bne.n	8003be4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003be2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d133      	bne.n	8003c52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f043 0320 	orr.w	r3, r3, #32
 8003bf0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bf2:	e02e      	b.n	8003c52 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	da03      	bge.n	8003c04 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d103      	bne.n	8003c36 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d103      	bne.n	8003c44 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d103      	bne.n	8003c52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	08002b53 	.word	0x08002b53
 8003c74:	08002f75 	.word	0x08002f75
 8003c78:	08002d29 	.word	0x08002d29

08003c7c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00f      	beq.n	8003cb6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003caa:	2b28      	cmp	r3, #40	; 0x28
 8003cac:	d003      	beq.n	8003cb6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00f      	beq.n	8003ce0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003cc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cd4:	2b28      	cmp	r3, #40	; 0x28
 8003cd6:	d003      	beq.n	8003ce0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cde:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da03      	bge.n	8003cf0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d103      	bne.n	8003cfe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d103      	bne.n	8003d0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d103      	bne.n	8003d1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	43da      	mvns	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	400a      	ands	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d138      	bne.n	8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e032      	b.n	8003dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	; 0x24
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d139      	bne.n	8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e033      	b.n	8003e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d141      	bne.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e76:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d131      	bne.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e84:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8a:	4a46      	ldr	r2, [pc, #280]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e9c:	4a41      	ldr	r2, [pc, #260]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2232      	movs	r2, #50	; 0x32
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eba:	e002      	b.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d102      	bne.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f2      	bne.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d158      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e057      	b.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eee:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ef8:	e04d      	b.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d141      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d131      	bne.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f28:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2232      	movs	r2, #50	; 0x32
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	0c9b      	lsrs	r3, r3, #18
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f46:	e002      	b.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d102      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f2      	bne.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d112      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e011      	b.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f84:	e007      	b.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f8e:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	200002dc 	.word	0x200002dc
 8003fac:	431bde83 	.word	0x431bde83

08003fb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fbe:	6093      	str	r3, [r2, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e2fe      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d075      	beq.n	80040da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	4b97      	ldr	r3, [pc, #604]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff8:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d102      	bne.n	800400e <HAL_RCC_OscConfig+0x3e>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d002      	beq.n	8004014 <HAL_RCC_OscConfig+0x44>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	4b8d      	ldr	r3, [pc, #564]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05b      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d157      	bne.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e2d9      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x74>
 8004036:	4b85      	ldr	r3, [pc, #532]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a84      	ldr	r2, [pc, #528]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x98>
 800404e:	4b7f      	ldr	r3, [pc, #508]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7e      	ldr	r2, [pc, #504]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b7c      	ldr	r3, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7b      	ldr	r2, [pc, #492]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004068:	4b78      	ldr	r3, [pc, #480]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a77      	ldr	r2, [pc, #476]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b75      	ldr	r3, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a74      	ldr	r2, [pc, #464]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fa66 	bl	8001558 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd fa62 	bl	8001558 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e29e      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a2:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xc0>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd fa52 	bl	8001558 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fd fa4e 	bl	8001558 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e28a      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ca:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d075      	beq.n	80041d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e6:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f0:	4b56      	ldr	r3, [pc, #344]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_OscConfig+0x136>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d002      	beq.n	800410c <HAL_RCC_OscConfig+0x13c>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d11f      	bne.n	800414c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410c:	4b4f      	ldr	r3, [pc, #316]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_OscConfig+0x154>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e25d      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004124:	4b49      	ldr	r3, [pc, #292]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	4946      	ldr	r1, [pc, #280]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004138:	4b45      	ldr	r3, [pc, #276]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd f9bf 	bl	80014c0 <HAL_InitTick>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d043      	beq.n	80041d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e249      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d023      	beq.n	800419c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b3d      	ldr	r3, [pc, #244]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3c      	ldr	r2, [pc, #240]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd f9fa 	bl	8001558 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004168:	f7fd f9f6 	bl	8001558 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e232      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417a:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	492d      	ldr	r1, [pc, #180]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e01a      	b.n	80041d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80041a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd f9d6 	bl	8001558 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd f9d2 	bl	8001558 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e20e      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1e0>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d041      	beq.n	8004262 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01c      	beq.n	8004220 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd f9af 	bl	8001558 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fd f9ab 	bl	8001558 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1e7      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ef      	beq.n	80041fe <HAL_RCC_OscConfig+0x22e>
 800421e:	e020      	b.n	8004262 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd f992 	bl	8001558 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004236:	e00d      	b.n	8004254 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7fd f98e 	bl	8001558 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d906      	bls.n	8004254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1ca      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	200002e0 	.word	0x200002e0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004254:	4b8c      	ldr	r3, [pc, #560]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ea      	bne.n	8004238 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a6 	beq.w	80043bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004270:	2300      	movs	r3, #0
 8004272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004274:	4b84      	ldr	r3, [pc, #528]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x2b4>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x2b6>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	4b7f      	ldr	r3, [pc, #508]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a7e      	ldr	r2, [pc, #504]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
 8004296:	4b7c      	ldr	r3, [pc, #496]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042a2:	2301      	movs	r3, #1
 80042a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	4b79      	ldr	r3, [pc, #484]	; (800448c <HAL_RCC_OscConfig+0x4bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4b76      	ldr	r3, [pc, #472]	; (800448c <HAL_RCC_OscConfig+0x4bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <HAL_RCC_OscConfig+0x4bc>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fd f94b 	bl	8001558 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fd f947 	bl	8001558 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e183      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d8:	4b6c      	ldr	r3, [pc, #432]	; (800448c <HAL_RCC_OscConfig+0x4bc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_RCC_OscConfig+0x32e>
 80042ec:	4b66      	ldr	r3, [pc, #408]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a65      	ldr	r2, [pc, #404]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	e024      	b.n	8004348 <HAL_RCC_OscConfig+0x378>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d110      	bne.n	8004328 <HAL_RCC_OscConfig+0x358>
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	4a5e      	ldr	r2, [pc, #376]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004316:	4b5c      	ldr	r3, [pc, #368]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	4a5a      	ldr	r2, [pc, #360]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004326:	e00f      	b.n	8004348 <HAL_RCC_OscConfig+0x378>
 8004328:	4b57      	ldr	r3, [pc, #348]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a56      	ldr	r2, [pc, #344]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d016      	beq.n	800437e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fd f902 	bl	8001558 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fd f8fe 	bl	8001558 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e138      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436e:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ed      	beq.n	8004358 <HAL_RCC_OscConfig+0x388>
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fd f8eb 	bl	8001558 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fd f8e7 	bl	8001558 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e121      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439c:	4b3a      	ldr	r3, [pc, #232]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ed      	bne.n	8004386 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03c      	beq.n	8004442 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd f8ba 	bl	8001558 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e8:	f7fd f8b6 	bl	8001558 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0f2      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCC_OscConfig+0x418>
 8004408:	e01b      	b.n	8004442 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800440a:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800440c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd f89d 	bl	8001558 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004422:	f7fd f899 	bl	8001558 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0d5      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ef      	bne.n	8004422 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80c9 	beq.w	80045de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b0c      	cmp	r3, #12
 8004456:	f000 8083 	beq.w	8004560 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d15e      	bne.n	8004520 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fd f873 	bl	8001558 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	e00c      	b.n	8004490 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7fd f86f 	bl	8001558 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d905      	bls.n	8004490 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0ab      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004490:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ec      	bne.n	8004476 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449c:	4b52      	ldr	r3, [pc, #328]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	4b52      	ldr	r3, [pc, #328]	; (80045ec <HAL_RCC_OscConfig+0x61c>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6a11      	ldr	r1, [r2, #32]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044b6:	0212      	lsls	r2, r2, #8
 80044b8:	4311      	orrs	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044be:	0852      	lsrs	r2, r2, #1
 80044c0:	3a01      	subs	r2, #1
 80044c2:	0552      	lsls	r2, r2, #21
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ca:	0852      	lsrs	r2, r2, #1
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0652      	lsls	r2, r2, #25
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044d6:	06d2      	lsls	r2, r2, #27
 80044d8:	430a      	orrs	r2, r1
 80044da:	4943      	ldr	r1, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e0:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a40      	ldr	r2, [pc, #256]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044ec:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd f82e 	bl	8001558 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fd f82a 	bl	8001558 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e066      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004512:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x530>
 800451e:	e05e      	b.n	80045de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd f814 	bl	8001558 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd f810 	bl	8001558 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04c      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4924      	ldr	r1, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <HAL_RCC_OscConfig+0x620>)
 800455a:	4013      	ands	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
 800455e:	e03e      	b.n	80045de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e039      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <HAL_RCC_OscConfig+0x618>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0203 	and.w	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	429a      	cmp	r2, r3
 800457e:	d12c      	bne.n	80045da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	3b01      	subs	r3, #1
 800458c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d123      	bne.n	80045da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11b      	bne.n	80045da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d113      	bne.n	80045da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	3b01      	subs	r3, #1
 80045c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d109      	bne.n	80045da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000
 80045ec:	019f800c 	.word	0x019f800c
 80045f0:	feeefffc 	.word	0xfeeefffc

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e11e      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b91      	ldr	r3, [pc, #580]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d910      	bls.n	800463c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b8e      	ldr	r3, [pc, #568]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 020f 	bic.w	r2, r3, #15
 8004622:	498c      	ldr	r1, [pc, #560]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b8a      	ldr	r3, [pc, #552]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e106      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d073      	beq.n	8004730 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d129      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004650:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0f4      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004660:	f000 f99e 	bl	80049a0 <RCC_GetSysClockFreqFromPLLSource>
 8004664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4a7c      	ldr	r2, [pc, #496]	; (800485c <HAL_RCC_ClockConfig+0x268>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d93f      	bls.n	80046ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800466e:	4b7a      	ldr	r3, [pc, #488]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004682:	2b00      	cmp	r3, #0
 8004684:	d033      	beq.n	80046ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800468a:	2b00      	cmp	r3, #0
 800468c:	d12f      	bne.n	80046ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800468e:	4b72      	ldr	r3, [pc, #456]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004696:	4a70      	ldr	r2, [pc, #448]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e024      	b.n	80046ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0c6      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046bc:	4b66      	ldr	r3, [pc, #408]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0be      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046cc:	f000 f8ce 	bl	800486c <HAL_RCC_GetSysClockFreq>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4a61      	ldr	r2, [pc, #388]	; (800485c <HAL_RCC_ClockConfig+0x268>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d909      	bls.n	80046ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046da:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	4a5d      	ldr	r2, [pc, #372]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b5a      	ldr	r3, [pc, #360]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4957      	ldr	r1, [pc, #348]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fc ff2a 	bl	8001558 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fc ff26 	bl	8001558 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e095      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d023      	beq.n	8004784 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a42      	ldr	r2, [pc, #264]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800474e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004752:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004760:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004768:	4a3b      	ldr	r2, [pc, #236]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800476a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800476e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4936      	ldr	r1, [pc, #216]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
 8004782:	e008      	b.n	8004796 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d105      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800478a:	4b33      	ldr	r3, [pc, #204]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4a32      	ldr	r2, [pc, #200]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004794:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d21d      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 020f 	bic.w	r2, r3, #15
 80047ac:	4929      	ldr	r1, [pc, #164]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047b4:	f7fc fed0 	bl	8001558 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047bc:	f7fc fecc 	bl	8001558 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e03b      	b.n	800484a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1ed      	bne.n	80047bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4917      	ldr	r1, [pc, #92]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490f      	ldr	r1, [pc, #60]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800481e:	f000 f825 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_ClockConfig+0x264>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490c      	ldr	r1, [pc, #48]	; (8004860 <HAL_RCC_ClockConfig+0x26c>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <HAL_RCC_ClockConfig+0x270>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x274>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fe3c 	bl	80014c0 <HAL_InitTick>
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	40021000 	.word	0x40021000
 800485c:	04c4b400 	.word	0x04c4b400
 8004860:	08006934 	.word	0x08006934
 8004864:	200002dc 	.word	0x200002dc
 8004868:	200002e0 	.word	0x200002e0

0800486c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d102      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e047      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	d102      	bne.n	8004896 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004890:	4b26      	ldr	r3, [pc, #152]	; (800492c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e03e      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d136      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3301      	adds	r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10c      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c0:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_RCC_GetSysClockFreq+0xc0>)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ca:	68d2      	ldr	r2, [r2, #12]
 80048cc:	0a12      	lsrs	r2, r2, #8
 80048ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
      break;
 80048d8:	e00c      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e4:	68d2      	ldr	r2, [r2, #12]
 80048e6:	0a12      	lsrs	r2, r2, #8
 80048e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
      break;
 80048f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0e5b      	lsrs	r3, r3, #25
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e001      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004914:	693b      	ldr	r3, [r7, #16]
}
 8004916:	4618      	mov	r0, r3
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	00f42400 	.word	0x00f42400
 800492c:	016e3600 	.word	0x016e3600

08004930 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_RCC_GetHCLKFreq+0x14>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	200002dc 	.word	0x200002dc

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800494c:	f7ff fff0 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4904      	ldr	r1, [pc, #16]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	08006944 	.word	0x08006944

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004978:	f7ff ffda 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4904      	ldr	r1, [pc, #16]	; (800499c <HAL_RCC_GetPCLK2Freq+0x28>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	08006944 	.word	0x08006944

080049a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d10c      	bne.n	80049de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ce:	68d2      	ldr	r2, [r2, #12]
 80049d0:	0a12      	lsrs	r2, r2, #8
 80049d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	617b      	str	r3, [r7, #20]
    break;
 80049dc:	e00c      	b.n	80049f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049de:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049e8:	68d2      	ldr	r2, [r2, #12]
 80049ea:	0a12      	lsrs	r2, r2, #8
 80049ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
    break;
 80049f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	0e5b      	lsrs	r3, r3, #25
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	3301      	adds	r3, #1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a12:	687b      	ldr	r3, [r7, #4]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40021000 	.word	0x40021000
 8004a24:	016e3600 	.word	0x016e3600
 8004a28:	00f42400 	.word	0x00f42400

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a34:	2300      	movs	r3, #0
 8004a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8098 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6593      	str	r3, [r2, #88]	; 0x58
 8004a66:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a72:	2301      	movs	r3, #1
 8004a74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a76:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a39      	ldr	r2, [pc, #228]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a82:	f7fc fd69 	bl	8001558 <HAL_GetTick>
 8004a86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a88:	e009      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fc fd65 	bl	8001558 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	74fb      	strb	r3, [r7, #19]
        break;
 8004a9c:	e005      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a9e:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d159      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ab0:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01e      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d019      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ad8:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004af8:	4a18      	ldr	r2, [pc, #96]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fc fd25 	bl	8001558 <HAL_GetTick>
 8004b0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b10:	e00b      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fc fd21 	bl	8001558 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d902      	bls.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	74fb      	strb	r3, [r7, #19]
            break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ec      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	4903      	ldr	r1, [pc, #12]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	74bb      	strb	r3, [r7, #18]
 8004b5a:	e005      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b68:	7c7b      	ldrb	r3, [r7, #17]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4ba7      	ldr	r3, [pc, #668]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	4aa6      	ldr	r2, [pc, #664]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b86:	4ba1      	ldr	r3, [pc, #644]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f023 0203 	bic.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	499d      	ldr	r1, [pc, #628]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba8:	4b98      	ldr	r3, [pc, #608]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 020c 	bic.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4995      	ldr	r1, [pc, #596]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bca:	4b90      	ldr	r3, [pc, #576]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	498c      	ldr	r1, [pc, #560]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bec:	4b87      	ldr	r3, [pc, #540]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4984      	ldr	r1, [pc, #528]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c0e:	4b7f      	ldr	r3, [pc, #508]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	497b      	ldr	r1, [pc, #492]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c30:	4b76      	ldr	r3, [pc, #472]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	4973      	ldr	r1, [pc, #460]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c52:	4b6e      	ldr	r3, [pc, #440]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	496a      	ldr	r1, [pc, #424]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c74:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4962      	ldr	r1, [pc, #392]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c96:	4b5d      	ldr	r3, [pc, #372]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	4959      	ldr	r1, [pc, #356]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cb8:	4b54      	ldr	r3, [pc, #336]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	4951      	ldr	r1, [pc, #324]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cda:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4948      	ldr	r1, [pc, #288]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cfc:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	4940      	ldr	r1, [pc, #256]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a3a      	ldr	r2, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d015      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d34:	4b35      	ldr	r3, [pc, #212]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	4932      	ldr	r1, [pc, #200]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d54:	4b2d      	ldr	r3, [pc, #180]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d015      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	4924      	ldr	r1, [pc, #144]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d019      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfa:	d109      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a02      	ldr	r2, [pc, #8]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]
 8004e08:	e002      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d015      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	4926      	ldr	r1, [pc, #152]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e62:	4918      	ldr	r1, [pc, #96]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d105      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	490a      	ldr	r1, [pc, #40]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004eb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e042      	b.n	8004f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc f89d 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	; 0x24
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ff56 	bl	8005dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fc57 	bl	80057cc <UART_SetConfig>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01b      	b.n	8004f60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ffd5 	bl	8005f08 <UART_CheckIdleState>
 8004f5e:	4603      	mov	r3, r0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d17b      	bne.n	800507a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_Transmit+0x26>
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e074      	b.n	800507c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa2:	f7fc fad9 	bl	8001558 <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	88fa      	ldrh	r2, [r7, #6]
 8004fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc0:	d108      	bne.n	8004fd4 <HAL_UART_Transmit+0x6c>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	e003      	b.n	8004fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fdc:	e030      	b.n	8005040 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f001 f837 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e03d      	b.n	800507c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	3302      	adds	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e007      	b.n	800502e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1c8      	bne.n	8004fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2200      	movs	r2, #0
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f001 f800 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e006      	b.n	800507c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005098:	2b20      	cmp	r3, #32
 800509a:	d137      	bne.n	800510c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_UART_Receive_DMA+0x24>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e030      	b.n	800510e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_UART_Receive_DMA+0x94>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d01f      	beq.n	80050fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d018      	beq.n	80050fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	613b      	str	r3, [r7, #16]
   return(result);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e6      	bne.n	80050ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	461a      	mov	r2, r3
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f001 f818 	bl	8006138 <UART_Start_Receive_DMA>
 8005108:	4603      	mov	r3, r0
 800510a:	e000      	b.n	800510e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40008000 	.word	0x40008000

0800511c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b0ba      	sub	sp, #232	; 0xe8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005146:	f640 030f 	movw	r3, #2063	; 0x80f
 800514a:	4013      	ands	r3, r2
 800514c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11b      	bne.n	8005190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d015      	beq.n	8005190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 82e3 	beq.w	800574c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
      }
      return;
 800518e:	e2dd      	b.n	800574c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8123 	beq.w	80053e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800519a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800519e:	4b8d      	ldr	r3, [pc, #564]	; (80053d4 <HAL_UART_IRQHandler+0x2b8>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051aa:	4b8b      	ldr	r3, [pc, #556]	; (80053d8 <HAL_UART_IRQHandler+0x2bc>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8116 	beq.w	80053e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <HAL_UART_IRQHandler+0xc8>
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d011      	beq.n	8005214 <HAL_UART_IRQHandler+0xf8>
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2202      	movs	r2, #2
 8005202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f043 0204 	orr.w	r2, r3, #4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d011      	beq.n	8005244 <HAL_UART_IRQHandler+0x128>
 8005220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2204      	movs	r2, #4
 8005232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f043 0202 	orr.w	r2, r3, #2
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d017      	beq.n	8005280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800525c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005260:	4b5c      	ldr	r3, [pc, #368]	; (80053d4 <HAL_UART_IRQHandler+0x2b8>)
 8005262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2208      	movs	r2, #8
 800526e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <HAL_UART_IRQHandler+0x196>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8249 	beq.w	8005750 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d013      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800530a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005312:	2b00      	cmp	r3, #0
 8005314:	d054      	beq.n	80053c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fff5 	bl	8006306 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d146      	bne.n	80053b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d9      	bne.n	800532a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	d017      	beq.n	80053b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_UART_IRQHandler+0x2c0>)
 8005388:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	4618      	mov	r0, r3
 8005392:	f7fc fb9b 	bl	8001acc <HAL_DMA_Abort_IT>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053aa:	4610      	mov	r0, r2
 80053ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ae:	e00f      	b.n	80053d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9f5 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	e00b      	b.n	80053d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9f1 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053be:	e007      	b.n	80053d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9ed 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053ce:	e1bf      	b.n	8005750 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	bf00      	nop
    return;
 80053d2:	e1bd      	b.n	8005750 <HAL_UART_IRQHandler+0x634>
 80053d4:	10000001 	.word	0x10000001
 80053d8:	04000120 	.word	0x04000120
 80053dc:	080065bd 	.word	0x080065bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	f040 8153 	bne.w	8005690 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 814c 	beq.w	8005690 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8145 	beq.w	8005690 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2210      	movs	r2, #16
 800540c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	f040 80bb 	bne.w	8005594 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800542c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 818f 	beq.w	8005754 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800543c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005440:	429a      	cmp	r2, r3
 8005442:	f080 8187 	bcs.w	8005754 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800544c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 8087 	bne.w	8005572 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800548e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800549a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1da      	bne.n	8005464 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e1      	bne.n	80054ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800550e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e3      	bne.n	80054ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005540:	f023 0310 	bic.w	r3, r3, #16
 8005544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005552:	65bb      	str	r3, [r7, #88]	; 0x58
 8005554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e4      	bne.n	8005530 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556c:	4618      	mov	r0, r3
 800556e:	f7fc fa54 	bl	8001a1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005584:	b29b      	uxth	r3, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f911 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005592:	e0df      	b.n	8005754 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80d1 	beq.w	8005758 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80055b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80cc 	beq.w	8005758 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e2:	647b      	str	r3, [r7, #68]	; 0x44
 80055e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e4      	bne.n	80055c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3308      	adds	r3, #8
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	623b      	str	r3, [r7, #32]
   return(result);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800561e:	633a      	str	r2, [r7, #48]	; 0x30
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e1      	bne.n	80055f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60fb      	str	r3, [r7, #12]
   return(result);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	69b9      	ldr	r1, [r7, #24]
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	617b      	str	r3, [r7, #20]
   return(result);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e4      	bne.n	8005646 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f893 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800568e:	e063      	b.n	8005758 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_UART_IRQHandler+0x59e>
 800569c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 ffc3 	bl	800663e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056b8:	e051      	b.n	800575e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d008      	beq.n	80056f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d03a      	beq.n	800575c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
    }
    return;
 80056ee:	e035      	b.n	800575c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <HAL_UART_IRQHandler+0x5f4>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 ff6d 	bl	80065e8 <UART_EndTransmit_IT>
    return;
 800570e:	e026      	b.n	800575e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HAL_UART_IRQHandler+0x614>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 ff9c 	bl	8006666 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800572e:	e016      	b.n	800575e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d010      	beq.n	800575e <HAL_UART_IRQHandler+0x642>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	2b00      	cmp	r3, #0
 8005742:	da0c      	bge.n	800575e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 ff84 	bl	8006652 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800574a:	e008      	b.n	800575e <HAL_UART_IRQHandler+0x642>
      return;
 800574c:	bf00      	nop
 800574e:	e006      	b.n	800575e <HAL_UART_IRQHandler+0x642>
    return;
 8005750:	bf00      	nop
 8005752:	e004      	b.n	800575e <HAL_UART_IRQHandler+0x642>
      return;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_UART_IRQHandler+0x642>
      return;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_UART_IRQHandler+0x642>
    return;
 800575c:	bf00      	nop
  }
}
 800575e:	37e8      	adds	r7, #232	; 0xe8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b08c      	sub	sp, #48	; 0x30
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4baa      	ldr	r3, [pc, #680]	; (8005aa4 <UART_SetConfig+0x2d8>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005804:	430b      	orrs	r3, r1
 8005806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a9f      	ldr	r2, [pc, #636]	; (8005aa8 <UART_SetConfig+0x2dc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	4313      	orrs	r3, r2
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005842:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584c:	430b      	orrs	r3, r1
 800584e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	f023 010f 	bic.w	r1, r3, #15
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a90      	ldr	r2, [pc, #576]	; (8005aac <UART_SetConfig+0x2e0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d125      	bne.n	80058bc <UART_SetConfig+0xf0>
 8005870:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <UART_SetConfig+0x2e4>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b03      	cmp	r3, #3
 800587c:	d81a      	bhi.n	80058b4 <UART_SetConfig+0xe8>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0xb8>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	08005895 	.word	0x08005895
 8005888:	080058a5 	.word	0x080058a5
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058ad 	.word	0x080058ad
 8005894:	2301      	movs	r3, #1
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e116      	b.n	8005aca <UART_SetConfig+0x2fe>
 800589c:	2302      	movs	r3, #2
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e112      	b.n	8005aca <UART_SetConfig+0x2fe>
 80058a4:	2304      	movs	r3, #4
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e10e      	b.n	8005aca <UART_SetConfig+0x2fe>
 80058ac:	2308      	movs	r3, #8
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e10a      	b.n	8005aca <UART_SetConfig+0x2fe>
 80058b4:	2310      	movs	r3, #16
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ba:	e106      	b.n	8005aca <UART_SetConfig+0x2fe>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a7c      	ldr	r2, [pc, #496]	; (8005ab4 <UART_SetConfig+0x2e8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d138      	bne.n	8005938 <UART_SetConfig+0x16c>
 80058c6:	4b7a      	ldr	r3, [pc, #488]	; (8005ab0 <UART_SetConfig+0x2e4>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	d82d      	bhi.n	8005930 <UART_SetConfig+0x164>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x110>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005931 	.word	0x08005931
 80058e4:	08005931 	.word	0x08005931
 80058e8:	08005931 	.word	0x08005931
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005931 	.word	0x08005931
 80058f8:	08005931 	.word	0x08005931
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005931 	.word	0x08005931
 8005904:	08005931 	.word	0x08005931
 8005908:	08005931 	.word	0x08005931
 800590c:	08005929 	.word	0x08005929
 8005910:	2300      	movs	r3, #0
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e0d8      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e0d4      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e0d0      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e0cc      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e0c8      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5e      	ldr	r2, [pc, #376]	; (8005ab8 <UART_SetConfig+0x2ec>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d125      	bne.n	800598e <UART_SetConfig+0x1c2>
 8005942:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <UART_SetConfig+0x2e4>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d016      	beq.n	800597e <UART_SetConfig+0x1b2>
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d818      	bhi.n	8005986 <UART_SetConfig+0x1ba>
 8005954:	2b20      	cmp	r3, #32
 8005956:	d00a      	beq.n	800596e <UART_SetConfig+0x1a2>
 8005958:	2b20      	cmp	r3, #32
 800595a:	d814      	bhi.n	8005986 <UART_SetConfig+0x1ba>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <UART_SetConfig+0x19a>
 8005960:	2b10      	cmp	r3, #16
 8005962:	d008      	beq.n	8005976 <UART_SetConfig+0x1aa>
 8005964:	e00f      	b.n	8005986 <UART_SetConfig+0x1ba>
 8005966:	2300      	movs	r3, #0
 8005968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596c:	e0ad      	b.n	8005aca <UART_SetConfig+0x2fe>
 800596e:	2302      	movs	r3, #2
 8005970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005974:	e0a9      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005976:	2304      	movs	r3, #4
 8005978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597c:	e0a5      	b.n	8005aca <UART_SetConfig+0x2fe>
 800597e:	2308      	movs	r3, #8
 8005980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005984:	e0a1      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005986:	2310      	movs	r3, #16
 8005988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598c:	e09d      	b.n	8005aca <UART_SetConfig+0x2fe>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <UART_SetConfig+0x2f0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d125      	bne.n	80059e4 <UART_SetConfig+0x218>
 8005998:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <UART_SetConfig+0x2e4>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d016      	beq.n	80059d4 <UART_SetConfig+0x208>
 80059a6:	2bc0      	cmp	r3, #192	; 0xc0
 80059a8:	d818      	bhi.n	80059dc <UART_SetConfig+0x210>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d00a      	beq.n	80059c4 <UART_SetConfig+0x1f8>
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d814      	bhi.n	80059dc <UART_SetConfig+0x210>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <UART_SetConfig+0x1f0>
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x200>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x210>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c2:	e082      	b.n	8005aca <UART_SetConfig+0x2fe>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e07e      	b.n	8005aca <UART_SetConfig+0x2fe>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e07a      	b.n	8005aca <UART_SetConfig+0x2fe>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e076      	b.n	8005aca <UART_SetConfig+0x2fe>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e072      	b.n	8005aca <UART_SetConfig+0x2fe>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a35      	ldr	r2, [pc, #212]	; (8005ac0 <UART_SetConfig+0x2f4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d12a      	bne.n	8005a44 <UART_SetConfig+0x278>
 80059ee:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <UART_SetConfig+0x2e4>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fc:	d01a      	beq.n	8005a34 <UART_SetConfig+0x268>
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a02:	d81b      	bhi.n	8005a3c <UART_SetConfig+0x270>
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a08:	d00c      	beq.n	8005a24 <UART_SetConfig+0x258>
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d815      	bhi.n	8005a3c <UART_SetConfig+0x270>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <UART_SetConfig+0x250>
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a18:	d008      	beq.n	8005a2c <UART_SetConfig+0x260>
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x270>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e052      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e04e      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e04a      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e046      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e042      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <UART_SetConfig+0x2dc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d13a      	bne.n	8005ac4 <UART_SetConfig+0x2f8>
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <UART_SetConfig+0x2e4>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a5c:	d01a      	beq.n	8005a94 <UART_SetConfig+0x2c8>
 8005a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a62:	d81b      	bhi.n	8005a9c <UART_SetConfig+0x2d0>
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a68:	d00c      	beq.n	8005a84 <UART_SetConfig+0x2b8>
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d815      	bhi.n	8005a9c <UART_SetConfig+0x2d0>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <UART_SetConfig+0x2b0>
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a78:	d008      	beq.n	8005a8c <UART_SetConfig+0x2c0>
 8005a7a:	e00f      	b.n	8005a9c <UART_SetConfig+0x2d0>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a82:	e022      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a84:	2302      	movs	r3, #2
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8a:	e01e      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e01a      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	e016      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e012      	b.n	8005aca <UART_SetConfig+0x2fe>
 8005aa4:	cfff69f3 	.word	0xcfff69f3
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	40004800 	.word	0x40004800
 8005abc:	40004c00 	.word	0x40004c00
 8005ac0:	40005000 	.word	0x40005000
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4aae      	ldr	r2, [pc, #696]	; (8005d88 <UART_SetConfig+0x5bc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	f040 8097 	bne.w	8005c04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d823      	bhi.n	8005b26 <UART_SetConfig+0x35a>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0x318>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b27 	.word	0x08005b27
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b27 	.word	0x08005b27
 8005af4:	08005b17 	.word	0x08005b17
 8005af8:	08005b27 	.word	0x08005b27
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b27 	.word	0x08005b27
 8005b04:	08005b1f 	.word	0x08005b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b08:	f7fe ff1e 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005b0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b0e:	e010      	b.n	8005b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b10:	4b9e      	ldr	r3, [pc, #632]	; (8005d8c <UART_SetConfig+0x5c0>)
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b14:	e00d      	b.n	8005b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b16:	f7fe fea9 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8005b1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b1c:	e009      	b.n	8005b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b24:	e005      	b.n	8005b32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8130 	beq.w	8005d9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	4a94      	ldr	r2, [pc, #592]	; (8005d90 <UART_SetConfig+0x5c4>)
 8005b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d305      	bcc.n	8005b6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d903      	bls.n	8005b72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b70:	e113      	b.n	8005d9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2200      	movs	r2, #0
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	60fa      	str	r2, [r7, #12]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4a84      	ldr	r2, [pc, #528]	; (8005d90 <UART_SetConfig+0x5c4>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2200      	movs	r2, #0
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b94:	f7fa fb48 	bl	8000228 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	020b      	lsls	r3, r1, #8
 8005baa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bae:	0202      	lsls	r2, r0, #8
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	6849      	ldr	r1, [r1, #4]
 8005bb4:	0849      	lsrs	r1, r1, #1
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	4605      	mov	r5, r0
 8005bbc:	eb12 0804 	adds.w	r8, r2, r4
 8005bc0:	eb43 0905 	adc.w	r9, r3, r5
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	469a      	mov	sl, r3
 8005bcc:	4693      	mov	fp, r2
 8005bce:	4652      	mov	r2, sl
 8005bd0:	465b      	mov	r3, fp
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb27 	bl	8000228 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4613      	mov	r3, r2
 8005be0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d308      	bcc.n	8005bfc <UART_SetConfig+0x430>
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d204      	bcs.n	8005bfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a3a      	ldr	r2, [r7, #32]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e0ce      	b.n	8005d9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c02:	e0ca      	b.n	8005d9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	d166      	bne.n	8005cdc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d827      	bhi.n	8005c66 <UART_SetConfig+0x49a>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x450>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c67 	.word	0x08005c67
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c67 	.word	0x08005c67
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe fe82 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe fe94 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4e:	e010      	b.n	8005c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c50:	4b4e      	ldr	r3, [pc, #312]	; (8005d8c <UART_SetConfig+0x5c0>)
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c54:	e00d      	b.n	8005c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c56:	f7fe fe09 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8090 	beq.w	8005d9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	4a44      	ldr	r2, [pc, #272]	; (8005d90 <UART_SetConfig+0x5c4>)
 8005c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8c:	005a      	lsls	r2, r3, #1
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d916      	bls.n	8005cd4 <UART_SetConfig+0x508>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d212      	bcs.n	8005cd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f023 030f 	bic.w	r3, r3, #15
 8005cb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	8bfb      	ldrh	r3, [r7, #30]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	8bfa      	ldrh	r2, [r7, #30]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e062      	b.n	8005d9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cda:	e05e      	b.n	8005d9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d828      	bhi.n	8005d36 <UART_SetConfig+0x56a>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0x520>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	08005d37 	.word	0x08005d37
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08005d37 	.word	0x08005d37
 8005d04:	08005d37 	.word	0x08005d37
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	08005d2f 	.word	0x08005d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d10:	f7fe fe1a 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005d14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d16:	e014      	b.n	8005d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d18:	f7fe fe2c 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8005d1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d1e:	e010      	b.n	8005d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <UART_SetConfig+0x5c0>)
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d24:	e00d      	b.n	8005d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d26:	f7fe fda1 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8005d2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d34:	e005      	b.n	8005d42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d40:	bf00      	nop
    }

    if (pclk != 0U)
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d028      	beq.n	8005d9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <UART_SetConfig+0x5c4>)
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d910      	bls.n	8005d94 <UART_SetConfig+0x5c8>
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d20c      	bcs.n	8005d94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x5ce>
 8005d86:	bf00      	nop
 8005d88:	40008000 	.word	0x40008000
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	0800694c 	.word	0x0800694c
      }
      else
      {
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005db6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3730      	adds	r7, #48	; 0x30
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01a      	beq.n	8005eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec2:	d10a      	bne.n	8005eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b098      	sub	sp, #96	; 0x60
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f18:	f7fb fb1e 	bl	8001558 <HAL_GetTick>
 8005f1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d12f      	bne.n	8005f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f34:	2200      	movs	r2, #0
 8005f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f88e 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d022      	beq.n	8005f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f64:	647b      	str	r3, [r7, #68]	; 0x44
 8005f66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e063      	b.n	8006054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d149      	bne.n	800602e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f857 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d03c      	beq.n	800602e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006006:	61fa      	str	r2, [r7, #28]
 8006008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	617b      	str	r3, [r7, #20]
   return(result);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e012      	b.n	8006054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3758      	adds	r7, #88	; 0x58
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	e04f      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d04b      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fb fa6f 	bl	8001558 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <UART_WaitOnFlagUntilTimeout+0x30>
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e04e      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d037      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d034      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d031      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d110      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2208      	movs	r2, #8
 80060be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f920 	bl	8006306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2208      	movs	r2, #8
 80060ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e029      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e8:	d111      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f906 	bl	8006306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e00f      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d0a0      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b096      	sub	sp, #88	; 0x58
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2222      	movs	r2, #34	; 0x22
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616a:	2b00      	cmp	r3, #0
 800616c:	d02d      	beq.n	80061ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006174:	4a40      	ldr	r2, [pc, #256]	; (8006278 <UART_Start_Receive_DMA+0x140>)
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617e:	4a3f      	ldr	r2, [pc, #252]	; (800627c <UART_Start_Receive_DMA+0x144>)
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006188:	4a3d      	ldr	r2, [pc, #244]	; (8006280 <UART_Start_Receive_DMA+0x148>)
 800618a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006192:	2200      	movs	r2, #0
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	4619      	mov	r1, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	461a      	mov	r2, r3
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	f7fb fbba 	bl	8001924 <HAL_DMA_Start_IT>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2210      	movs	r2, #16
 80061ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e051      	b.n	800626e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d018      	beq.n	8006204 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	657b      	str	r3, [r7, #84]	; 0x54
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	653b      	str	r3, [r7, #80]	; 0x50
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006224:	637a      	str	r2, [r7, #52]	; 0x34
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800622a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006258:	623a      	str	r2, [r7, #32]
 800625a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	61bb      	str	r3, [r7, #24]
   return(result);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3758      	adds	r7, #88	; 0x58
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	080063d3 	.word	0x080063d3
 800627c:	080064ff 	.word	0x080064ff
 8006280:	0800653d 	.word	0x0800653d

08006284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b08f      	sub	sp, #60	; 0x3c
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	61fb      	str	r3, [r7, #28]
   return(result);
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e6      	bne.n	800628c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062d4:	633b      	str	r3, [r7, #48]	; 0x30
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	61ba      	str	r2, [r7, #24]
 80062e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6979      	ldr	r1, [r7, #20]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	613b      	str	r3, [r7, #16]
   return(result);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e5      	bne.n	80062be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80062fa:	bf00      	nop
 80062fc:	373c      	adds	r7, #60	; 0x3c
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006306:	b480      	push	{r7}
 8006308:	b095      	sub	sp, #84	; 0x54
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632c:	643b      	str	r3, [r7, #64]	; 0x40
 800632e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e3      	bne.n	8006340 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d118      	bne.n	80063b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	60bb      	str	r3, [r7, #8]
   return(result);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f023 0310 	bic.w	r3, r3, #16
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	613b      	str	r3, [r7, #16]
   return(result);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063c6:	bf00      	nop
 80063c8:	3754      	adds	r7, #84	; 0x54
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b09c      	sub	sp, #112	; 0x70
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d171      	bne.n	80064d2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800640a:	66bb      	str	r3, [r7, #104]	; 0x68
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006414:	65bb      	str	r3, [r7, #88]	; 0x58
 8006416:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800641a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	667b      	str	r3, [r7, #100]	; 0x64
 8006440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006448:	647a      	str	r2, [r7, #68]	; 0x44
 800644a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800644e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	623b      	str	r3, [r7, #32]
   return(result);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006472:	663b      	str	r3, [r7, #96]	; 0x60
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800647c:	633a      	str	r2, [r7, #48]	; 0x30
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d118      	bne.n	80064d2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0310 	bic.w	r3, r3, #16
 80064b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	69b9      	ldr	r1, [r7, #24]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	617b      	str	r3, [r7, #20]
   return(result);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	2200      	movs	r2, #0
 80064d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d107      	bne.n	80064f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064e6:	4619      	mov	r1, r3
 80064e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064ea:	f7ff f963 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ee:	e002      	b.n	80064f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064f2:	f7ff f941 	bl	8005778 <HAL_UART_RxCpltCallback>
}
 80064f6:	bf00      	nop
 80064f8:	3770      	adds	r7, #112	; 0x70
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d109      	bne.n	800652e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	b29b      	uxth	r3, r3
 8006524:	4619      	mov	r1, r3
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff f944 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800652c:	e002      	b.n	8006534 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff f92c 	bl	800578c <HAL_UART_RxHalfCpltCallback>
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006558:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d109      	bne.n	800657c <UART_DMAError+0x40>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b21      	cmp	r3, #33	; 0x21
 800656c:	d106      	bne.n	800657c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006576:	6978      	ldr	r0, [r7, #20]
 8006578:	f7ff fe84 	bl	8006284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d109      	bne.n	800659e <UART_DMAError+0x62>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b22      	cmp	r3, #34	; 0x22
 800658e:	d106      	bne.n	800659e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f7ff feb4 	bl	8006306 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f043 0210 	orr.w	r2, r3, #16
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff f8f6 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff f8e0 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	613b      	str	r3, [r7, #16]
   return(result);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f897 	bl	8005764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006636:	bf00      	nop
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_UARTEx_DisableFifoMode+0x16>
 800668c:	2302      	movs	r3, #2
 800668e:	e027      	b.n	80066e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006700:	2302      	movs	r3, #2
 8006702:	e02d      	b.n	8006760 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f84f 	bl	80067e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02d      	b.n	80067dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2224      	movs	r2, #36	; 0x24
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f811 	bl	80067e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006804:	e031      	b.n	800686a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006806:	2308      	movs	r3, #8
 8006808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800680a:	2308      	movs	r3, #8
 800680c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0e5b      	lsrs	r3, r3, #25
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	0f5b      	lsrs	r3, r3, #29
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	7b3a      	ldrb	r2, [r7, #12]
 8006832:	4911      	ldr	r1, [pc, #68]	; (8006878 <UARTEx_SetNbDataToProcess+0x94>)
 8006834:	5c8a      	ldrb	r2, [r1, r2]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800683a:	7b3a      	ldrb	r2, [r7, #12]
 800683c:	490f      	ldr	r1, [pc, #60]	; (800687c <UARTEx_SetNbDataToProcess+0x98>)
 800683e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006840:	fb93 f3f2 	sdiv	r3, r3, r2
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	7b7a      	ldrb	r2, [r7, #13]
 8006850:	4909      	ldr	r1, [pc, #36]	; (8006878 <UARTEx_SetNbDataToProcess+0x94>)
 8006852:	5c8a      	ldrb	r2, [r1, r2]
 8006854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006858:	7b7a      	ldrb	r2, [r7, #13]
 800685a:	4908      	ldr	r1, [pc, #32]	; (800687c <UARTEx_SetNbDataToProcess+0x98>)
 800685c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	08006964 	.word	0x08006964
 800687c:	0800696c 	.word	0x0800696c

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4d0d      	ldr	r5, [pc, #52]	; (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006896:	1b64      	subs	r4, r4, r5
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2600      	movs	r6, #0
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4d0b      	ldr	r5, [pc, #44]	; (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	; (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 f818 	bl	80068d8 <_init>
 80068a8:	1b64      	subs	r4, r4, r5
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2600      	movs	r6, #0
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	0800697c 	.word	0x0800697c
 80068cc:	0800697c 	.word	0x0800697c
 80068d0:	0800697c 	.word	0x0800697c
 80068d4:	08006980 	.word	0x08006980

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
