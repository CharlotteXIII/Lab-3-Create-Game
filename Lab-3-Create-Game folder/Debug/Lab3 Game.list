
Lab3 Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e8  080043e8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f0  080043f0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080043f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000018  08004410  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004410  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107de  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002216  00000000  00000000  00030869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a33  00000000  00000000  00033798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253f0  00000000  00000000  000341cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111b9  00000000  00000000  000595bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec1ca  00000000  00000000  0006a774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003604  00000000  00000000  00156940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00159f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004390 	.word	0x08004390

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08004390 	.word	0x08004390

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fba1 	bl	8000c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f80d 	bl	800054a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f914 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f8e0 	bl	80006f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000538:	f000 f892 	bl	8000660 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800053c:	f000 f850 	bl	80005e0 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxSend();
 8000540:	f000 f97a 	bl	8000838 <TxSend>
	  Dummy();
 8000544:	f000 f994 	bl	8000870 <Dummy>
	  TxSend();
 8000548:	e7fa      	b.n	8000540 <main+0x1c>

0800054a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b094      	sub	sp, #80	; 0x50
 800054e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	2238      	movs	r2, #56	; 0x38
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f003 feed 	bl	8004338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056c:	2000      	movs	r0, #0
 800056e:	f001 fb3b 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000588:	2304      	movs	r3, #4
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058c:	2355      	movs	r3, #85	; 0x55
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fbd5 	bl	8001d50 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ac:	f000 f978 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fed3 	bl	8002374 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005d4:	f000 f964 	bl	80008a0 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C1_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C1_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_I2C1_Init+0x74>)
 800061c:	f001 f9b1 	bl	8001982 <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f93b 	bl	80008a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <MX_I2C1_Init+0x74>)
 800062e:	f001 fa43 	bl	8001ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f932 	bl	80008a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_I2C1_Init+0x74>)
 8000640:	f001 fa85 	bl	8001b4e <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f929 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000034 	.word	0x20000034
 8000658:	40005400 	.word	0x40005400
 800065c:	30a0a7fb 	.word	0x30a0a7fb

08000660 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <MX_LPUART1_UART_Init+0x94>)
 8000668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000678:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000686:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006a8:	f002 face 	bl	8002c48 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80006b2:	f000 f8f5 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006ba:	f003 fd72 	bl	80041a2 <HAL_UARTEx_SetTxFifoThreshold>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80006c4:	f000 f8ec 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006cc:	f003 fda7 	bl	800421e <HAL_UARTEx_SetRxFifoThreshold>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80006d6:	f000 f8e3 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006dc:	f003 fd28 	bl	8004130 <HAL_UARTEx_DisableFifoMode>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80006e6:	f000 f8db 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000088 	.word	0x20000088
 80006f4:	40008000 	.word	0x40008000

080006f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_DMA_Init+0x60>)
 8000700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_DMA_Init+0x60>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6493      	str	r3, [r2, #72]	; 0x48
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_DMA_Init+0x60>)
 800070c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_DMA_Init+0x60>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_DMA_Init+0x60>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6493      	str	r3, [r2, #72]	; 0x48
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_DMA_Init+0x60>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200b      	movs	r0, #11
 8000734:	f000 fbe7 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000738:	200b      	movs	r0, #11
 800073a:	f000 fbfe 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200c      	movs	r0, #12
 8000744:	f000 fbdf 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000748:	200c      	movs	r0, #12
 800074a:	f000 fbf6 	bl	8000f3a <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a2e      	ldr	r2, [pc, #184]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a28      	ldr	r2, [pc, #160]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a22      	ldr	r2, [pc, #136]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 f87d 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <MX_GPIO_Init+0xd8>)
 80007f6:	f000 feed 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fede 	bl	80015d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f000 fb72 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f000 fb89 	bl	8000f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800

08000838 <TxSend>:

/* USER CODE BEGIN 4 */
void TxSend(){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if(A==1){
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <TxSend+0x2c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10c      	bne.n	800085e <TxSend+0x26>
	HAL_UART_Transmit_DMA(&hlpuart1,Tx, strlen((char*)Tx));
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <TxSend+0x30>)
 8000846:	f7ff fce7 	bl	8000218 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29b      	uxth	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	4905      	ldr	r1, [pc, #20]	; (8000868 <TxSend+0x30>)
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <TxSend+0x34>)
 8000854:	f002 fa48 	bl	8002ce8 <HAL_UART_Transmit_DMA>
	A=0;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <TxSend+0x2c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	}
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001dc 	.word	0x200001dc
 8000868:	20000000 	.word	0x20000000
 800086c:	20000088 	.word	0x20000088

08000870 <Dummy>:
void Dummy(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp){
 8000874:	f000 fa60 	bl	8000d38 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <Dummy+0x2c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d30a      	bcc.n	8000898 <Dummy+0x28>
		timestamp = HAL_GetTick()+100;
 8000882:	f000 fa59 	bl	8000d38 <HAL_GetTick>
 8000886:	4603      	mov	r3, r0
 8000888:	3364      	adds	r3, #100	; 0x64
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <Dummy+0x2c>)
 800088c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800088e:	2120      	movs	r1, #32
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 f838 	bl	8001908 <HAL_GPIO_TogglePin>
	}
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200001e0 	.word	0x200001e0

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008e2:	f001 fa25 	bl	8001d30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0a0      	sub	sp, #128	; 0x80
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	2254      	movs	r2, #84	; 0x54
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fd0f 	bl	8004338 <memset>
  if(hi2c->Instance==I2C1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <HAL_I2C_MspInit+0xe0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d153      	bne.n	80009cc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4618      	mov	r0, r3
 8000932:	f001 ff3b 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800093c:	f7ff ffb0 	bl	80008a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000974:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fe20 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000998:	2312      	movs	r3, #18
 800099a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a4:	2304      	movs	r3, #4
 80009a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009ac:	4619      	mov	r1, r3
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <HAL_I2C_MspInit+0xe8>)
 80009b0:	f000 fe10 	bl	80015d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 80009ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009be:	6593      	str	r3, [r2, #88]	; 0x58
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_I2C_MspInit+0xe4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3780      	adds	r7, #128	; 0x80
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09e      	sub	sp, #120	; 0x78
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2254      	movs	r2, #84	; 0x54
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fc99 	bl	8004338 <memset>
  if(huart->Instance==LPUART1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <HAL_UART_MspInit+0x160>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	f040 8092 	bne.w	8000b36 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a12:	2320      	movs	r3, #32
 8000a14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fec4 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a2a:	f7ff ff39 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a2e:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a32:	4a44      	ldr	r2, [pc, #272]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a3a:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <HAL_UART_MspInit+0x164>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fdaa 	bl	80015d4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8000a80:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000a82:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <HAL_UART_MspInit+0x16c>)
 8000a84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000a88:	2223      	movs	r2, #35	; 0x23
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000a8e:	2210      	movs	r2, #16
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000ab6:	4824      	ldr	r0, [pc, #144]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000ab8:	f000 fa5a 	bl	8000f70 <HAL_DMA_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000ac2:	f7ff feed 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000aca:	67da      	str	r2, [r3, #124]	; 0x7c
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <HAL_UART_MspInit+0x168>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <HAL_UART_MspInit+0x174>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000ada:	2222      	movs	r2, #34	; 0x22
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000afe:	2220      	movs	r2, #32
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000b0a:	f000 fa31 	bl	8000f70 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000b14:	f7ff fec4 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <HAL_UART_MspInit+0x170>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	205b      	movs	r0, #91	; 0x5b
 8000b2c:	f000 f9eb 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b30:	205b      	movs	r0, #91	; 0x5b
 8000b32:	f000 fa02 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3778      	adds	r7, #120	; 0x78
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40008000 	.word	0x40008000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	2000011c 	.word	0x2000011c
 8000b4c:	40020008 	.word	0x40020008
 8000b50:	2000017c 	.word	0x2000017c
 8000b54:	4002001c 	.word	0x4002001c

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f8b6 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <DMA1_Channel1_IRQHandler+0x10>)
 8000bb2:	f000 fbc0 	bl	8001336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000011c 	.word	0x2000011c

08000bc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA1_Channel2_IRQHandler+0x10>)
 8000bc6:	f000 fbb6 	bl	8001336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000017c 	.word	0x2000017c

08000bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bdc:	f000 feae 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <LPUART1_IRQHandler+0x10>)
 8000bea:	f002 f8fd 	bl	8002de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000088 	.word	0x20000088

08000bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f003 fb7d 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4e:	f7ff fc69 	bl	8000524 <main>

08000c52 <LoopForever>:

LoopForever:
    b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   r0, =_estack
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c60:	080043f8 	.word	0x080043f8
  ldr r2, =_sbss
 8000c64:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c68:	200001e8 	.word	0x200001e8

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>

08000c6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f939 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f80e 	bl	8000ca0 <HAL_InitTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	e001      	b.n	8000c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c90:	f7ff fe0c 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c94:	79fb      	ldrb	r3, [r7, #7]

}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_InitTick+0x68>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d022      	beq.n	8000cfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_InitTick+0x6c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_InitTick+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f944 	bl	8000f56 <HAL_SYSTICK_Config>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10f      	bne.n	8000cf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d809      	bhi.n	8000cee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce2:	f000 f910 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_InitTick+0x70>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e007      	b.n	8000cfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e004      	b.n	8000cfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000014 	.word	0x20000014
 8000d0c:	2000000c 	.word	0x2000000c
 8000d10:	20000010 	.word	0x20000010

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d24:	6013      	str	r3, [r2, #0]
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	200001e4 	.word	0x200001e4
 8000d34:	20000014 	.word	0x20000014

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200001e4 	.word	0x200001e4

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff40 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff90 	bl	8000e44 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5f 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff33 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa4 	bl	8000eac <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e08d      	b.n	800109e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_DMA_Init+0x138>)
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d80f      	bhi.n	8000fae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <HAL_DMA_Init+0x13c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	4a45      	ldr	r2, [pc, #276]	; (80010b0 <HAL_DMA_Init+0x140>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	009a      	lsls	r2, r3, #2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <HAL_DMA_Init+0x144>)
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
 8000fac:	e00e      	b.n	8000fcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <HAL_DMA_Init+0x148>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <HAL_DMA_Init+0x140>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	009a      	lsls	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a3c      	ldr	r2, [pc, #240]	; (80010bc <HAL_DMA_Init+0x14c>)
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fa76 	bl	8001510 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800102c:	d102      	bne.n	8001034 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001048:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d010      	beq.n	8001074 <HAL_DMA_Init+0x104>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d80c      	bhi.n	8001074 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 fa96 	bl	800158c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e008      	b.n	8001086 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020407 	.word	0x40020407
 80010ac:	bffdfff8 	.word	0xbffdfff8
 80010b0:	cccccccd 	.word	0xcccccccd
 80010b4:	40020000 	.word	0x40020000
 80010b8:	bffdfbf8 	.word	0xbffdfbf8
 80010bc:	40020400 	.word	0x40020400

080010c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x20>
 80010dc:	2302      	movs	r3, #2
 80010de:	e066      	b.n	80011ae <HAL_DMA_Start_IT+0xee>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d155      	bne.n	80011a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f9bb 	bl	8001494 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 020e 	orr.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00f      	b.n	8001158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 020a 	orr.w	r2, r2, #10
 8001156:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001174:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800118c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e005      	b.n	80011ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011a8:	2302      	movs	r3, #2
 80011aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d005      	beq.n	80011da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2204      	movs	r2, #4
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e037      	b.n	800124a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 020e 	bic.w	r2, r2, #14
 80011e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 021f 	and.w	r2, r3, #31
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001226:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001248:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d00d      	beq.n	800129c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e047      	b.n	800132c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001300:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800130a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
    }
  }
  return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2204      	movs	r2, #4
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d026      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x7a>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d021      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0204 	bic.w	r2, r2, #4
 8001388:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f003 021f 	and.w	r2, r3, #31
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	2104      	movs	r1, #4
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d071      	beq.n	800148a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013ae:	e06c      	b.n	800148a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2202      	movs	r2, #2
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d02e      	beq.n	8001422 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d029      	beq.n	8001422 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10b      	bne.n	80013f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 020a 	bic.w	r2, r2, #10
 80013ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	2102      	movs	r1, #2
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d038      	beq.n	800148a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001420:	e033      	b.n	800148a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	2208      	movs	r2, #8
 800142c:	409a      	lsls	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d02a      	beq.n	800148c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d025      	beq.n	800148c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 020e 	bic.w	r2, r2, #14
 800144e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800148a:	bf00      	nop
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f003 021f 	and.w	r2, r3, #31
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d108      	bne.n	80014f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014f2:	e007      	b.n	8001504 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001520:	429a      	cmp	r2, r3
 8001522:	d802      	bhi.n	800152a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e001      	b.n	800152e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800152c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3b08      	subs	r3, #8
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	009a      	lsls	r2, r3, #2
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4413      	add	r3, r2
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800155a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2201      	movs	r2, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	651a      	str	r2, [r3, #80]	; 0x50
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40020407 	.word	0x40020407
 800157c:	40020800 	.word	0x40020800
 8001580:	40020820 	.word	0x40020820
 8001584:	cccccccd 	.word	0xcccccccd
 8001588:	40020880 	.word	0x40020880

0800158c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	1000823f 	.word	0x1000823f
 80015d0:	40020940 	.word	0x40020940

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015e2:	e15a      	b.n	800189a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 814c 	beq.w	8001894 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001610:	2b02      	cmp	r3, #2
 8001612:	d130      	bne.n	8001676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164a:	2201      	movs	r2, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 0201 	and.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b03      	cmp	r3, #3
 8001680:	d017      	beq.n	80016b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d123      	bne.n	8001706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0203 	and.w	r2, r3, #3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a6 	beq.w	8001894 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001748:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6613      	str	r3, [r2, #96]	; 0x60
 8001754:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 8001756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001760:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178a:	d01f      	beq.n	80017cc <HAL_GPIO_Init+0x1f8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d019      	beq.n	80017c8 <HAL_GPIO_Init+0x1f4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1f0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1ec>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1e4>
 80017b4:	2305      	movs	r3, #5
 80017b6:	e00a      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b8:	2306      	movs	r3, #6
 80017ba:	e008      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017bc:	2304      	movs	r3, #4
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017cc:	2300      	movs	r3, #0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017de:	4937      	ldr	r1, [pc, #220]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001810:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f ae9d 	bne.w	80015e4 <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43d9      	mvns	r1, r3
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	400b      	ands	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f806 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e08d      	b.n	8001ab0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe ffa3 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2224      	movs	r2, #36	; 0x24
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d108      	bne.n	8001a24 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e007      	b.n	8001a34 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69d9      	ldr	r1, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d138      	bne.n	8001b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e032      	b.n	8001b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d139      	bne.n	8001bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e033      	b.n	8001bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2224      	movs	r2, #36	; 0x24
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d141      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d131      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3a:	e002      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d102      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d158      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e057      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c78:	e04d      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d141      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d131      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2232      	movs	r2, #50	; 0x32
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc6:	e002      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d112      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e011      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d04:	e007      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40007000 	.word	0x40007000
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e2fe      	b.n	8002360 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3e>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b8d      	ldr	r3, [pc, #564]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e2d9      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a84      	ldr	r2, [pc, #528]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7e      	ldr	r2, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7b      	ldr	r2, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a77      	ldr	r2, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a74      	ldr	r2, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ff96 	bl	8000d38 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe ff92 	bl	8000d38 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e29e      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ff82 	bl	8000d38 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe ff7e 	bl	8000d38 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e28a      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	4b60      	ldr	r3, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x136>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_OscConfig+0x13c>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d11f      	bne.n	8001ecc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x154>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e25d      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4946      	ldr	r1, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <HAL_RCC_OscConfig+0x280>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe feef 	bl	8000ca0 <HAL_InitTick>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e249      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff2a 	bl	8000d38 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7fe ff26 	bl	8000d38 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e232      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	492d      	ldr	r1, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff06 	bl	8000d38 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7fe ff02 	bl	8000d38 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e20e      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1e0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d041      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7fe fedf 	bl	8000d38 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fedb 	bl	8000d38 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1e7      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ef      	beq.n	8001f7e <HAL_RCC_OscConfig+0x22e>
 8001f9e:	e020      	b.n	8001fe2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fec2 	bl	8000d38 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb6:	e00d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe febe 	bl	8000d38 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d906      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1ca      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ea      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80a6 	beq.w	800213c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x2b4>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x2b6>
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a7e      	ldr	r2, [pc, #504]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7fe fe7b 	bl	8000d38 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7fe fe77 	bl	8000d38 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e183      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002058:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d108      	bne.n	800207e <HAL_RCC_OscConfig+0x32e>
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a65      	ldr	r2, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	e024      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d110      	bne.n	80020a8 <HAL_RCC_OscConfig+0x358>
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fe32 	bl	8000d38 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fe2e 	bl	8000d38 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e138      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ed      	beq.n	80020d8 <HAL_RCC_OscConfig+0x388>
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe fe1b 	bl	8000d38 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fe17 	bl	8000d38 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e121      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ed      	bne.n	8002106 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe fdea 	bl	8000d38 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002168:	f7fe fde6 	bl	8000d38 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0f2      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x418>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fdcd 	bl	8000d38 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a2:	f7fe fdc9 	bl	8000d38 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0d5      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80c9 	beq.w	800235e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	f000 8083 	beq.w	80022e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d15e      	bne.n	80022a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fda3 	bl	8000d38 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fd9f 	bl	8000d38 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d905      	bls.n	8002210 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0ab      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ec      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221c:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b52      	ldr	r3, [pc, #328]	; (800236c <HAL_RCC_OscConfig+0x61c>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6a11      	ldr	r1, [r2, #32]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222c:	3a01      	subs	r2, #1
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800223e:	0852      	lsrs	r2, r2, #1
 8002240:	3a01      	subs	r2, #1
 8002242:	0552      	lsls	r2, r2, #21
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0652      	lsls	r2, r2, #25
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002256:	06d2      	lsls	r2, r2, #27
 8002258:	430a      	orrs	r2, r1
 800225a:	4943      	ldr	r1, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800226c:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a3d      	ldr	r2, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fd5e 	bl	8000d38 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fd5a 	bl	8000d38 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e066      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x530>
 800229e:	e05e      	b.n	800235e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a30      	ldr	r2, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fd44 	bl	8000d38 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fd40 	bl	8000d38 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04c      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4924      	ldr	r1, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_OscConfig+0x620>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60cb      	str	r3, [r1, #12]
 80022de:	e03e      	b.n	800235e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e039      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_OscConfig+0x618>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d12c      	bne.n	800235a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d123      	bne.n	800235a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d11b      	bne.n	800235a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d113      	bne.n	800235a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d109      	bne.n	800235a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	019f800c 	.word	0x019f800c
 8002370:	feeefffc 	.word	0xfeeefffc

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e11e      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b91      	ldr	r3, [pc, #580]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b8e      	ldr	r3, [pc, #568]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	498c      	ldr	r1, [pc, #560]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e106      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d073      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d129      	bne.n	8002424 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0f4      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023e0:	f000 f99e 	bl	8002720 <RCC_GetSysClockFreqFromPLLSource>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4a7c      	ldr	r2, [pc, #496]	; (80025dc <HAL_RCC_ClockConfig+0x268>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d93f      	bls.n	800246e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ee:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002402:	2b00      	cmp	r3, #0
 8002404:	d033      	beq.n	800246e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12f      	bne.n	800246e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800240e:	4b72      	ldr	r3, [pc, #456]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002416:	4a70      	ldr	r2, [pc, #448]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e024      	b.n	800246e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d107      	bne.n	800243c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0c6      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0be      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800244c:	f000 f8ce 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8002450:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_RCC_ClockConfig+0x268>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d909      	bls.n	800246e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002462:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4957      	ldr	r1, [pc, #348]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fc5a 	bl	8000d38 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fc56 	bl	8000d38 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e095      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a42      	ldr	r2, [pc, #264]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024e0:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024e8:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4936      	ldr	r1, [pc, #216]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
 8002502:	e008      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d105      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800250a:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 8002510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002514:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d21d      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 020f 	bic.w	r2, r3, #15
 800252c:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002534:	f7fe fc00 	bl	8000d38 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fbfc 	bl	8000d38 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03b      	b.n	80025ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x260>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d1ed      	bne.n	800253c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4917      	ldr	r1, [pc, #92]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490f      	ldr	r1, [pc, #60]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259e:	f000 f825 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490c      	ldr	r1, [pc, #48]	; (80025e0 <HAL_RCC_ClockConfig+0x26c>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb6c 	bl	8000ca0 <HAL_InitTick>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	04c4b400 	.word	0x04c4b400
 80025e0:	080043a8 	.word	0x080043a8
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	20000010 	.word	0x20000010

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e047      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d102      	bne.n	8002616 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e03e      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d136      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3301      	adds	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d10c      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264a:	68d2      	ldr	r2, [r2, #12]
 800264c:	0a12      	lsrs	r2, r2, #8
 800264e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
      break;
 8002658:	e00c      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	0a12      	lsrs	r2, r2, #8
 8002668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
      break;
 8002672:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0e5b      	lsrs	r3, r3, #25
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e001      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002694:	693b      	ldr	r3, [r7, #16]
}
 8002696:	4618      	mov	r0, r3
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	016e3600 	.word	0x016e3600

080026b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4904      	ldr	r1, [pc, #16]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080043b8 	.word	0x080043b8

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f8:	f7ff ffda 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <HAL_RCC_GetPCLK2Freq+0x28>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	080043b8 	.word	0x080043b8

08002720 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d10c      	bne.n	800275e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274e:	68d2      	ldr	r2, [r2, #12]
 8002750:	0a12      	lsrs	r2, r2, #8
 8002752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
    break;
 800275c:	e00c      	b.n	8002778 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	0a12      	lsrs	r2, r2, #8
 800276c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    break;
 8002776:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0e5b      	lsrs	r3, r3, #25
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002792:	687b      	ldr	r3, [r7, #4]
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	016e3600 	.word	0x016e3600
 80027a8:	00f42400 	.word	0x00f42400

080027ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8098 	beq.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002802:	f7fe fa99 	bl	8000d38 <HAL_GetTick>
 8002806:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002808:	e009      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fa95 	bl	8000d38 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
        break;
 800281c:	e005      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ef      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d159      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	d019      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002856:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe fa55 	bl	8000d38 <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	e00b      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe fa51 	bl	8000d38 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d902      	bls.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	74fb      	strb	r3, [r7, #19]
            break;
 80028a8:	e006      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ec      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028d4:	e008      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	74bb      	strb	r3, [r7, #18]
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4ba7      	ldr	r3, [pc, #668]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002906:	4ba1      	ldr	r3, [pc, #644]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f023 0203 	bic.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002928:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 020c 	bic.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4995      	ldr	r1, [pc, #596]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800294a:	4b90      	ldr	r3, [pc, #576]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	498c      	ldr	r1, [pc, #560]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800296c:	4b87      	ldr	r3, [pc, #540]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	4984      	ldr	r1, [pc, #528]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298e:	4b7f      	ldr	r3, [pc, #508]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	497b      	ldr	r1, [pc, #492]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029b0:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4973      	ldr	r1, [pc, #460]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d2:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	496a      	ldr	r1, [pc, #424]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f4:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4962      	ldr	r1, [pc, #392]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a16:	4b5d      	ldr	r3, [pc, #372]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	4959      	ldr	r1, [pc, #356]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a38:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	4951      	ldr	r1, [pc, #324]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5a:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4948      	ldr	r1, [pc, #288]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4940      	ldr	r1, [pc, #256]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	4932      	ldr	r1, [pc, #200]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ade:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	4924      	ldr	r1, [pc, #144]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d019      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a02      	ldr	r2, [pc, #8]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b86:	60d3      	str	r3, [r2, #12]
 8002b88:	e002      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4926      	ldr	r1, [pc, #152]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	4918      	ldr	r1, [pc, #96]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	490a      	ldr	r1, [pc, #40]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c38:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fd feb7 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fef2 	bl	8003a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fbf3 	bl	8003484 <UART_SetConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e01b      	b.n	8002ce0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 ff71 	bl	8003bc0 <UART_CheckIdleState>
 8002cde:	4603      	mov	r3, r0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d167      	bne.n	8002dd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_UART_Transmit_DMA+0x24>
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e060      	b.n	8002dd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d028      	beq.n	8002d90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_UART_Transmit_DMA+0xf4>)
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_UART_Transmit_DMA+0xf8>)
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_UART_Transmit_DMA+0xfc>)
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	4619      	mov	r1, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3328      	adds	r3, #40	; 0x28
 8002d6e:	461a      	mov	r2, r3
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	f7fe f9a5 	bl	80010c0 <HAL_DMA_Start_IT>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e020      	b.n	8002dd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	613b      	str	r3, [r7, #16]
   return(result);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	623a      	str	r2, [r7, #32]
 8002dba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	69f9      	ldr	r1, [r7, #28]
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	08003f3d 	.word	0x08003f3d
 8002de0:	08003fd7 	.word	0x08003fd7
 8002de4:	08003ff3 	.word	0x08003ff3

08002de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0ba      	sub	sp, #232	; 0xe8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e16:	4013      	ands	r3, r2
 8002e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11b      	bne.n	8002e5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 82e3 	beq.w	8003418 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
      }
      return;
 8002e5a:	e2dd      	b.n	8003418 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8123 	beq.w	80030ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e6a:	4b8d      	ldr	r3, [pc, #564]	; (80030a0 <HAL_UART_IRQHandler+0x2b8>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_UART_IRQHandler+0x2bc>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8116 	beq.w	80030ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d011      	beq.n	8002eb0 <HAL_UART_IRQHandler+0xc8>
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d011      	beq.n	8002ee0 <HAL_UART_IRQHandler+0xf8>
 8002ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d011      	beq.n	8002f10 <HAL_UART_IRQHandler+0x128>
 8002eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f2c:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_UART_IRQHandler+0x2b8>)
 8002f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f043 0208 	orr.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_UART_IRQHandler+0x196>
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8249 	beq.w	800341c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d005      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d054      	beq.n	800308c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 ff44 	bl	8003e70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d146      	bne.n	8003084 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800300c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3308      	adds	r3, #8
 800301e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800302e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800303a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1d9      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_UART_IRQHandler+0x2c0>)
 8003054:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe f903 	bl	8001268 <HAL_DMA_Abort_IT>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003076:	4610      	mov	r0, r2
 8003078:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307a:	e00f      	b.n	800309c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9eb 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003082:	e00b      	b.n	800309c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9e7 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308a:	e007      	b.n	800309c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f9e3 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800309a:	e1bf      	b.n	800341c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	bf00      	nop
    return;
 800309e:	e1bd      	b.n	800341c <HAL_UART_IRQHandler+0x634>
 80030a0:	10000001 	.word	0x10000001
 80030a4:	04000120 	.word	0x04000120
 80030a8:	08004073 	.word	0x08004073

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8153 	bne.w	800335c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 814c 	beq.w	800335c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8145 	beq.w	800335c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	f040 80bb 	bne.w	8003260 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 818f 	beq.w	8003420 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310c:	429a      	cmp	r2, r3
 800310e:	f080 8187 	bcs.w	8003420 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8087 	bne.w	800323e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800315a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800315e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003166:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1da      	bne.n	8003130 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3308      	adds	r3, #8
 8003180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800318a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3308      	adds	r3, #8
 800319a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800319e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e1      	bne.n	800317a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e3      	bne.n	80031b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800321e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003220:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e4      	bne.n	80031fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd ffbc 	bl	80011b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003250:	b29b      	uxth	r3, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f907 	bl	800346c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800325e:	e0df      	b.n	8003420 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80d1 	beq.w	8003424 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80cc 	beq.w	8003424 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	623b      	str	r3, [r7, #32]
   return(result);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ea:	633a      	str	r2, [r7, #48]	; 0x30
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e1      	bne.n	80032c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	69b9      	ldr	r1, [r7, #24]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	617b      	str	r3, [r7, #20]
   return(result);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e4      	bne.n	8003312 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800334e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f889 	bl	800346c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800335a:	e063      	b.n	8003424 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800335c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00e      	beq.n	8003386 <HAL_UART_IRQHandler+0x59e>
 8003368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800336c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800337c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 feb8 	bl	80040f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003384:	e051      	b.n	800342a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d014      	beq.n	80033bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800339e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03a      	beq.n	8003428 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    }
    return;
 80033ba:	e035      	b.n	8003428 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_UART_IRQHandler+0x5f4>
 80033c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fe62 	bl	800409e <UART_EndTransmit_IT>
    return;
 80033da:	e026      	b.n	800342a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80033dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_UART_IRQHandler+0x614>
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fe91 	bl	800411c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033fa:	e016      	b.n	800342a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_UART_IRQHandler+0x642>
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340c:	2b00      	cmp	r3, #0
 800340e:	da0c      	bge.n	800342a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fe79 	bl	8004108 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003416:	e008      	b.n	800342a <HAL_UART_IRQHandler+0x642>
      return;
 8003418:	bf00      	nop
 800341a:	e006      	b.n	800342a <HAL_UART_IRQHandler+0x642>
    return;
 800341c:	bf00      	nop
 800341e:	e004      	b.n	800342a <HAL_UART_IRQHandler+0x642>
      return;
 8003420:	bf00      	nop
 8003422:	e002      	b.n	800342a <HAL_UART_IRQHandler+0x642>
      return;
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <HAL_UART_IRQHandler+0x642>
    return;
 8003428:	bf00      	nop
  }
}
 800342a:	37e8      	adds	r7, #232	; 0xe8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b08c      	sub	sp, #48	; 0x30
 800348a:	af00      	add	r7, sp, #0
 800348c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4baa      	ldr	r3, [pc, #680]	; (800375c <UART_SetConfig+0x2d8>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034bc:	430b      	orrs	r3, r1
 80034be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a9f      	ldr	r2, [pc, #636]	; (8003760 <UART_SetConfig+0x2dc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ec:	4313      	orrs	r3, r2
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80034fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f023 010f 	bic.w	r1, r3, #15
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a90      	ldr	r2, [pc, #576]	; (8003764 <UART_SetConfig+0x2e0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d125      	bne.n	8003574 <UART_SetConfig+0xf0>
 8003528:	4b8f      	ldr	r3, [pc, #572]	; (8003768 <UART_SetConfig+0x2e4>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b03      	cmp	r3, #3
 8003534:	d81a      	bhi.n	800356c <UART_SetConfig+0xe8>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <UART_SetConfig+0xb8>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800354d 	.word	0x0800354d
 8003540:	0800355d 	.word	0x0800355d
 8003544:	08003555 	.word	0x08003555
 8003548:	08003565 	.word	0x08003565
 800354c:	2301      	movs	r3, #1
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e116      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003554:	2302      	movs	r3, #2
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e112      	b.n	8003782 <UART_SetConfig+0x2fe>
 800355c:	2304      	movs	r3, #4
 800355e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003562:	e10e      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003564:	2308      	movs	r3, #8
 8003566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356a:	e10a      	b.n	8003782 <UART_SetConfig+0x2fe>
 800356c:	2310      	movs	r3, #16
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003572:	e106      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7c      	ldr	r2, [pc, #496]	; (800376c <UART_SetConfig+0x2e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d138      	bne.n	80035f0 <UART_SetConfig+0x16c>
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <UART_SetConfig+0x2e4>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b0c      	cmp	r3, #12
 800358a:	d82d      	bhi.n	80035e8 <UART_SetConfig+0x164>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <UART_SetConfig+0x110>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035e9 	.word	0x080035e9
 800359c:	080035e9 	.word	0x080035e9
 80035a0:	080035e9 	.word	0x080035e9
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035e9 	.word	0x080035e9
 80035ac:	080035e9 	.word	0x080035e9
 80035b0:	080035e9 	.word	0x080035e9
 80035b4:	080035d1 	.word	0x080035d1
 80035b8:	080035e9 	.word	0x080035e9
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035e1 	.word	0x080035e1
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e0d8      	b.n	8003782 <UART_SetConfig+0x2fe>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e0d4      	b.n	8003782 <UART_SetConfig+0x2fe>
 80035d8:	2304      	movs	r3, #4
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e0d0      	b.n	8003782 <UART_SetConfig+0x2fe>
 80035e0:	2308      	movs	r3, #8
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e0cc      	b.n	8003782 <UART_SetConfig+0x2fe>
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ee:	e0c8      	b.n	8003782 <UART_SetConfig+0x2fe>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a5e      	ldr	r2, [pc, #376]	; (8003770 <UART_SetConfig+0x2ec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d125      	bne.n	8003646 <UART_SetConfig+0x1c2>
 80035fa:	4b5b      	ldr	r3, [pc, #364]	; (8003768 <UART_SetConfig+0x2e4>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003604:	2b30      	cmp	r3, #48	; 0x30
 8003606:	d016      	beq.n	8003636 <UART_SetConfig+0x1b2>
 8003608:	2b30      	cmp	r3, #48	; 0x30
 800360a:	d818      	bhi.n	800363e <UART_SetConfig+0x1ba>
 800360c:	2b20      	cmp	r3, #32
 800360e:	d00a      	beq.n	8003626 <UART_SetConfig+0x1a2>
 8003610:	2b20      	cmp	r3, #32
 8003612:	d814      	bhi.n	800363e <UART_SetConfig+0x1ba>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <UART_SetConfig+0x19a>
 8003618:	2b10      	cmp	r3, #16
 800361a:	d008      	beq.n	800362e <UART_SetConfig+0x1aa>
 800361c:	e00f      	b.n	800363e <UART_SetConfig+0x1ba>
 800361e:	2300      	movs	r3, #0
 8003620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003624:	e0ad      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003626:	2302      	movs	r3, #2
 8003628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362c:	e0a9      	b.n	8003782 <UART_SetConfig+0x2fe>
 800362e:	2304      	movs	r3, #4
 8003630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003634:	e0a5      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003636:	2308      	movs	r3, #8
 8003638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363c:	e0a1      	b.n	8003782 <UART_SetConfig+0x2fe>
 800363e:	2310      	movs	r3, #16
 8003640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003644:	e09d      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <UART_SetConfig+0x2f0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d125      	bne.n	800369c <UART_SetConfig+0x218>
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <UART_SetConfig+0x2e4>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800365a:	2bc0      	cmp	r3, #192	; 0xc0
 800365c:	d016      	beq.n	800368c <UART_SetConfig+0x208>
 800365e:	2bc0      	cmp	r3, #192	; 0xc0
 8003660:	d818      	bhi.n	8003694 <UART_SetConfig+0x210>
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d00a      	beq.n	800367c <UART_SetConfig+0x1f8>
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d814      	bhi.n	8003694 <UART_SetConfig+0x210>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <UART_SetConfig+0x1f0>
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d008      	beq.n	8003684 <UART_SetConfig+0x200>
 8003672:	e00f      	b.n	8003694 <UART_SetConfig+0x210>
 8003674:	2300      	movs	r3, #0
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367a:	e082      	b.n	8003782 <UART_SetConfig+0x2fe>
 800367c:	2302      	movs	r3, #2
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003682:	e07e      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003684:	2304      	movs	r3, #4
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368a:	e07a      	b.n	8003782 <UART_SetConfig+0x2fe>
 800368c:	2308      	movs	r3, #8
 800368e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003692:	e076      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003694:	2310      	movs	r3, #16
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369a:	e072      	b.n	8003782 <UART_SetConfig+0x2fe>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a35      	ldr	r2, [pc, #212]	; (8003778 <UART_SetConfig+0x2f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d12a      	bne.n	80036fc <UART_SetConfig+0x278>
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <UART_SetConfig+0x2e4>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b4:	d01a      	beq.n	80036ec <UART_SetConfig+0x268>
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ba:	d81b      	bhi.n	80036f4 <UART_SetConfig+0x270>
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d00c      	beq.n	80036dc <UART_SetConfig+0x258>
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c6:	d815      	bhi.n	80036f4 <UART_SetConfig+0x270>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <UART_SetConfig+0x250>
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d008      	beq.n	80036e4 <UART_SetConfig+0x260>
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x270>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e052      	b.n	8003782 <UART_SetConfig+0x2fe>
 80036dc:	2302      	movs	r3, #2
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e04e      	b.n	8003782 <UART_SetConfig+0x2fe>
 80036e4:	2304      	movs	r3, #4
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ea:	e04a      	b.n	8003782 <UART_SetConfig+0x2fe>
 80036ec:	2308      	movs	r3, #8
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f2:	e046      	b.n	8003782 <UART_SetConfig+0x2fe>
 80036f4:	2310      	movs	r3, #16
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fa:	e042      	b.n	8003782 <UART_SetConfig+0x2fe>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <UART_SetConfig+0x2dc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d13a      	bne.n	800377c <UART_SetConfig+0x2f8>
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <UART_SetConfig+0x2e4>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003714:	d01a      	beq.n	800374c <UART_SetConfig+0x2c8>
 8003716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371a:	d81b      	bhi.n	8003754 <UART_SetConfig+0x2d0>
 800371c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003720:	d00c      	beq.n	800373c <UART_SetConfig+0x2b8>
 8003722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003726:	d815      	bhi.n	8003754 <UART_SetConfig+0x2d0>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <UART_SetConfig+0x2b0>
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d008      	beq.n	8003744 <UART_SetConfig+0x2c0>
 8003732:	e00f      	b.n	8003754 <UART_SetConfig+0x2d0>
 8003734:	2300      	movs	r3, #0
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e022      	b.n	8003782 <UART_SetConfig+0x2fe>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e01e      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e01a      	b.n	8003782 <UART_SetConfig+0x2fe>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e016      	b.n	8003782 <UART_SetConfig+0x2fe>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375a:	e012      	b.n	8003782 <UART_SetConfig+0x2fe>
 800375c:	cfff69f3 	.word	0xcfff69f3
 8003760:	40008000 	.word	0x40008000
 8003764:	40013800 	.word	0x40013800
 8003768:	40021000 	.word	0x40021000
 800376c:	40004400 	.word	0x40004400
 8003770:	40004800 	.word	0x40004800
 8003774:	40004c00 	.word	0x40004c00
 8003778:	40005000 	.word	0x40005000
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4aae      	ldr	r2, [pc, #696]	; (8003a40 <UART_SetConfig+0x5bc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	f040 8097 	bne.w	80038bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800378e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003792:	2b08      	cmp	r3, #8
 8003794:	d823      	bhi.n	80037de <UART_SetConfig+0x35a>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0x318>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037df 	.word	0x080037df
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037cf 	.word	0x080037cf
 80037b0:	080037df 	.word	0x080037df
 80037b4:	080037df 	.word	0x080037df
 80037b8:	080037df 	.word	0x080037df
 80037bc:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c0:	f7fe ff82 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80037c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037c6:	e010      	b.n	80037ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b9e      	ldr	r3, [pc, #632]	; (8003a44 <UART_SetConfig+0x5c0>)
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037cc:	e00d      	b.n	80037ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7fe ff0d 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80037d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037d4:	e009      	b.n	80037ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037dc:	e005      	b.n	80037ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8130 	beq.w	8003a52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	4a94      	ldr	r2, [pc, #592]	; (8003a48 <UART_SetConfig+0x5c4>)
 80037f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	fbb3 f3f2 	udiv	r3, r3, r2
 8003804:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d305      	bcc.n	8003822 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d903      	bls.n	800382a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003828:	e113      	b.n	8003a52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2200      	movs	r2, #0
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	60fa      	str	r2, [r7, #12]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	4a84      	ldr	r2, [pc, #528]	; (8003a48 <UART_SetConfig+0x5c4>)
 8003838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800383c:	b29b      	uxth	r3, r3
 800383e:	2200      	movs	r2, #0
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003848:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384c:	f7fc fcec 	bl	8000228 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	020b      	lsls	r3, r1, #8
 8003862:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003866:	0202      	lsls	r2, r0, #8
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	6849      	ldr	r1, [r1, #4]
 800386c:	0849      	lsrs	r1, r1, #1
 800386e:	2000      	movs	r0, #0
 8003870:	460c      	mov	r4, r1
 8003872:	4605      	mov	r5, r0
 8003874:	eb12 0804 	adds.w	r8, r2, r4
 8003878:	eb43 0905 	adc.w	r9, r3, r5
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	469a      	mov	sl, r3
 8003884:	4693      	mov	fp, r2
 8003886:	4652      	mov	r2, sl
 8003888:	465b      	mov	r3, fp
 800388a:	4640      	mov	r0, r8
 800388c:	4649      	mov	r1, r9
 800388e:	f7fc fccb 	bl	8000228 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4613      	mov	r3, r2
 8003898:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a0:	d308      	bcc.n	80038b4 <UART_SetConfig+0x430>
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a8:	d204      	bcs.n	80038b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	e0ce      	b.n	8003a52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038ba:	e0ca      	b.n	8003a52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c4:	d166      	bne.n	8003994 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d827      	bhi.n	800391e <UART_SetConfig+0x49a>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0x450>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe fee6 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80038fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038fe:	e014      	b.n	800392a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fef8 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003906:	e010      	b.n	800392a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <UART_SetConfig+0x5c0>)
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800390c:	e00d      	b.n	800392a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe fe6d 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8003912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003914:	e009      	b.n	800392a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800391c:	e005      	b.n	800392a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8090 	beq.w	8003a52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <UART_SetConfig+0x5c4>)
 8003938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	fbb3 f3f2 	udiv	r3, r3, r2
 8003944:	005a      	lsls	r2, r3, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	441a      	add	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d916      	bls.n	800398c <UART_SetConfig+0x508>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d212      	bcs.n	800398c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f023 030f 	bic.w	r3, r3, #15
 800396e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	b29b      	uxth	r3, r3
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	b29a      	uxth	r2, r3
 800397c:	8bfb      	ldrh	r3, [r7, #30]
 800397e:	4313      	orrs	r3, r2
 8003980:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	8bfa      	ldrh	r2, [r7, #30]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	e062      	b.n	8003a52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003992:	e05e      	b.n	8003a52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003998:	2b08      	cmp	r3, #8
 800399a:	d828      	bhi.n	80039ee <UART_SetConfig+0x56a>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0x520>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7fe fe7e 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80039cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039ce:	e014      	b.n	80039fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe fe90 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <UART_SetConfig+0x5c0>)
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe fe05 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039f8:	bf00      	nop
    }

    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d028      	beq.n	8003a52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <UART_SetConfig+0x5c4>)
 8003a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	441a      	add	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	d910      	bls.n	8003a4c <UART_SetConfig+0x5c8>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d20c      	bcs.n	8003a4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x5ce>
 8003a3e:	bf00      	nop
 8003a40:	40008000 	.word	0x40008000
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	080043c0 	.word	0x080043c0
      }
      else
      {
        ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3730      	adds	r7, #48	; 0x30
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7a:	d10a      	bne.n	8003b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b098      	sub	sp, #96	; 0x60
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd0:	f7fd f8b2 	bl	8000d38 <HAL_GetTick>
 8003bd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d12f      	bne.n	8003c44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f88e 	bl	8003d14 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d022      	beq.n	8003c44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c12:	653b      	str	r3, [r7, #80]	; 0x50
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e6      	bne.n	8003bfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e063      	b.n	8003d0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d149      	bne.n	8003ce6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f857 	bl	8003d14 <UART_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03c      	beq.n	8003ce6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	623b      	str	r3, [r7, #32]
   return(result);
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e6      	bne.n	8003c6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	69b9      	ldr	r1, [r7, #24]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	617b      	str	r3, [r7, #20]
   return(result);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e012      	b.n	8003d0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3758      	adds	r7, #88	; 0x58
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d24:	e04f      	b.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d04b      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fd f803 	bl	8000d38 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e04e      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d037      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d034      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d031      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d110      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2208      	movs	r2, #8
 8003d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f879 	bl	8003e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2208      	movs	r2, #8
 8003d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e029      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	d111      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f85f 	bl	8003e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d0a0      	beq.n	8003d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b08f      	sub	sp, #60	; 0x3c
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	61ba      	str	r2, [r7, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	613b      	str	r3, [r7, #16]
   return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003e64:	bf00      	nop
 8003e66:	373c      	adds	r7, #60	; 0x3c
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b095      	sub	sp, #84	; 0x54
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
 8003e98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d118      	bne.n	8003f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	647b      	str	r3, [r7, #68]	; 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003f30:	bf00      	nop
 8003f32:	3754      	adds	r7, #84	; 0x54
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b090      	sub	sp, #64	; 0x40
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d137      	bne.n	8003fc8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f80:	633a      	str	r2, [r7, #48]	; 0x30
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc6:	e002      	b.n	8003fce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003fc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fca:	f7ff fa31 	bl	8003430 <HAL_UART_TxCpltCallback>
}
 8003fce:	bf00      	nop
 8003fd0:	3740      	adds	r7, #64	; 0x40
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff fa2d 	bl	8003444 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d109      	bne.n	8004032 <UART_DMAError+0x40>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b21      	cmp	r3, #33	; 0x21
 8004022:	d106      	bne.n	8004032 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7ff fede 	bl	8003dee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d109      	bne.n	8004054 <UART_DMAError+0x62>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b22      	cmp	r3, #34	; 0x22
 8004044:	d106      	bne.n	8004054 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff0e 	bl	8003e70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f043 0210 	orr.w	r2, r3, #16
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004064:	6978      	ldr	r0, [r7, #20]
 8004066:	f7ff f9f7 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff f9e1 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b088      	sub	sp, #32
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	613b      	str	r3, [r7, #16]
   return(result);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff f9a2 	bl	8003430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_UARTEx_DisableFifoMode+0x16>
 8004142:	2302      	movs	r3, #2
 8004144:	e027      	b.n	8004196 <HAL_UARTEx_DisableFifoMode+0x66>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2224      	movs	r2, #36	; 0x24
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e02d      	b.n	8004216 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f850 	bl	800429c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004232:	2302      	movs	r3, #2
 8004234:	e02d      	b.n	8004292 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2224      	movs	r2, #36	; 0x24
 8004242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f812 	bl	800429c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d108      	bne.n	80042be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042bc:	e031      	b.n	8004322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042be:	2308      	movs	r3, #8
 80042c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042c2:	2308      	movs	r3, #8
 80042c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	0e5b      	lsrs	r3, r3, #25
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	0f5b      	lsrs	r3, r3, #29
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042e6:	7bbb      	ldrb	r3, [r7, #14]
 80042e8:	7b3a      	ldrb	r2, [r7, #12]
 80042ea:	4911      	ldr	r1, [pc, #68]	; (8004330 <UARTEx_SetNbDataToProcess+0x94>)
 80042ec:	5c8a      	ldrb	r2, [r1, r2]
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042f2:	7b3a      	ldrb	r2, [r7, #12]
 80042f4:	490f      	ldr	r1, [pc, #60]	; (8004334 <UARTEx_SetNbDataToProcess+0x98>)
 80042f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	7b7a      	ldrb	r2, [r7, #13]
 8004308:	4909      	ldr	r1, [pc, #36]	; (8004330 <UARTEx_SetNbDataToProcess+0x94>)
 800430a:	5c8a      	ldrb	r2, [r1, r2]
 800430c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004310:	7b7a      	ldrb	r2, [r7, #13]
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <UARTEx_SetNbDataToProcess+0x98>)
 8004314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004316:	fb93 f3f2 	sdiv	r3, r3, r2
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	080043d8 	.word	0x080043d8
 8004334:	080043e0 	.word	0x080043e0

08004338 <memset>:
 8004338:	4402      	add	r2, r0
 800433a:	4603      	mov	r3, r0
 800433c:	4293      	cmp	r3, r2
 800433e:	d100      	bne.n	8004342 <memset+0xa>
 8004340:	4770      	bx	lr
 8004342:	f803 1b01 	strb.w	r1, [r3], #1
 8004346:	e7f9      	b.n	800433c <memset+0x4>

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4d0d      	ldr	r5, [pc, #52]	; (8004380 <__libc_init_array+0x38>)
 800434c:	4c0d      	ldr	r4, [pc, #52]	; (8004384 <__libc_init_array+0x3c>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	2600      	movs	r6, #0
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	4d0b      	ldr	r5, [pc, #44]	; (8004388 <__libc_init_array+0x40>)
 800435a:	4c0c      	ldr	r4, [pc, #48]	; (800438c <__libc_init_array+0x44>)
 800435c:	f000 f818 	bl	8004390 <_init>
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	2600      	movs	r6, #0
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	080043f0 	.word	0x080043f0
 8004384:	080043f0 	.word	0x080043f0
 8004388:	080043f0 	.word	0x080043f0
 800438c:	080043f4 	.word	0x080043f4

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
